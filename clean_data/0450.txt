Cyber Knowledge Completion Using Large Language Models Braden K Webb, Sumit Purohit, Rounak Meyur Pacific Northwest National Laboratory Richland, Washington 99352 {braden.webb,sumit.purohit,rounak.meyur}@pnnl.gov This work has been submitted to the IEEE for possible publication. Copyright may be transferred without notice, after which this version may no longer be accessible. Abstract—The integration of the Internet of Things (IoT) into Cyber-Physical Systems (CPSs) has expanded their cyber- attack surface, introducing new and sophisticated threats with potential to exploit emerging vulnerabilities. Assessing the risks of CPSs is increasingly difficult due to incomplete and outdated cybersecurity knowledge. This highlights the urgent need for better-informed risk assessments and mitigation strategies. While previous efforts have relied on rule-based natural language processing (NLP) tools to map vulnerabilities, weaknesses, and attack patterns, recent advancements in Large Language Models (LLMs) present a unique opportunity to enhance cyber-attack knowledge completion through improved reasoning, inference, and summarization capabilities. We apply embedding models to encapsulate information on attack patterns and adversarial techniques, generating mappings between them using vector embeddings. Additionally, we propose a Retrieval-Augmented Generation (RAG)-based approach that leverages pre-trained models to create structured mappings between different tax- onomies of threat patterns. Further, we use a small hand-labeled dataset to compare the proposed RAG-based approach to a baseline standard binary classification model. Thus, the proposed approach provides a comprehensive framework to address the challenge of cyber-attack knowledge graph completion. Index Terms—Cybersecurity, Cyber-Physical Systems, Knowl- edge Graph, Retrieval Augmented Generation, Large Language Models I. INTRODUCTION The integration of the Internet of Things (IoT) into In- dustrial Control Systems (ICS) has enhanced their automa- tion, efficiency, and productivity in the industrial environment through a seamless convergence of the information technol- ogy (IT) and operational technology (OT) domains [1]. The widespread adoption of the Industrial Internet of Things (IIoT) has also created opportunities for cyber attacks, leading to the exploitation of the confidentiality, integrity, and availability (CIA) of the service and/or data [2]. Some examples of such attacks include, but are not limited to, malware/ransomware attacks [3]–[5], distributed denial of service (DDoS) [6], phishing attacks [7], and supply chain compromise [8]. Such threats can pose significant risk to critical infrastructure and have severe consequences for safety, economy, and public well-being [9]. To understand how adversaries exploit vulnerabilities in cyber systems, the Common Attack Pattern Enumerations and Classifications (CAPEC), which are maintained by MITRE Corporation, serve as a publicly available catalog of cyber attack patterns [10]. Similarly, the MITRE Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK) framework is another essential tool that offers a comprehensive knowledge base for cyber threats from real world observations [11]. This framework provides a taxonomy of adversarial motivations or goals (tactics) and a list of actions often taken to achieve those goals (techniques) in Enterprise, mobile, and ICS networks. These two publicly available information repositories, CAPEC and ATT&CK, collectively contain a wealth of knowledge about cyber threats that could be invaluable to organizations seeking to model potential adversarial behav- ior, plan mitigation measures, or otherwise improve their cybersecurity infrastructure. Therefore, we developed a novel approach and capability to better understand and model the relationship between the two taxonomies and identify the ATT&CK techniques that correspond to each CAPEC at- tack pattern. While some cross-references currently exist for the Enterprise-oriented adversarial techniques in the MITRE ATT&CK framework, there are no such references for tech- niques in the ICS or mobile domains. A challenge to this integration is the lack of an automated framework which maps a CAPEC attack pattern to related ATT&CK techniques. This integration is a daunting task. As of August 2024, there were 559 CAPEC attack patterns and 83 ATT&CK ICS techniques, for a combination of 46,397 possible mappings between the two repositories. Moreover, significant domain expertise is necessary to verify whether a given connection is valid, often requiring discussion between cybersecurity experts, system operators, and users. Since they are frequently updated, it is difficult to justify manually linking the two data sets. Although traditional machine learning classifiers might seem useful for identifying similar descriptions of attack pat- terns and techniques, most of these approaches require fairly structured input to learn representations. Almost all of the information describing a CAPEC attack pattern or ATT&CK ICS technique, however, is expressed in fields of unstructured text consisting of entry identifier, name and description. We therefore turn to methodologies of natural language processing, where recent advances in large language models provide an opportunity to use artificial intelligence as a tool in automating the mapping task. In particular, many embedding models can algorithmically encode text strings as arrays of floating-point numbers in a high-dimensional normed vector arXiv:2409.16176v1 [cs.CR] 24 Sep 2024 space. We can interpret these vectors, known as document em- beddings or simply embeddings, as representing the semantics of the input text. Embeddings of documents with similar mean- ings end up close together, and unrelated documents generate embeddings that are farther apart [12]. We use this process to treat difficult-to-handle unstructured text as mathematical vectors, to which we can then apply more standard machine learning tools. Specifically, we compare a mapping approach that identify nearest neighbors in embedding space with a retrieval-augmented generation (RAG) approach. We evaluate our results on a hand-labeled data set. Problem Statement. In this paper, we address the key re- search challenge of cyber-attack knowledge graph completion, specifically bridging gaps between disparate cybersecurity knowledge silos to support risk assessment and mitigation planning for Cyber-Physical Systems (CPSs). We focus on creating a bidirectional mapping between the CAPEC and ATT&CK frameworks, ensuring that a CAPEC attack pat- tern and an ATT&CK ICS technique are connected only when they accurately describe the same adversarial behavior. To achieve this, we use embedding models to encode text descriptions of CAPEC attack patterns and ATT&CK ICS techniques into vectors, and use machine learning algorithms to generate the mappings. This paper explores the two follow- ing sub-problems: (i) evaluating various embedding models to determine the most effective one for cyber-attack knowledge graph completion, and (ii) generate and validate a mapping between CAPEC attack patterns and ATT&CK ICS techniques using the vector embeddings obtained from their tokenized descriptions. Contributions. This paper makes several key contributions to the field of cyber-attack knowledge graph completion. First, we provide a comprehensive comparison of state-of-the-art embedding models when used for the cyber-attack knowledge graph completion task. Second, we demonstrate the effective- ness of both traditional classification methods and a RAG- based approach in generating accurate mappings between cybersecurity taxonomies. Finally, we contribute a valuable resource to the community by publishing a small, hand-labeled dataset that captures the relationships between CAPEC attack patterns and ATT&CK ICS techniques, which serves as a critical tool for validating our proposed methodology. The remainder of the paper is outlined as follows: section II gives an overview of related work and section III presents embedding and mapping generation process. We discuss eval- uation metrics in section IV and the results in section V. II. RELATED WORK Researchers have explored AI/ML approaches to automate the process of cyber knowledge alignment across different data sources. Random Forest [13], naive bayes classifier [14], and natural language-based similarity measures [15] has been used with limited success to align several MITRE repositories, in- cluding Common Vulnerabilities and Exposures (CVE), Com- mon Weakness Enumeration (CWE), and CAPEC. Maunero et al. [16] use an ontology-based approach to automate the risk assessment process. These approaches suffer from a lack of ground-truth data required for model training and rule generation. In contrast, our previous work V2W-BERT [17] and Villanueva-Miranda et al. [18] have also demonstrated the use of encoder-only and encoder-decoder language models, such as BERT and Google T5, to automate the task of mapping between various cybersecurity databases with high accuracy. However, decoder-only large language models have greatly improved in recent years and have revolutionized the way they are used in few-shot learning applications with limited data. In this paper, we use state-of-the-art embedding models for this purpose and performed a comparison among them to identify which among them suits best for the task of cyber knowledge completion, and utilize a decoder-only LLM to refine their output. III. METHODS This section introduces mathematical notations used to describe the cyber-knowledge problem space and presents an embedding and mapping generation approach. We provide examples of the descriptive text contained within CAPEC attack patterns and ATT&CK ICS techniques, and use it to explain the methodology. A. Preliminaries Let C = {c1, . . . , cN} be the set of N CAPEC attack patterns and T = {t1, . . . , tM} the set of M MITRE ATT&CK ICS techniques. We want to find the set of mappings M ⊆ C × T such that for each (c, t) ∈M, adversarial behaviors can be accurately described by both c and t. We can represent this set by a function f : C →P(T) from individual CAPEC attack patterns to sets of techniques, where P(T) denotes the power set of T. A possible approximation for this function is to identify the best k choices of ICS techniques that can be related to a given CAPEC attack pattern, i.e., fk(ci) = {ti1, . . . , tik}, where ti1, . . . , tik are the k ICS techniques that are most similar to ci. We can also model the problem in the reverse direction as the process of learning a function g : T →P(C). Indeed, our methods work in both directions (although the asymmetry produces slightly different results). However, since the process is completely analogous, we focus on describing the “forward“ direction C →P(T) in the remainder of the paper. B. Embedding Generation Our approach to learn the mapping function between the CAPEC and ATT&CK taxonomies utilizes document embed- ding models. Specifically, we use transformer-based neural networks that produce fixed-length, dense representations of variable length documents—allowing us to compare the tax- onomies quantitatively. We prepare a description string for each CAPEC attack pattern and ATT&CK ICS technique by concatenating their name, ID, and description, as displayed in Fig. 1. An embed- ding model, Φ, then tokenizes each input description string to a list of tokens and transforms those tokens to a vector A CAPEC Attack Pattern ID: CAPEC-125 Name: Flooding Description: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target’s operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target. A MITRE ICS ATT&CK Technique ID: T0814 Name: Denial of Service Description: Adversaries may perform Denial-of-Service (DoS) at- tacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment. Some ICS devices are particularly sensitive to DoS events, and may become unresponsive in reaction to even a simple ping sweep. Adversaries may also attempt to execute a Permanent Denial-of-Service (PDoS) against certain devices, such as in the case of the BrickerBot malware. Fig. 1. Examples of description strings for a CAPEC attack pattern [10] and an ATT&CK ICS technique [11] which describe very similar adversarial behavior. A good framework should generate a mapping between these two documents. TABLE I THE EMBEDDING MODELS THAT WE COMPARED AND EVALUATED, AND THE FIXED SIZE d OF THE EMBEDDINGS THEY GENERATE. Embedding Model Φ Dimensionality d text-embedding-ada-002 [19] 1536 E5-large-v2 [20] 1024 instructor-large [21] 768 all-MiniLM-L6-v2 [12] 384 in Rd. Although most of the description strings are quite short and fit within the maximum sequence length of the models, truncation is performed for the few longer descriptions where necessary. Our specific embedding models and their corresponding dimensions are listed in Table I. C. Mapping Generation The next task is to use the vector embedding of the description strings of CAPEC attack patterns and ATT&CK ICS techniques to generate a mapping between the taxonomies, i.e., identify the list of k entries from one taxonomy that are most similar to a given entry from the other taxonomy. Here, we present two methods of generating the required mapping – (i) nearest-neighbour mapping, and (ii) RAG-based mapping. These are compared in Fig. 2. As we will show in this section, the RAG-based approach builds directly off the nearest-neighbor approach, refining its output to improve precision. Nearest-Neighbor Mapping: Treating the direction of the vector embedding of the description string as indicative of its semantic meaning, we can approach our problem of identifying fk(ci) = {ti1, . . . , tik} by evaluating the k-nearest neighbors of the CAPEC embedding Φ (ci) from the set of technique embeddings {Φ (t1) , Φ (t2) , · · · , Φ (tM)}. Formally, then, fk,Φ(ci) = argmax J⊂T :|J|=k X t∈J Φ(ci)T Φ(t), which is the set of k techniques that have the largest inner products with Φ(ci). At this scale, matrix multiplication makes this calculation easily tractable. As a result, for each choice of both embedding model and k, we have complete approximate mappings given by n c, t  : t ∈fk,Φ(c) o c∈C and n c, t  : c ∈gk,Φ(t) o t∈T for both the forwards (CAPEC to ATT&CK) and backwards (ATT&CK to CAPEC) directions. For notational convenience going forward, we will not write Φ(c) or Φ(t) each time we refer to the embedding of a CAPEC attack pattern or ATT&CK ICS technique. Instead we also use c or t to denote their embedded representation in Rd. The nearest-neighbor embedding approach provides a base- line method of retrieving potential candidates for CAPEC- ATT&CK mappings, but suffers from filtering those candidates with precision. It also requires every CAPEC attack pattern (or ATT&CK ICS technique) to be linked to the same fixed number k of ATT&CK ICS techniques (or CAPEC attack patterns), when in reality the number of links might vary widely. Hence, we present a RAG-based mapping as an alternative to address these common problems. RAG-Based Mapping: We propose a method that improves upon the simple embedding-based retrieval method by utilizing LLMs in an approach similar to standard RAG techniques [22]. This RAG pipeline relies upon both an embedding model and a generative language model—the nearest-neighbor mapping function fk,Φ is in fact the first step of the RAG pipeline. As shown in Fig. 2, an individual CAPEC attack pattern c is fed into the pipeline as input along with a parameter k, and the re- sulting techniques fk,Φ(c) are retrieved. While we did store the intermediate, low-dimensional embedded representations in a vector database, the taxonomies are currently small enough that all embeddings can alternatively be kept in memory. Once retrieved, the techniques are ranked according to their proximity to c, and then passed along to the LLM in a prompt. Because of the significant instability and sensitivity of LLMs to small changes in their inputs [23], prompt engineering is necessary to improve their robustness. We utilized the open- source 8B-parameter instruction fine-tuned variant of Meta’s Llama 3 for this purpose [24]. Because a key desideratum of our research is to automate this mapping task, we also desired the outputs to be structured in a predictable, machine-accessible format. To this end, we Fig. 2. The nearest-neighbor and RAG pipelines for cyber attack knowledge graph completion, shown in the CAPEC-to-ATT&CK direction. Modules in yellow are common to both the nearest-neighbor and RAG pipelines, while those in red are unique to the RAG-based approach. leverage a decoding technique to sample generated tokens according to any context-free grammar. This allows us to specify a JSON schema of our choice that we can then convert to a Backus-Naur form of a formal grammar [25] to constrain the LLM’s output tokens accordingly [26]. The retrieved information is added as a context to the LLM. In contrast to the nearest-neighbor mapping presented earlier, the RAG-based approach leverages the LLM’s summarizing and reasoning capabilities to provide explainable mapping results. IV. EVALUATION The lack of any external ground truth data set for validating our results is a major roadblock in efforts to evaluate the ef- ficacy of our methodology. Indeed, this data-scarcity problem is a key aspect of the very problem we seek to address— and this is reflected in our test set. We hand-crafted this sample by manually labeling a set of what we determined to be corresponding CAPEC attack patterns and ATT&CK ICS techniques. While we sought to obtain a representative sample of both taxonomies, the selection process was not entirely random. Several CAPEC attack patterns were chosen because they were either (i) classified as being ‘meta’-level abstractions or (ii) listed by MITRE among patterns that could be relevant to industrial control systems. However, it is quite possible that there are other, equally relevant ATT&CK ICS techniques for any one of those CAPEC attack patterns. Moreover, it is highly unlikely that each of the CAPEC attack patterns chosen to generate the test set should map to the same number k of ATT&CK ICS techniques (and indeed, for a given c ∈C, the size of the set given by {t : (c, t) ∈G} varies between 0 and 5). For these reasons, we explicitly tried to get as broad of a range of patterns and techniques included in the data set as possible and developed novel metrics to gain better insight into pipeline performance. Due to the many-to-many relationship that should exist between the CAPEC database and the MITRE ATT&CK framework, we determined to evaluate our approach as a stan- dard classification model. In general, important performance metrics for a classification algorithm include: • accuracy — the ratio of correct classifications (both positive and negative) to all possible classifications • recall — the ratio of correctly retrieved relevant instances (true positives) to all relevant instances • precision — the ratio of correctly retrieved relevant instances (true positives) to all retrieved instances • F1-score — the harmonic mean of precision and recall, given by F1 = 2 × precision × recall precision + recall In order to make inferences about a larger population, or for reasons of computational efficiency, these metrics are usually calculated on a test set of randomly sampled data points rather than on the entire space of possibilities. We provide these same metrics in the language of our problem, but due to insufficiencies in our test set, we also define notions of coverage and a false mapping ratio. Since many of the methods we discuss involve computing various 1- to-k mappings from CAPEC attack patterns to ICS techniques, these metrics allow us greater insight into how often, on aver- age, a given function maps individual attack patterns to at least one of their associated techniques, as well as how often we should expect false positives among our retrieved mappings. The metrics can also be reversed to apply analogously for mappings from ATT&CK space to CAPEC space. A. Metric Definitions Let C be the set of all CAPEC attack patterns and T the set of all MITRE ICS techniques. We consider mappings M, G ⊆ C × T, where M is the mapping we wish to evaluate, and G is the labeled set of ground-truth mappings. In other words, G denotes a mapping such that for each pair (c, t) ∈G, the CAPEC attack pattern c truly does correspond to t. We can then define recallG(M) = |M ∩G| |G| and precisionG(M) = |M ∩G| |{(ci, ti) ∈M : ∃t ∈T, (ci, t) ∈G}|. In essence, when calculating the precision of M given G, we only want to evaluate M over the CAPEC attack patterns considered in G. It is therefore natural to define the F-score (or F1-score) of M given G as FG(M) = 2 × precisionG(M) × recallG(M) precisionG(M) + recallG(M). Coverage. In this context, we find it useful to introduce a notion of coverage. In doing so, the number of relevant pairs are computed for each c ∈CG = {c ∈C : ∃t ∈T, (c, t) ∈ G}, and we define Mc ⊆M as the set of all maps from attack pattern c to one or more ICS techniques: Mc = {(ci, ti) ∈M, ci = c} We then define the coverage, with respect to G, of a mapping M to be the proportion of attack patterns c in Cg for which Mc contains a valid mapping from G, i.e., coverageG(M) = P c∈CG I [Mc T G ̸= ∅] |CG| While we could just as easily use a notion of technique coverage rather than CAPEC coverage, this method is more easily interpretable, given our test set, as the proportion of CAPEC attack patterns considered in M that are mapped to at least one of the techniques identified in G. False Mapping Ratio (FMR). We also propose a metric, which we call the False Mapping Ratio (FMR), to evaluate the frequency with which our predicted mapping methodology selects non-similar pairs. The FMR is defined as the fraction of element pairs that are explicitly labeled as non-similar in the ground truth dataset but are erroneously identified as similar by the proposed mapping algorithm. Mathematically, the number of false positive mappings (non-similar pairs predicted as similar) can be denoted by M T eG, where eG is the total number of non-similar pairs explicitly identified in the ground truth dataset. The FMR is then expressed as: FMR = |M T eG| | eG| A higher FMR indicates poorer performance, as it shows the proposed model’s tendency to incorrectly map non-similar elements. Conversely, a lower FMR suggests better mapping accuracy. V. RESULTS Table II compares the two proposed mapping methodologies—nearest neighbor mapping and RAG- based mapping—from CAPEC attack patterns to ATT&CK ICS techniques, while Table III compares performance from ATT&CK to CAPEC. We compare four embedding models for each mapping: E5-large-v2 (listed as ‘e5’ in the tables) [20], instructor-large (listed as ‘instructor’) [21], all-MiniLM-L6-v2 (listed as ‘sent-transf’) [12], and text-embedding-ada-002 (listed as ‘ada-002’) [19]. The models are evaluated for mapping performance using standard metrics like Recall, Precision, and F-Score, as well as the new metrics introduced in section IV, namely Coverage and the FMR. The best results are highlighted in bold. By placing the symbols ↑ and ↓next to the metric names, we indicate the direction in which an improvement is represented. We consider 1-5 nearest mapped ATT&CK techniques for each CAPEC in order to evaluate the mapping between elements of the two frameworks. The key findings for the mapping from CAPEC attack patterns to ATT&CK ICS techniques shown in Table II can be listed as follows: (i) RAG-based mapping generally outper- forms nearest neighbor mapping in terms of precision and F- score across most embedding models, indicating more accurate mapping predictions. (ii) Coverage increases consistently as we move from 1-to-1 to 1-to-5 mappings for both methods. This means that considering more nearest neighbors allows for more elements to be mapped, though it may also increase false positives. This can be validated from the FMR scores, where we see that for each embedding model, the FMR tends to increase as k increases. Recall that a lower FMR indi- cates fewer incorrect mappings. (iii) instructor-large and text- embedding-ada-002 exhibit stronger performance in precision and F-score in both mapping methodologies, particularly in the RAG-based approach. E5-large-v2 performs consistently weaker compared to other models, with lower recall and F- scores in both methodologies. Therefore, text-embedding-ada- 002 and instructor-large should be preferred as top choices of embedding model for this task. The key findings for the mapping from ATT&CK to CAPEC shown in Table III can be listed as follows: (i) The perfor- mance generally improves as the number of nearest neighbors k increases from 1 to 5 for all embedding models and mapping methodologies. (ii) The FMR tends to increase with the number of neighbors k, indicating a trade-off between coverage and false-positive matches. We note this holds only for the nearest neighbor mapping method. (iii) The RAG-based mapping typically outperforms thenearest neighbor mapping across most metrics. We note higher precision, coverage and F-scores for high k values, while the FMR values are lower, indicating the superiority of RAG-based mapping for this task. (iv) The text-embedding-ada-002 model shows the highest coverage, reaching 100% for k ≥2 with both mapping methods, denoting it to be the best choice of embedding model for this mapping task. A significant challenge in evaluating mapping methodolo- gies between data sets, such as CAPEC attack patterns and ATT&CK ICS techniques, is the lack of labeled ground truth dataset. Without a comprehensive, annotated mapping of relationships between these frameworks, it is difficult to assess the true accuracy of various predictive mapping models. Community-driven efforts are essential to address this gap by creating and maintaining a labeled data set that defines the relationships between CAPEC and ATT&CK. Such initiatives would not only enrich the cybersecurity knowledge graph but also provide a critical resource for data-driven approaches aimed at automating the mapping process. The availability of a well-labeled ground truth would enable researchers and practitioners to validate new methodologies, refine existing models, and improve the overall accuracy of threat detection and defense strategies within the cybersecurity landscape. TABLE II CAPEC-TO-ATT&CK RESULTS Nearest neighbor mapping RAG-based mapping Model 1-to-k Recall ↑ Precision ↑ F-Score ↑ Coverage ↑ FMR ↓ Recall ↑ Precision ↑ F-Score ↑ Coverage ↑ FMR ↓ e5 1-to-1 .0700 .3684 .1176 .3684 .0833 .0769 .2857 .1212 .4000 .1077 1-to-2 .1700 .4474 .2464 .5789 .1389 .1400 .4667 .2154 .5263 .1111 1-to-3 .2200 .3860 .2803 .5789 .2407 .1500 .4412 .2239 .4737 .1481 1-to-4 .3300 .4342 .3750 .8421 .2778 .2020 .5263 .2920 .6667 .1596 1-to-5 .4100 .4316 .4205 .8947 .3426 .2300 .5000 .3151 .6316 .1574 instructor 1-to-1 .1000 .5263 .1681 .5263 .0648 .0920 .5333 .1569 .5333 .0722 1-to-2 .1900 .5000 .2754 .7368 .1389 .1771 .6071 .2742 .7778 .0943 1-to-3 .2700 .4737 .3439 .7895 .2037 .2000 .5714 .2963 .7368 .1111 1-to-4 .3500 .4605 .3977 .8947 .2778 .2386 .5833 .3387 .7647 .1429 1-to-5 .4200 .4421 .4308 .8947 .3148 .2200 .5116 .3077 .6842 .1481 sent-transf 1-to-1 .1000 .5263 .1681 .5263 .0741 .0610 .3846 .1053 .3846 .0959 1-to-2 .1900 .5000 .2754 .7368 .1389 .1505 .5833 .2393 .7500 .1034 1-to-3 .2400 .4211 .3057 .7368 .2315 .1735 .5484 .2636 .7778 .1313 1-to-4 .3200 .4211 .3636 .9474 .2870 .2143 .5122 .3022 .8333 .1717 1-to-5 .3800 .4000 .3897 .9474 .3519 .2449 .4706 .3221 .8889 .2020 ada-002 1-to-1 .1200 .6316 .2017 .6316 .0556 .1084 .6429 .1856 .6429 .0610 1-to-2 .1900 .5000 .2754 .6842 .1019 .1856 .6000 .2835 .7647 .0941 1-to-3 .2400 .4211 .3057 .7895 .1667 .1900 .5758 .2857 .7368 .1019 1-to-4 .3000 .3947 .3409 .8947 .2130 .2200 .5641 .3165 .7895 .1204 1-to-5 .3300 .3474 .3385 .9474 .2407 .2400 .6000 .3429 .7895 .1296 TABLE III ATT&CK-TO-CAPEC RESULTS Nearest neighbor mapping RAG-based mapping Model 1-to-k Recall ↑ Precision ↑ F-Score ↑ Coverage ↑ FMR ↓ Recall ↑ Precision ↑ F-Score ↑ Coverage ↑ FMR ↓ e5 1-to-1 .0769 .6000 .1364 .6000 .0145 .0882 .6667 .1558 .6667 .0114 1-to-2 .1282 .5000 .2041 .8000 .0364 .1282 .5882 .2105 .8000 .0255 1-to-3 .1923 .5000 .2778 .7000 .0545 .1765 .7500 .2857 .7778 .0152 1-to-4 .2692 .5250 .3559 .8000 .0691 .2051 .7273 .3200 .7000 .0218 1-to-5 .3333 .5200 .4062 .8000 .0873 .2941 .8000 .4301 .8889 .0189 instructor 1-to-1 .0641 .5000 .1136 .5000 .0182 .0641 .5000 .1136 .5000 .0182 1-to-2 .1410 .5500 .2245 .7000 .0327 .1471 .6250 .2381 .7778 .0227 1-to-3 .2308 .6000 .3333 .8000 .0436 .1667 .6500 .2653 .7000 .0255 1-to-4 .2949 .5750 .3898 .8000 .0618 .2308 .7500 .3529 .8000 .0218 1-to-5 .3590 .5600 .4375 .8000 .0800 .2436 .7600 .3689 .8000 .0218 sent-transf 1-to-1 .1026 .8000 .1818 .8000 .0073 .1026 .8000 .1818 .8000 .0073 1-to-2 .2051 .8000 .3265 .9000 .0145 .1923 .8824 .3158 .9000 .0073 1-to-3 .2692 .7000 .3889 .9000 .0327 .2051 .8421 .3299 .9000 .0109 1-to-4 .3333 .6500 .4407 .9000 .0509 .2436 .7600 .3689 .8000 .0218 1-to-5 .3718 .5800 .4531 .9000 .0764 .2564 .7692 .3846 .9000 .0218 ada-002 1-to-1 .1235 .8333 .2151 .8333 .0070 .1235 .8333 .2151 .8333 .0070 1-to-2 .1923 .7500 .3061 1.0000 .0182 .1667 .8667 .2796 1.0000 .0073 1-to-3 .2564 .6667 .3704 1.0000 .0364 .1795 .7778 .2917 1.0000 .0145 1-to-4 .3333 .6500 .4407 1.0000 .0509 .2564 .8696 .3960 1.0000 .0109 1-to-5 .4103 .6400 .5000 1.0000 .0655 .2821 .9167 .4314 1.0000 .0073 VI. CONCLUSION This study presents a comprehensive evaluation of mapping methodologies between two distinct taxonomies, leveraging both nearest neighbor and RAG-based approaches across multiple embedding models. The results consistently demon- strate that RAG-based mapping outperforms nearest neighbor mapping in terms of precision, F-score, and the ability to reduce incorrect mappings, as evidenced by lower FMR scores. Among the embedding models, instructor-large and text- embedding-ada-002 achieve the highest mapping accuracy, particularly when larger sets of neighbors are considered (1- to-5 mappings). Conversely, the E5-large-v2 embedding model consistently underperforms across both methodologies. These findings highlight the importance of selecting both an appro- priate mapping strategy and embedding model when tackling the similarity-based mapping problem between elements of the CAPEC and ATT&CK frameworks. Future work will focus on refining these approaches through fine-tuning the LLMs to further reduce false mappings and improve scalability. Additionally, incorporating more advanced validation techniques, including the use of expert-in-the-loop systems, could enhance the reliability and interpretability of the mappings. We will also predict mappings between the CWE and CVE knowledge sources to provide a comprehensive cybersecurity risk assessment. ACKNOWLEDGEMENT The research described in this paper is part of the Resilience Through Data Driven, Intelligently Designed Control (RD2C) Initiative at Pacific Northwest National Laboratory (PNNL). It was conducted under the Laboratory Directed Research and Development Program at PNNL, a multiprogram national laboratory operated by Battelle for the U.S. Department of Energy. REFERENCES [1] S. F. Ahmed, M. S. B. Alam, M. Hoque, A. Lameesa, S. Afrin, T. Farah, M. Kabir, G. Shafiullah, and S. Muyeen, “Industrial internet of things enabled technologies, challenges, and future directions,” Computers and Electrical Engineering, vol. 110, p. 108847, 2023. [Online]. Available: https://www.sciencedirect.com/science/article/pii/S0045790623002719 [2] S. H. Mekala, Z. Baig, A. Anwar, and S. Zeadally, “Cybersecurity for industrial iot (iiot): Threats, countermeasures, challenges and future directions,” Computer Communications, vol. 208, pp. 294–320, 2023. [Online]. Available: https://www.sciencedirect.com/science/article/pii/ S0140366423002189 [3] V. Kremez, “Snake ransomware is the next threat tar- geting business networks,” 2020, retrieved Aug 29 2023. [Online]. Available: https://www.bleepingcomputer.com/news/security/ snake-ransomware-is-the-next-threat-targeting-business-networks/ [4] I. Ilascu, “Lockbit, conti most active ransomware targeting industrial sector,” 2022, last accessed Aug 29 2023. [Online]. Available: https://www.bleepingcomputer.com/news/security/ lockbit-conti-most-active-ransomware-targeting-industrial-sector/ [5] L. Abrams, “Multinational tech firm abb hit by black basta ransomware attack,” 2023, retrieved Aug 29 2023. [Online]. Available: https://www.bleepingcomputer.com/news/security/ multinational-tech-firm-abb-hit-by-black-basta-ransomware-attack/ [6] A. Cherepanov, “Win32industroyer a new threat for industrial control systems,” 2017, retrieved Aug 29 2023. [Online]. Available: https://www. welivesecurity.com/wp-content/uploads/2017/06/Win32 Industroyer.pdf [7] S. Gatlan, “Microsoft disrupts bohrium hackers’ spear- phishing operation,” 2022, retrieved Aug 29 2023. [On- line]. Available: https://www.bleepingcomputer.com/news/security/ microsoft-disrupts-bohrium-hackers-spear-phishing-operation/ [8] R. A. Martin, “Trusting our supply chains: a comprehensive data-driven approach,” 2021, retrieved Aug 29 2023. [Online]. Available: https://www.mitre.org/sites/default/files/2021-11/ prs-20-01465-37-trusting-our-supply-chains-comprehensive-data-driven-approach. pdf [9] M. Asiri, N. Saxena, R. Gjomemo, and P. Burnap, “Understanding indicators of compromise against cyber-attacks in industrial control systems: A security perspective,” ACM Trans. Cyber-Phys. Syst., vol. 7, no. 2, Apr 2023. [Online]. Available: https://doi.org/10.1145/3587255 [10] The MITRE Corporation, “CAPEC VIEW: Industrial Control System (ICS) Patterns,” 2023, retrieved Aug 29 2023. [Online]. Available: https://capec.mitre.org/data/definitions/703.html [11] ——, “ICS Matrix,” 2023, retrieved Aug 29 2023. [Online]. Available: https://attack.mitre.org/matrices/ics/ [12] N. Reimers and I. Gurevych, “Sentence-bert: Sentence embeddings using siamese bert-networks,” in Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, 11 2019. [Online]. Available: https: //arxiv.org/abs/1908.10084 [13] M. Aota, H. Kanehara, M. Kubo, N. Murata, B. Sun, and T. Taka- hashi, “Automation of vulnerability classification from its description using machine learning,” in 2020 IEEE Symposium on Computers and Communications (ISCC). IEEE, 2020, pp. 1–7. [14] S. Na, T. Kim, and H. Kim, “A study on the classification of common vulnerabilities and exposures using na¨ıve bayes,” in Advances on Broad- Band Wireless Computing, Communication and Applications: Proceed- ings of the 11th International Conference On Broad-Band Wireless Com- puting, Communication and Applications (BWCCA–2016) November 5– 7, 2016, Korea. Springer, 2017, pp. 657–662. [15] K. Kanakogi, H. Washizaki, Y. Fukazawa, S. Ogata, T. Okubo, T. Kato, H. Kanuka, A. Hazeyama, and N. Yoshioka, “Tracing cve vulnerability information to capec attack patterns using natural language processing techniques,” Information, vol. 12, no. 8, p. 298, 2021. [16] N. Maunero, F. De Rosa, and P. Prinetto, “Towards cybersecurity risk assessment automation: an ontological approach,” in 2023 IEEE Intl Conf on Dependable, Autonomic and Secure Computing, Intl Conf on Pervasive Intelligence and Computing, Intl Conf on Cloud and Big Data Computing, Intl Conf on Cyber Science and Technology Congress (DASC/PiCom/CBDCom/CyberSciTech). IEEE, 2023, pp. 0628–0635. [17] S. S. Das, A. Dutta, S. Purohit, E. Serra, M. Halappanavar, and A. Pothen, “Towards automatic mapping of vulnerabilities to attack patterns using large language models,” in 2022 IEEE International Symposium on Technologies for Homeland Security (HST), 2022, pp. 1–7. [18] I. Villanueva-Miranda and M. Akbar, “Analyzing threat vectors in ics cyberattacks,” in 2023 IEEE International Conference on Big Data (BigData). IEEE, 2023, pp. 1368–1373. [19] OpenAI, “text-embedding-ada-002,” 2024, retrieved Aug 12 2024. [On- line]. Available: https://platform.openai.com/docs/guides/embeddings [20] L. Wang, N. Yang, X. Huang, B. Jiao, L. Yang, D. Jiang, R. Majumder, and F. Wei, “Text embeddings by weakly-supervised contrastive pre- training,” arXiv preprint arXiv:2212.03533, 2022. [21] H. Su, W. Shi, J. Kasai, Y. Wang, Y. Hu, M. Ostendorf, W.-t. Yih, N. A. Smith, L. Zettlemoyer, and T. Yu, “One embedder, any task: Instruction-finetuned text embeddings,” in Findings of the Association for Computational Linguistics: ACL 2023. Toronto, Canada: Association for Computational Linguistics, jul 2023, pp. 1102– 1121. [Online]. Available: https://aclanthology.org/2023.findings-acl.71 [22] P. Lewis, E. Perez, A. Piktus, F. Petroni, V. Karpukhin, N. Goyal, H. K¨uttler, M. Lewis, W.-t. Yih, T. Rockt¨aschel, S. Riedel, and D. Kiela, “Retrieval-augmented generation for knowledge-intensive nlp tasks,” in Proceedings of the 34th International Conference on Neural Information Processing Systems, ser. NIPS ’20. Red Hook, NY, USA: Curran Associates Inc., 2020. [23] L. Wang, X. Chen, X. Deng, H. Wen, M. You, W. Liu, Q. Li, and J. Li, “Prompt engineering in consistency and reliability with the evidence- based guideline for llms,” npj Digital Medicine, vol. 7, no. 1, p. 41, 2024. [24] AI@Meta, “Llama 3 model card,” 2024. [Online]. Available: https://github.com/meta-llama/llama3/blob/main/MODEL CARD.md [25] D. D. McCracken and E. D. Reilly, “Backus-naur form (bnf),” in Encyclopedia of Computer Science. John Wiley and Sons Ltd., 2003, pp. 129–131. [26] G. Gerganov, “llama.cpp,” https://github.com/ggerganov/llama.cpp, 2024.