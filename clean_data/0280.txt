A Heterogeneous Graph Learning Model for Cyber-Attack Detection Mingqi Lv, Chengyu Dong, Tieming Chen, Tiantian Zhu, Qijie Song, Yuan Fan Abstract A cyber-attack is a malicious attempt by experienced hackers to breach the target information system. Usually, the cyber-attacks are characterized as hybrid TTPs (Tactics, Techniques, and Procedures) and long-term adversarial be- haviors, making the traditional intrusion detection methods ineffective. Most existing cyber-attack detection systems are implemented based on manually designed rules by refer- ring to domain knowledge (e.g., threat models, threat intel- ligences). However, this process is lack of intelligence and generalization ability. Aiming at this limitation, this pa- per proposes an intelligent cyber-attack detection method based on provenance data. To effective and efﬁcient detect cyber-attacks from a huge number of system events in the provenance data, we ﬁrstly model the provenance data by a heterogeneous graph to capture the rich context informa- tion of each system entities (e.g., process, ﬁle, socket, etc.), and learns a semantic vector representation for each sys- tem entity. Then, we perform online cyber-attack detection by sampling a small and compact local graph from the het- erogeneous graph, and classifying the key system entities as malicious or benign. We conducted a series of experi- ments on two provenance datasets with real cyber-attacks. The experiment results show that the proposed method out- performs other learning based detection models, and has competitive performance against state-of-the-art rule based cyber-attack detection systems. 1. Introduction Nowadays, cyber-attacks are usually launched by expe- rienced hackers, and characterized as hybrid TTPs (Tactics, Techniques, and Procedures) and long-term adversarial be- haviors. Thus, it is very difﬁcult to detect them by utilizing traditional intrusion detection methods [1,2], which usually looks at short-term behaviors by ignoring the rich context information of the system. Aiming at this problem, we investigate the experiences of many existing researches and ﬁnd that provenance data are the best approach for the cyber-attack detection task [3–5] . Provenance data describe system entities (e.g., pro- cesses, ﬁles, sockets) and interactions between the system entities (the interactions are usually represented as system events, e.g., read, write, fork). First, provenance data can describe how system entities interact with each other and provide rich context information for each system entities [6]. Second, provenance data can connect causally-related events even when those events are separated by a long pe- riod of time [5]. Provenance data are usually collected by using OS audit logs (e.g., Linux Auditd [7], Windows ETW [8]). To carry out the cyber-attack detection task by utiliz- ing provenance data, most existing works model the prove- nance data as a directed acyclic graph (called a provenance graph), where the nodes represent system entities and the edges represent system events. Figure 1 shows an example of the provenance graph. Then, most existing studies (e.g., SLEUTH [9], HOLMES [10], CONAN [11]) try to detect cyber-attacks by manually designing a variety of rules based on threat knowledge (e.g., kill chain [12], ATT&CK [13]). Although the rule based detection strategies are efﬁcient and have achieved state-of-the-art performance, they still have the following limitations. First, the design of rules is an extremely difﬁcult task, since it requires expertized do- main knowledge of cyber-attack strategies, operation sys- tems, and computer network. Second, rules lack general- ization ability, since they are designed under speciﬁc macro environment (e.g., the cyber-attack strategies, the network environment). They easily become obsolete and have to be adjusted or even redesigned, when the macro environment changes. Third, rules are limited to human experiences and cannot handle complex and latent patterns. On the other hand, learning based techniques have long been applied for cyber security tasks such as intrusion de- tection [1, 2], malware detection [14, 15], and fraud detec- tion [16, 17]. As compared with the rule based techniques, learning based techniques have the following advantages. First, learning based techniques (especially deep learning techniques) could extract latent patterns and build detection model from the training dataset with less domain knowl- edge. Second, the detection model could adapt to new macro environment by retraining or ﬁne-tuning in an au- tomatic manner. Since provenance data are represented as provenance graphs, we exploit GNN (Graph Neural Net- work) [18] to build the cyber-attack detection model. How- 1 arXiv:2112.08986v1 [cs.CR] 16 Dec 2021 Figure 1. An example of provenance graph. ever, due to the complexity of cyber-attacks and system provenance, building cyber-attack detection model based on GNN is still a challenging task. First, provenance graphs generated from OS audit logs are complex. A provenance graph involves multiple types of nodes (e.g., processes, ﬁles, sockets) and multiple types of edges (e.g., read, write, and create). In addition, a node or an edge can be depicted by additional attributes (e.g., a ﬁle can be depicted by at- tributes such as source, ﬁle extension, and sensitive level). Second, the nodes and edges of provenance graphs are speciﬁc instances of system entities and system events, which make the detection model almost impossible to learn common patterns from these totally distinct instances. Third, cyber-attack detection is a speed sensitive task. However, most GNNs have high computation and space cost. In addition, since cyber-attacks are usually persistent, the provenance graphs continue to grow over time, making the GNN based methods inevitably suffer from efﬁciency and memory problems. Fourth, cyber-attacks are usually stealthy, so it is very difﬁcult to detect them by only looking at individual sys- tem entities (e.g., an attack activity might be accomplished by the collaboration of multiple processes and ﬁles). How- ever, it is also impractical to consider the whole provenance graph, which is usually too large and dominated by benign system entities. Fifth, the detection model has to continuously deal with new incoming system entities, while GNNs learn the repre- sentations of new system entities by embedding them with the existing nodes and edges in a shared space. However, it is infeasible to rerun the learning procedures whenever new system entities arrive due to the high computation complex- ity. Aiming at the above challenges, this paper proposes an intelligent cyber-attack detection system based on heteroge- neous provenance graph learning. For the ﬁrst and second challenges, we adopt a heterogeneous graph [19] to repre- sent the complex system entities and events in the prove- nance graph, and then uses meta-path based approach [20] to extract higher-level semantic interactions among the sys- tem entities. For the third challenge, we use graph embed- ding technique to learn a low-dimensional vector represen- tation for each node in the heterogeneous graph. Here, the graph embedding can be executed as a pre-training step, and the vector representations are then used to quickly initialize the detection model. For the fourth and ﬁfth challenges, we link new incoming system entities to the existing het- erogeneous graph and perform a local graph sampling to incorporate the new incoming system entities and the most related existing nodes into a small and compact local graph. Then, the detection model is built based on this local graph. In summary, the main contributions of this paper are as fol- lows. 1) We propose an intelligent cyber-attack detection sys- tem by leveraging GNNs. It can automatically learn pat- terns from the provenance data and use for cyber-attack de- tection without domain knowledge. 2) We propose a heterogeneous graph based approach to model provenance data and learn semantic vector represen- tations for various system entities. 3) We propose a local graph sampling based approach to perform cyber-attack detection upon new incoming sys- tem entities, which do not have pre-learnt vector represen- tations. 4) We conducted extensive experiments based on datasets collected by simulating a variety of cyber-attacks on real hosts. The experiment results show that our method outperforms existing machine learning based cyber-attack detection methods and can achieve competitive perfor- mance as compared with state-of-the-art rule-based cyber- attack detection systems built on in-depth domain knowl- edge. 2. Related Work As the mainstream of the existing cyber-attack detection systems, forensic analysis approaches aim to discover the attack events and attack paths based on predeﬁned rules. For example, PrioTracker [21] enables timely cyber-attack analysis by prioritizing the investigation of abnormal causal dependencies, in which the priority of a system event is measured by predeﬁned rules. SLEUTH [9] identiﬁes sys- tem entities and events that are most likely involved in cyber-attacks based on a tag-based approach. Speciﬁcally, it ﬁrstly designs tags to encode the trustworthiness and sen- sitivity of code and data, and then it designs rules for cyber- attack detection by leveraging these tags. HOLMES [10] is a hierarchical framework for cyber-attack detection. The key component of HOLMES is an intermediate layer that maps low-level audit data to suspicious behaviors based on rules from domain knowledge (e.g., ATT&CK model). CO- 2 NAN [11] is a state-based framework. Each system en- tity (i.e., process or ﬁle) is represented in an FSA (Finite State Automata) like structure, where the states are inferred through predeﬁned rules. Then, the sequences of states are used for cyber-attack detection and reconstruction. Thanks to the carefully designed rules, forensic analysis approaches could be effective, efﬁcient, and easy to deploy. However, designing effective rules heavily relies on in-depth inter- discipline domain knowledge, and the rules easily become obsolete if the macro environment changes. To address the limitations of forensic analysis ap- proaches, researchers tried to build cyber-attack detection model in an automatic way by leveraging learning based techniques (including machine learning and deep learning techniques). For example, Barre et al. [22] build a clas- siﬁer to detect cyber-attacks on top of a set of features (e.g., total quantity of data written, number of system ﬁles used) extracted from the provenance data. Berrada et al. [23] extract Boolean-valued features (called contexts) from the provenance graph, and treat cyber-attack detection as an anomaly detection task by using unsupervised learning technique. Xiang et al. [24] extract different features from two separated platforms (i.e., PC platforms and mobile plat- forms), and use several machine learning algorithms to de- tect cyber-attacks based on the combined features. Zimba et al. [25] identify hosts exhibiting suspicious malicious activ- ities through a semi-supervised learning framework, which extracts features based on a network clustering algorithm and trains the detection model by using both the labeled and unlabeled data. The above studies detect cyber-attacks based on traditional machine learning techniques, in which the core step is feature extraction. However, feature extrac- tion could be viewed as a simpliﬁed version of rule design, and it also relies heavily on domain knowledge. Recently, deep learning [26] has shown its superior ca- pability of discovering underlying features from big data in a totally automatic way. Thus, a few studies have tried to use deep learning techniques for cyber-attack detection. Since persistence is one of the most fundamental charac- teristic of cyber-attacks, the collected system events usu- ally span over a long period of time and can be repre- sented as a time series. Therefore, RNNs (Recurrent Neu- ral Networks) such as LSTM (Long Short-Term Memory) and GRU (Gated Recurrent Unit) are mostly applied deep learning models [27–29]. However, RNNs can only cap- ture the sequential relationships among system events, and ignore other important context information (e.g., different types of interactions among system entities). Aiming at this problem, Liu et al. [30] proposes log2vec, a cyber-attack detection model based on heterogeneous graph embedding. Speciﬁcally, it ﬁrstly converts log entries into a heteroge- neous graph based on a set of predeﬁned rules. Next, it represents each log entry as a low-dimensional vector us- Figure 2. An example of provenance graph. ing heterogeneous graph embedding technique. Finally, it separates malicious and benign log entries based on the log entry vectors. However, log2vec still has the following lim- itations. First, the heterogeneous graph is constructed based on predeﬁned rules, and thus log2vec still has a strong rely on domain knowledge. Second, log2vec works in an ofﬂine manner, and it has not considered the new incoming system entities. 3. Preliminary 3.1. Threat Model According to the threat models (e.g., kill chain model [12], ATT&CK model [13]), the attackers may conduct cyber-attacks through several stages and use a variety of techniques during each stage. Among these stages, previ- ous studies have found the following invariant parts of the cyber-attacks [11]. First, the attackers must deploy their code to victims. Second, the ﬁnal targets of cyber-attacks are stealing sensitive information or causing damage. Third, the attackers will communicate with C&C server. These invariant parts make possible the detection of new cyber- attacks, and the goal of our method is to detect attacks at any of the invariant stages. The provenance data (e.g., system events such as ﬁle operations and network access) can be collected from ker- nel level information by using OS audit modules (e.g., Au- ditd [7], ETW [8]), which have the advantages of high avail- ability, high credibility, and high stability. In this paper, we focus on analytic capabilities and assume the correctness of the kernel, the provenance data, and the analysis model. 3.2. System Architecture The architecture of our method is shown in Figure 2, consisting of the following three modules. 3 1) Provenance graph constructor: It continuously col- lects kernel level system events by using OS audit logs. Then, it arranges these collected system events as a prove- nance graph, which represents each system event by an edge in the provenance graph. 2) Heterogeneous graph learner: It transforms the prove- nance graph to a heterogeneous graph, which is compat- ible with the GNNs. Then, it learns a low-dimensional vector representation for each node (a.k.a. heterogeneous graph embedding), which can preserve the semantical and structural relations between various types of nodes. Speciﬁ- cally, the heterogeneous graph embedding task is performed based on a meta-path sampling strategy and a hierarchical attention based embedding technique. 3) Cyber-attack detector: For a new incoming system en- tity vn, it links vn to the existing heterogeneous graph and samples a local small graph by taking vn as the central node. Then, it treats the cyber-attack detection as a node classiﬁ- cation task. In order to discover causal and contextual rela- tionships between system entities by exploring larger graph neighborhoods, it adopts a graph convolutional network for this task. 4. Methodology In this section, we ﬁrst introduce the threat model and the overall architecture of our proposed APT detection sys- tem. We then discuss several important topics in its design, including data collection, data compaction, and APT detec- tion framework. 4.1. Heterogeneous Graph Construction First, the provenance data logged by OS audit modules are transformed into a provenance graph. As the example shown in Figure 1, the nodes represent speciﬁc instances of different types of system entities. For example, “mailman” is an instance of process and “/etc/shadow” is an instance of ﬁle. Second, we transform the provenance graph into a heterogeneous graph deﬁned as follows. Deﬁnition 1 (Heterogeneous graph). A heterogeneous graph, denoted as G = (V ,E), consists of a node set V rep- resenting the system entities and an edge set E representing the system events. A heterogeneous graph is also associ- ated with a node type mapping φ: V →A and an edge type mapping ψ: E →R. A and R denote the node type set and the edge type set, where |A| + |R| > 2. It indicates that a heterogeneous graph contains multiple types of system en- tities and multiple types of system events. The schema [19] of a heterogeneous graph G, denoted as TG = (A, R), is a meta-graph with nodes as node types from A and edges as edge types from R. Based on the deﬁnition, the heterogeneous graph is con- structed as follows. First, we deﬁne the schema of the het- erogeneous graph, i.e., the node type set and the edge type Figure 3. An illustration of the heterogeneous graph: (a) the schema of the heterogeneous graph; (b) an example of the neces- sity of the “common process” and “common ﬁle” attributes. set. For our case, we deﬁne seven major node types, i.e., process, ﬁle, socket, IPC, memory, network, and attribute, to represent system entities. The node type “attribute” is used to describe the features of “process” and “ﬁle”, and can be further categorized into six subtypes, i.e., common process, sensitive instruction, common ﬁle, network data, sensitive data, and uploaded data. Figure 3(a) shows these node types and their potential relations. Here, “sensitive in- struction” represents a process executes a sensitive instruc- tion, “network data” represents a ﬁle contains data from the network, “sensitive data” represents a ﬁle contains sensitive data, and “uploaded data” represents a ﬁle sent to a remote server. In addition, “common process” and “common ﬁle” are redundant attributes, which are used to prevent the het- erogeneous graph from being separated into many discon- nected small graphs. As the example shown in Figure 3(b), P1, P2, P3, P4, and P5 are common ﬁles, F1 and F2 are common ﬁles. Without “common process” and “common ﬁle” attributes (i.e., the dashed arrows in Figure 3(b)), these system entities would be separated into three disconnected small graphs (as shown by the dashed ovals), and thus the semantic relatedness between disconnected system entities (e.g., P1 and P3, F1 and F2) could not be learnt. This problem could be extremely serious in practice, since the vast majority of system entities are common and benign. Second, we deﬁne eight edge types, as summarized in Table 1. The edge types represent the relations between system entities (i.e., system events and entity attributes). The intrinsic and complex relations between system entities can provide crucial information for detecting cyber-attacks. Note that a pair of system entity types could have multiple types of relations. For example, a “process” and a “ﬁle” could have the relations such as “read”, “write”, “create”, etc. The main difference between the provenance graph and the heterogeneous graph is as follows. The provenance graph considers the speciﬁc instances of system entities, 4 which would make each node totally different and thus hamper the model from learning common patterns from the context of each node. On contrary, the heterogeneous graph uses generalized concepts to deﬁne each node. For exam- ple, all the ﬁle instances share the same node type “ﬁle”. 4.2. Heterogeneous Graph Embedding Due to the high persistence of cyber-attacks, the hetero- geneous graph could be extremely large. Hence, we should represent and encode the heterogeneous graph in a scalable way to make real-time detection possible. Based on the ex- isting studies, graph embedding is an efﬁcient and effective way to represent large-scale graphs [31], and thus we adopt heterogeneous graph embedding technique to represent the heterogeneous graph. We deﬁne heterogeneous graph em- bedding as follows. Deﬁnition 2 (Heterogeneous graph embedding). Given a heterogeneous graph G = (V , E), the embedding of G is to learn a function f: V →Rd that maps each node v ∈V to a d-dimensional vector (d ≪|V |). The low-dimensional vector space should be capable of preserv- ing the topological structure and semantic relations in G. Since heterogeneous graphs contain multiple types of nodes and edges, conventional homogeneous graph embed- ding techniques (e.g., DeepWalk [32], node2vec [33], LINE [34]) cannot be directly applied. To address this problem, meta-path was proposed to guide the random walkers to connect various types of nodes [20]. The random walks on a meta-path can generate a set of neighbors for each node, which can reveal diverse structural and semantic informa- tion in a heterogeneous graph. Here, we give the formal deﬁnition of meta-path as follows. Deﬁnition 3 (Meta-path). A meta-path is a path deﬁned in the schema of a heterogeneous graph, and is in the form of A1 →R1 →A2 →R2 →... →RL−1 →AL, where R = R1 ◦R2 ◦RL−1 deﬁnes a composite relations between node type A1 and AL. In practice, A1 and AL in a meta-path are usually of the same node type, so that the random walk ends on a meta-path could immediately starts on another one. Based on the schema of the heterogeneous graph, we deﬁne a variety of meta-paths to characterize the relatedness over different types of system entities from dif- ferent views, which are summarized in Table 2. For exam- ple, MP 4 means that two processes are related if they are connected to ﬁles with the same attribute, while MP 6 in- dicates that two processed are related if they perform the same operation on the network. After deﬁning all the meta- paths, we apply HGAT, a heterogeneous graph embedding technique based on hierarchical attention [35], to learn the d-dimensional vector for each node in the HPG. The advan- tage of HGAT over other heterogeneous graph embedding techniques (e.g., metapath2vec [20], metagraph2vec [36]) is that it is able to learn the importance of different neighbors and meta-paths for a speciﬁc node. This characteristic is es- pecially important for the cyber-attack detection task, since different system entities and behaviors usually have differ- ent sensitive and dangerous levels. We give an example to illustrate this phenomenon as follows. Example 1. Given two meta-paths MP 1 (process→ connect→network→connect−1 →process) and MP 2 (process→read →ﬁle→contain→sensitive data → contain−1 →ﬁle→read−1 →process), MP 1 represents the system behavior that the two processes connect to net- work, and MP 2 represents the two processes read sensitive data from ﬁles. Based on the experience in [11], stealing sensitive data from ﬁles is one of the most important rea- sons why the attackers launch a cyber-attack. Therefore, MP 2 plays a more important role than MP 1 for the cyber- attack detection task. Besides, when using MP 2, the entity type “sensitive data” should also be assigned a higher de- gree of importance than other entity types in MP 2 (e.g., “ﬁle”). Speciﬁcally, we apply HGAT for heterogeneous graph embedding in two steps. In the ﬁrst step, we generate se- quences of system entities with various types from the het- erogeneous graph by using the meta-paths to guide the ran- dom walker. Given a heterogeneous graph G = (V , E) and a set of meta-paths MPS, the random walker works as fol- lows. First, the random walker randomly chooses a meta- path MP i from MP S (in the form of A1 →R1 →... → At →Rt →At+1 →... →RL−1 →AL). Second, the random walker travels on the heterogeneous graph in accor- dance with MP i, and the transition probability from node vj to vj+1 at step j is deﬁned in Equation 1, where ϕ(vj) = At and Nt+1(vj) is the set of neighbors of node vj with en- tity type At+1. Finally, the random walker randomly picks another meta-path MP i+1 starting with AL, and repeats the transition process. p(vj+1|vj , MPi) =        1 |Nt+1(vj )| (vj , vj+1) ∈E, φ(vj+1) = At+1 0 (vj , vj+1) ∈E, φ(vj+1) ̸= At+1 0 (vj , vj+1) / ∈E (1) In the second step, we feed the generated system entity sequences to the HGAT model to learn the system entity embeddings. HGAT is a GNN based on a hierarchical at- tention structure (i.e., a node-level attention and a semantic- level attention) [35]. Speciﬁcally, for a given system entity vi and a meta-path MP j, the node-level attention learns the importance of each neighbor of vi in the generated system entity sequence from MP j, and aggregates these meaning- ful neighbors to form a candidate embedding of vi (denoted as zj i ). Then, the semantic-level attention learns the im- portance of different meta-paths for vi, and fuses all the candidate embeddings (i.e.,z1 i , z2 i , zMPS i ) to obtain the ﬁnal embedding of vi. Note that HGAT should be trained with a downstream task. Here, we utilize system entity classiﬁca- tion (i.e., classifying a “process” as benign or malicious) as the downstream task. 5 Table 1. A summary of the edge types. Pairs of system entity types ID System event type Description Process→Process R1 Process→op1→Process Here, “op1” can be “fork”, “execute”, “exit”, “clone”, or “change”. Process→File R2 Process→op2→File Here, “op2” can be “read”, “open”, “close”, “write”, “loadlib”, “create”, “unlink”, “modify”, “truncate”, “rename”, “mmap”, or “update”. Process→Network R3 Process→op3→Network Here, “op3” can be “connect”, “send”, “recv”, “read”, “close”, “accept”, or “write”. Process→Memory R4 Process→op4→Memory Here, “op4” can be “mprotect” or “mmap”. Process→IPC R5 Process→op5→IPC Here, “op5” can be “write”, “close”, “read”, or “mmap”. Process→Socket R6 Process→op6→Socket Here, “op6” can be “connect”, “send”, “recv”, “read”, “close”, “accept” or “write”. Process→Attribute R7 Process→contain→Attribute A process contains one of the following attributes, i.e., “common process” and “sensitive instruction”. File→Attribute R8 File→contain→Attribute A ﬁle contains one of the following attributes, i.e., “common ﬁle”, “network data”, “sensitive data”, and “uploaded data”. Table 2. A summary of the meta-paths. ID Meta-paths MP 1 Process→op1 →Process MP 2 Process→contain→Attribute→contain−1→Process MP 3 Process→op2→File→op2−1→Process MP 4 Process→op2→File→contain→Attribute→contain−1 →File→op2−1→Process MP 5 Process→op5→IPC→op5−1→Process MP 6 Process→op3→Network→op3−1→Process MP 7 Process→op4→Memory→op4−1→Process MP 8 Process→op6→Socket→op6−1→Process 4.3. Local Graph Sampling and Cyber-Attack De- tection After obtaining all the system entity embeddings, the simplest strategy of detecting cyber-attacks is to train a clas- siﬁer to classify each “process” as benign process or cyber- attack process, by directly taking the d-dimensional embed- ding vectors of system entities as features. However, this simple strategy has the following problems. First, cyber- attacks are usually stealthy, so it is very difﬁcult to detect them by only considering one system entity. Second, the cyber-attack detection system has to continuously deal with new incoming system entities, while it is infeasible to fre- quently rerun the heterogeneous graph embedding proce- dure. To address these problems, we propose a local graph sampling based detection strategy. Given a new incoming system entity vn and the system entities interact with vn (denoted as NVS), we ﬁrstly link each system entity in NVS to the existing heterogeneous graph (the combined graph is denoted as CG). Note that the entity type “attribute” can guarantee that every system entity will be linked to the ex- isting heterogeneous graph. Then, we sample a local graph from CG for NVS based on the k-order sub-graph sampling deﬁned as follows. Deﬁnition 4 (k-order sub-graph sampling). For a system entity vi, the k-order sub-graph sampling of vi on G = (V , E) (denoted as SG(vi, G)) is deﬁned in Equation 2. Based on the deﬁnition, every system entity can form a local graph based on the k-order sub-graph sampling. For a set of sys- tem entities VS, the k-order sub-graph sampling of VS on G = (V , E) (denoted as SG(V S, G)) is deﬁned in Equation 3. SG(k)(vi, G) = ( {vj|(vi, vj) ∈E} k = 1 {SG(1)(vz, G)|vz ∈SG(k−1)(vi, G)} k > 1 (2) SG(k)(V S, G) = [ vi∈V S SG(k)(vi, G) (3) The local graph could grow too large without constraint. For example, if the local graph contained an internal node vi with type “common ﬁle”, it would connect to too many nodes with type “ﬁle”. To prevent such situation, we put a threshold on the degree of nodes in the local graph. Speciﬁ- cally, we ﬁrstly categorized the seven major entity types into two groups, i.e., instantiable entity type (i.e., process and ﬁle) and conceptual entity type (i.e., socket, IPC, memory, network, and attribute). Obviously, the number of nodes with conceptual entity type is limited, and thus we only con- sider the number of nodes with instantiable entity type. For each node in the local graph, the number of its connected nodes with instantiable entity type should be no more than λ. Figure 4 shows an example of the local graph sampling strategy. The purpose of local graph sampling is twofold. First, rather than utilizing the information of only one sys- tem entity, we will aggregate the context information from all system entities in the local graph for cyber-attack detec- tion. Second, for a new incoming unknown system entity, we will infer its embedding based on the information trans- ferred from the neighbors in the local graph, with no need to rerun the heterogeneous graph embedding process. To achieve the above purposes, we perform cyber-attack detection as a classiﬁcation task for each node with type “process” in the local graph. Speciﬁcally, we apply R- GCN (Relational Graph Convolutional Network) [37] for the node classiﬁcation task. R-GCN is an extension of GCN 6 Figure 4. An example of the local graph sampling strategy. to relational graphs. It accumulates information from neigh- bors to a central node (denoted by vi) based on Equation 4, where h(l) i is the hidden state of node vi in the l-th R-GCN layer, N r i is the set of indices of neighbors of vi with edge type r, W (l) 0 and W (l) r are learnable parameters. Note that more R-GCN layers (i.e., a larger value of l) indicate the model can aggregate information from more remote nodes. h(l+1) i = X r∈R X j∈N r i 1 |N r i |W (l) r h(l) j + W (l) 0 h(l) i (4) R-GCN can be viewed as an encoder of the local graph. By stacking multiple R-GCN layers on the local graph, higher order of context information in the local graph could be learnt. Then, we simply add a softmax activation on the output hidden state of each node of the last layer by mini- mizing the cross-entropy loss on all labelled nodes to train the node classiﬁer. 5. Experiment 5.1. Experiment Setup 5.1.1 Dataset We evaluate our method using the following two different datasets with multiple types of cyber-attacks. Lab Dataset: We simulated cyber-attacks on a real host and collected datasets with ground truth for evaluation. The de- tails of this dataset are shown in the ﬁrst row of Table 3. The dataset was collected from Linux. The column “Du- ration” refers to the length of time that the collector was running on the target host, covering both normal activities (e.g., watching online videos, website browsing, document editing, etc.) and attack-related activities. The next several columns provide a breakdown of events into different types of operations. The column “#Attack” refers to the number of cyber-attack campaigns. Note that a cyber-attack cam- paign could involve a lot of malicious activities and mali- cious processes. There are mainly three types of cyber-attacks performed during the collection of this dataset. The ﬁrst type is “at- tack by webshell”, which uses webshell scripts to escalate and maintain persistent access to the target system by ex- ploiting web vulnerabilities. The second type is “attack by RAT (Remote Access Trojan)”, which implants Trojans to the target system through phishing attacks and then uses the Trojans to steal sensitive information. The third type is “at- tack by LotL (Living off the Land)”, which runs malicious shellcode directly in memory. Next, we used SPADE [38], a provenance graph con- struction toolkit, to convert the collected data into a prove- nance dataset in the form of provenance graphs. Finally, the dataset contains 19659 processes, 10073 ﬁles, and 2700912 system events. DARPA Dataset: This dataset was collected from three hosts installed Windows 10 during a cyber-attack program carried out by a read team as part of the DARPA Transparent Computing program. The details of this datasets are shown in the second row of Table 3. There are mainly three types of cyber-attacks performed during the collection of this dataset, i.e., sensitive informa- tion gathering and exﬁltration, in-memory attack by exploit- ing FireFox vulnerabilities, and malicious ﬁle downloading and execution. It can be seen that the strategies of cyber- attacks in the DARPA dataset are quite different from those in the Lab dataset. However, all these strategies contain one or more invariant stages (e.g., deploying malicious code, stealing sensitive information, communicating with C&C server). In addition, while the read team was attacking the tar- get host, benign background activities were also being per- formed on the host. In general, nearly 99.9% of the sys- tem events are related to benign activities. Finally, after the provenance graph construction and compaction, the dataset contains 53084 processes, 219706 ﬁles, and 26751468 sys- tem events. We conducted the experiments on a server with an Intel Xeon E5-2680 v4 CPU (with 14 × 2.4 GHz cores), 128GB of memory, and 4 × GTX 2080Ti GPUs running on Ubuntu 20.04. 5.1.2 Evaluation Strategy First, we introduce the two evaluation strategies used in our experiments as follows. 1) In-Sample: This evaluation strategy is used to evaluate the cyber-attack detection performance on the existing sys- tem entities. Speciﬁcally, it builds the heterogeneous graph 7 Table 3. The details of the datasets. Dataset Duration (hh:mm:ss) File read File write Process/Thread Network Others #Attack Lab Dataset 10:41:33 45.11% 18.41% 1.94% 14.47% 20.07% 34 DARPA Dataset 24:32:15 45.10% 27.78% 0.91% 9.04% 17.17% 7 on the whole dataset, which is then divided into training set and testing set. To maintain the original proportion of ma- licious / benign processes in both training and testing sets, we use stratiﬁed sampling to choose two-thirds of the pro- cesses with malicious label and two-thirds of the processes with benign label to generate the training set, and use the rest as testing set. 2) Out-Sample: This evaluation strategy is used to eval- uate the cyber-attack detection performance on new incom- ing processes. Speciﬁcally, it adopts stratiﬁed sampling to divide the whole dataset into training set (two-thirds of the processes) and testing set (one-third of the processes). The training set is used for heterogeneous graph construction, heterogeneous graph embedding, and cyber-attack detector training. The testing set is used as new incoming processes to evaluate the cyber-attack detector in an online way. Second, we use ACC, Precision, Recall, and Macro-F1 as the performance metrics. Here, ACC refers to accuracy. Precision and Recall are only calculated for detecting mali- cious samples. Note that Precision is inversely proportional to the false alarm rate. Macro-F1 is used with the consider- ation of the imbalanced malicious / benign samples. 5.1.3 Training Strategy The dataset is highly class imbalanced, i.e., the majority of training samples are benign processes. Thus, standard train- ing strategy tends to be overwhelmed by the benign samples and ignore the malicious ones. Aiming at this situation, we adopt a cost-sensitive version of the cross entropy loss func- tion. Speciﬁcally, we assign a weight δ to each sample, i.e., δ = 1 for each malicious sample and δ = 0.1 for each benign sample. 5.1.4 Parameter Settings There are three key parameters in our cyber-attack detection method, i.e., the dimension of the node embeddings d, the threshold of the node degree in the local graph λ, and the order of the sub-graph sampling k. Through several grid search experiments, we ﬁnally set d = 32, λ = 10, and k = 8. Figure 5. The evaluation of our method for classifying new incom- ing unknown processes: (a) the experiment results on Lab Dataset; (b) the experiment results on DARPA Dataset. 5.2. Ablation Experiment In the ﬁrst experiment, we try to evaluate the capability of our method for classifying new incoming unknown pro- cesses. Speciﬁcally, we compare the detection performance of our method under In-Sample and Out-Sample evalua- tion strategies. The experiment results are shown in Figure 5. Out-Sample has a lower Precision and almost the same Recall as compared with In-Sample, which means that the false alarm rate increases to a certain extent on unknown processes. This result is reasonable that the detection per- formance would be affected without a full view of the re- lations between the target process and other system enti- ties. However, Out-Sample has almost the same ACC and a slight lower Macro-F1 as compared with In-Sample. It demonstrates that our method could still guarantee a satis- ﬁed overall detection performance on unknown processes. In the second experiment, we try to verify the effective- ness of the local graph sampling component of our method. To be speciﬁc, we evaluate the detection performance and computation complexity of the following two variants. In this experiment, In-Sample evaluation strategy is utilized. 1) Whole-Graph: It treats the whole heterogeneous graph as the local graph. 2) Local-Graph: It samples the 8-order sub-graph as the local graph. The detection performance is shown in Figure 6. From the ﬁgure we can see that Whole-Graph outperforms Local- Graph to a slight degree. It implies that some cyber-attacks are very stealthy, i.e., they do not perform malicious activ- ities immediately after entering the system, but often con- ceal themselves for a long time and trigger the attacks by an alternative system entity. It would result in a long dis- 8 Table 4. The computation overhead of cyber-attack detection. Whole-Graph Local-Graph 50 nodes 500 nodes 5000 nodes 50000 nodes 90000 nodes Memory Usage 0.821GB 0.981GB 1.439GB 6.361GB 10.263GB 0.845GB Execution Time 0.1558s 0.1602s 0.1669s 0.6568s 2.1332s 0.1598s Figure 6. The evaluation of the local graph sampling component: (a) the experiment results on Lab Dataset; (b) the experiment re- sults on DARPA Dataset. tance between the malicious process and the manipulated system entity performing the malicious activities in the het- erogeneous graph. However, processing the whole hetero- geneous graph would lead to extremely high computation overhead, especially the memory usage. To verify this as- sumption, we test the memory usage and the execution time of cyber-attack detection on the whole heterogeneous graph. We simulate very large heterogeneous graphs by randomly inserting fake nodes and edges (each node has at most 100 edges). Table 4 shows the test results, where “Execution Time” includes the time for performing convolution opera- tion on the graph and classifying a single node. As shown in Table 4, as the number of nodes increases, the execu- tion time becomes slightly longer, but the memory usage exhibits a signiﬁcant growth. Note that the execution time and memory usage do not increase linearly, since there ex- ists common computation overhead for building and storing the heterogeneous graphs. In the third experiment, we try to verify the effectiveness of the heterogeneous graph em- bedding component of our method. Speciﬁcally, we test the detection performance of combinations of different meta- paths (i.e., MPC1 to MPC6 as follows) on the Lab Dataset. In this experiment, In-Sample evaluation strategy is utilized. 1) MPC1: It includes the meta-paths that only contain process and ﬁle (i.e., MP1 and MP3). 2) MPC2: It includes the meta-paths that only contain process, ﬁle, network, and socket (i.e., MP1, MP3, MP6, and MP8). 3) MPC3: It includes the meta-paths that only contain process, ﬁle, IPC, and memory (i.e., MP1, MP3, MP5, and MP7). 4) MPC4: It includes the meta-paths that only contain Table 5. The evaluation of different meta-path combinations. Precision Recall ACC Macro-F1 MPC1 0.8514 0.9916 0.9940 0.9565 MPC2 0.8902 0.9916 0.9957 0.9679 MPC3 0.8708 0.9958 0.9950 0.9633 MPC4 0.9046 1.0000 0.9965 0.9740 MPC5 0.8551 0.9958 0.9943 0.9586 MPC6 0.9252 0.9916 0.9971 0.9779 process, ﬁle, and ﬁle attribute (i.e., MP1, MP3, and MP4). 5) MPC5: It includes the meta-paths that only contain process, ﬁle, and process attribute (i.e., MP1, MP2, and MP3). 6) MPC6: It includes all meta-paths. The experiment results are shown in Table 5. First, MPC6 has the best overall detection performance. It demonstrates that all the meta-paths contribute to the cyber- attack detection task, which also implies that cyber-attacks are highly complex and it is impossible to detect all cyber- attacks by only considering certain types of system enti- ties and system events. Second, MPC4 and MPC5 outper- form MPC1. It shows that process and ﬁle attributes can provide richer information to improve the detection perfor- mance. Third, MPC4 outperforms all other methods, except for MPC6. It means that ﬁle attributes are the most impor- tant information for cyber-attack detection. This result is in consistent with the existing experience that stealing sen- sitive data from ﬁles or performing sensitive operations on ﬁles is one of the most important reasons for cyber-attacks [11]. Fourth, MPC2 outperforms MPC3 and MPC5. It im- plies that accessing the network is a more important char- acteristic of cyber-attacks than manipulating the processes and memory. 5.3. Comparison Experiment In the ﬁrst experiment, we evaluate the general detection performance of our method (abbreviated as OUR) by com- paring it with the following four baselines. All the baselines have considered the class imbalance problem and assign dif- ferent weights to samples (10:1 for malicious samples and 9 benign samples) during the training process. In this experi- ment, In-Sample evaluation strategy is utilized. 1) SVM: It refers to the process classiﬁcation model, which uses the vector space model to create the feature vec- tor (each entry represents the number of nodes of a certain type in the ﬁrst-order neighbors of the target process node in the heterogeneous graph) and the SVM as classiﬁer. 2) GAT: It refers to a homogeneous graph neural network [39]. Speciﬁcally, it ﬁrst constructs a homogeneous graph of the same topology with heterogeneous graph, but ignores the types of nodes, and then performs node embedding and classiﬁcation based on the GAT model. 3) HGAT: It refers to a heterogeneous graph neural net- work [35]. Speciﬁcally, it ﬁrst constructs the heterogeneous graph, and then performs node embedding and classiﬁcation based on the HGAT model, without the local graph sam- pling and the R-GCN steps. It can be viewed as a variant of our method by only looking at one process. 4) CONAN: It refers to a state-of-the-art rule based cyber-attack detection model [11]. It manually deﬁnes a large number of rules (called atomic suspicious indicators) from four aspects (i.e., code source, behavior, feature and network) to support the cyber-attack detection task. The experiment results are shown in Table 6. First, GAT is completely unable to detect cyber-attacks, because that GAT only considers the interactions between system enti- ties but ignores all the semantics (e.g., the type of system entities, the context of system events, etc.), which are es- sential for detecting malicious activities. Second, SVM also has a poor detection performance, because that SVM only considers the types of system entities adjacent to the tar- get process but ignores the downstream activities of these system entities. In practice, the attacker would always con- ceal themselves for a certain period of time before per- forming the malicious activities. Third, our method out- performs HGAT. It again shows that it is difﬁcult to detect cyber-attacks by only looking at one system entity. Fourth, CONAN has a slight advantage over our method on the Lab Dataset, while our method outperforms CONAN on the DARPA Dataset. CONAN is a rule-based cyber-attack detection system manually designed based on an in-depth analysis on the attack samples. Although the rules could perfectly adapt to the analysed attack samples, they cannot handle the changing patterns and thus exhibit a far lower performance in a different macro environment. On the other hand, our method is totally data-driven and does not rely on in-depth domain knowledge. It can be re-trained periodi- cally or when new attack samples are collected, to automat- ically adapt to the change of macro environment. Thus, our method has signiﬁcant advantage over CONAN on general- ization ability. In the second experiment, we focus on the detection per- formance on unknown processes by comparing our method Table 6. The comparison of different in-sample detection methods. Precision Recall ACC Macro-F1 Lab Dataset: SVM 1.0000 0.0457 0.9641 0.5041 GAT 0.0000 0.0000 0.9670 0.4916 HGAT 0.7102 0.1093 0.9663 0.5124 CONAN 0.9758 0.9981 0.9983 0.9915 OUR 0.9252 0.9916 0.9971 0.9779 DARPA Dataset: SVM 1.0000 0.1253 0.9237 0.5709 GAT 0.0000 0.0000 0.9715 0.4925 HGAT 1.0000 0.2491 0.9732 0.6932 CONAN 0.5895 1.0000 0.9759 0.8395 OUR 0.6667 1.0000 0.9820 0.8703 with the following two baselines. In this experiment, Out- Sample evaluation strategy is utilized. 1) NeighborAvg: It is a variant of our method. Specif- ically, a new incoming unknown process is linked to the existing heterogeneous graph and represented by averaging the embed-dings of its neighbors. 2) LabelProp: It is a variant of our method. Speciﬁcally, a new incoming unknown process is ﬁrst linked to the ex- isting heterogeneous graph, and then Label Propagation (a semi-supervised learning algorithm) [40] is used to propa- gate labels of the existing nodes to the unknown process. The experiment results are shown in Table 7. First, NeighborAvg has a poor detection performance. It is because that NeighborAvg only considers the ﬁrst-order neighbors and cannot adapt to the stealth of cyber-attacks, which would often result in a long distance between the ma- licious process and the system entity performing the ma- licious activities in the heterogeneous graph. Therefore, LabelProp has a far better performance than NeighborAvg, since it considers higher order correlations by propagating labels to a long distance. Second, our method outperforms LabelProp. It is because that LabelProp only transfers ma- licious labels without capturing the patterns of malicious activities. There are usually no malicious system entities in a certain range of the malicious process, especially only a local graph is sampled for detection. 5.3.1 Case Study In this section, we provide a real attack case to illustrate how our method works. Given the provenance graph of an attack scenario in Figure 1, where the diamonds represent network, the ovals represent processes, and the rectangles represents ﬁles. In this case, the attacker ﬁrst penetrates the 10 Table 7. The comparison of different out-sample detection meth- ods. Precision Recall ACC Macro-F1 Lab Dataset: NeighborAvg 0.9151 0.1416 0.9151 0.5634 LabelProp 0.9620 0.5067 0.9678 0.8234 OUR 0.8369 0.9958 0.9935 0.9530 DARPA Dataset: NeighborAvg 0.6679 0.1258 0.8839 0.5739 LabelProp 0.7500 0.3312 0.9350 0.6971 OUR 0.5300 1.0000 0.9924 0.8314 Apache server and leaves a backdoor. When the attacker triggers the backdoor, it creates a process (i.e., “Webshell”). Then, “Webshell” forks several processes to perform sensi- tive commands (e.g., “netstat” to check the detailed network information) and writes the collected information to a ﬁle (i.e., “mailer.log”). Finally, “Webshell” executes a process (i.e., “mailman”) to collect the sensitive information from “mailer.log” and another sensitive ﬁle (i.e., “shadow”), and send to a remote server. The heterogeneous graph transformed from Figure 1 is partially shown in Figure 7, where the rectangles with dashed border represent attributes. First, according to [11], the ﬁnal purpose of cyber-attacks is stealing sensitive infor- mation or causing damage, and thus they usually share some common features (e.g., performing sensitive instructions, reading sensitive ﬁles, etc.). These common features can be learnt by the meta-path based heterogeneous graph embed- ding. Second, there is usually a certain distance between the original malicious process and the system entities perform- ing the malicious activities (e.g., “Webshell” and “netstat”, “Webshell” and “reading from shadow”). Therefore, only looking at one system entity is unable to detect such kind of cyber-attacks, while our method can model a chain of sys- tem entities based on local graph sampling and convolution operations. For example, take “Webshell” as the process to be classiﬁed, if we sample a 3-order sub-graph from it as the local graph, the “Sensitive Instruction” feature can be prop- agated to it through convolution operations. If we sample a 4-order sub-graph from it as the local graph, the “Sensitive Data” feature can also be propagated to it. These features can potentially help the model to decide “Webshell”is a ma- licious process. 6. Conclusions and Future Work In this paper, we investigate the cyber-attack detection problem based on provenance data. We propose an intelli- gent cyber-attack detection system based on deep learning technique. Speciﬁcally, it adopts a heterogeneous prove- Figure 7. The heterogeneous graph of a real attack case. nance graph to model all system entities and events, and learns a low-dimensional vector to represent each system entity in a scalable way. Then, it reconstructs the attack scene by sampling a small sub-graph from the provenance graph and detects cyber-attacks on this sub-graph. Based on the above designs, our method could effectively de- tect cyber-attacks with the characteristics of persistence, stealth, and diversity. Through a series of experiments based on provenance datasets containing real cyber-attacks, we demonstrate that our method outperforms other current machine learning and deep learning based models, and has competitive performance as compared with state-of-the-art rule-based cyber-attack detection systems designed by ex- cessive domain knowledge. References [1] T. R. Glass-Vanderlan, MD Iannacone, M. S. Vincent, Qian, and R. A. Bridges. A survey of intrusion detection systems leveraging host data. 2018. 1 [2] Ankush Singla, Elisa Bertino, and Dinesh Verma. Prepar- ing network intrusion detection deep learning models with minimal data using adversarial domain adaptation. In ASIA CCS ’20: The 15th ACM Asia Conference on Computer and Communications Security, 2020. 1 [3] Xueyuan Han, Thomas Pasquier, and Margo Seltzer. Provenance-based intrusion detection: Opportunities and challenges. 2018. 1 [4] Graeme Jenkinson, Lucian Carata, Nikilesh Balakrishnan, Thomas Bytheway, and George Neville-Neil. Applying provenance in apt monitoring and analysis: Practical chal- lenges for scalable, efﬁcient and trustworthy distributed provenance. In 9th International Workshop on Theory and Practice of Provenance, 2017. 1 [5] X. Han, T. Pasquier, A. Bates, J. Mickens, and M. Seltzer. Unicorn: Runtime provenance-based detector for advanced persistent threats. 2020. 1 [6] Adam Bates, Dave Jing Tian, Kevin R B Butler, and Thomas M Moyer. Trustworthy whole-system provenance for the linux kernel. USENIX Association, 2015. 1 11 [7] LINUX Auditd. https://linoxide.com/auditd- tool-security-auditing/. 1, 3 [8] Windows ETW. https://docs.microsoft.com/ en-us/windows-hardware/drivers/devtest/ event-tracing-for-windows--etw-. 1, 3 [9] M. N. Hossain, Sadegh M. Milajerdi, J. Wang, B. Eshete, and V. N. Venkatakrishnan. Sleuth: Real-time attack scenario reconstruction from cots audit data. 2018. 1, 2 [10] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. N. Venkatakrishnan. Holmes: Real-time apt detection through correlation of suspicious information ﬂows. In 2019 IEEE Symposium on Security and Privacy (SP), 2019. 1, 2 [11] C. Xiong, T. Zhu, W. Dong, L. Ruan, R. Yang, Y. Chen, Y. Cheng, S. Cheng, and X. Chen. Conan: A practical real- time apt detection system with high accuracy and efﬁciency. IEEE Transactions on Dependable and Secure Computing, PP(99):1–1. 1, 3, 10, 11 [12] T. Yadav and A. M. Rao. Technical aspects of cyber kill chain. In Third International Symposium on Security in Com- puting and Communications (SSCC’15), 2015. 1, 3 [13] MITRE ATT&CK. https://attack.mitre.org/. 1, 3 [14] K. Paixao. A survey on malware detection using data mining techniques. Computing reviews, 58(12):742–742, 2017. 1 [15] Xiaohan Zhang, Yuan Zhang, Ming Zhong, Daizong Ding, and Min Yang. Enhancing state-of-the-art classiﬁers with api semantics to detect evolved android malware. In CCS ’20: 2020 ACM SIGSAC Conference on Computer and Commu- nications Security, 2020. 1 [16] H. Weng, Z. Li, S. Ji, C. Chu, H. Lu, T. Du, and Q. He. [ieee 2018 ieee 34th international conference on data engi- neering (icde) - paris, france (2018.4.16-2018.4.19)] 2018 ieee 34th international conference on data engineering (icde) - online e-commerce fraud: A large-scale detection and anal- ysis. pages 1435–1440, 2018. 1 [17] Bernardo Branco, Pedro Abreu, Ana Soﬁa Gomes, Mariana S. C. Almeida, and Pedro Bizarro. Interleaved sequence rnns for fraud detection. ACM, 2020. 1 [18] Z. Wu, S. Pan, F. Chen, G. Long, C. Zhang, and P. S. Yu. A comprehensive survey on graph neural networks. IEEE Transactions on Neural Networks and Learning Systems, 2019. 1 [19] J. Han. Mining heterogeneous information networks: Princi- ples and methodologies. Acm Sigkdd Explorations Newslet- ter. 2 [20] Yuxiao Dong, Nitesh V. Chawla, and Ananthram Swami. metapath2vec: Scalable representation learning for hetero- geneous networks. In the 23rd ACM SIGKDD International Conference, 2017. 2, 5 [21] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, and Prateek Mittal. Towards a timely causality analysis for enterprise security. In Network and Distributed System Security Sym- posium, 2018. 2 [22] Mathieu Barre, Ashish Gehani, and Vinod Yegneswaran. Mining data provenance to detect advanced persistent threats. In 11th International Workshop on Theory and Prac- tice of Provenance (TaPP 2019), 2019. 3 [23] Ghita Berrada, James Cheney, Sidahmed Benabderrahmane, William Maxwell, Himan Mookherjee, Alec Theriault, and Ryan Wright. A baseline for unsupervised advanced per- sistent threat detection in system-level provenance. Future Generation Computer Systems, 108:401–413, 2020. 3 [24] Zongyuan Xiang, Dong Guo, and Qiang Li. Detecting mo- bile advanced persistent threats based on large-scale dns logs. Computers & Security, 96:101933, 2020. 3 [25] Aaron Zimba, Hongsong Chen, Zhaoshun Wang, and Mumbi Chishimba. Modeling and detection of the multi-stages of advanced persistent threats attacks based on semi-supervised learning and complex networks characteristics. Future Gen- eration Computer Systems, 106:501–517, 2020. 3 [26] Yann LeCun, Yoshua Bengio, and Geoffrey Hinton. Deep learning. nature, 521(7553):436–444, 2015. 3 [27] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar. Deeplog: Anomaly detection and diagnosis from system logs through deep learning. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Se- curity, pages 1285–1298, 2017. 3 [28] Yun Shen, Enrico Mariconti, Pierre Antoine Vervier, and Gianluca Stringhini. Tiresias: Predicting security events through deep learning. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Se- curity, pages 592–605, 2018. 3 [29] Hope Nkiruka Eke, Andrei Petrovski, and Hatem Ahriz. The use of machine learning algorithms for detecting advanced persistent threats. In Proceedings of the 12th International Conference on Security of Information and Networks, pages 1–8, 2019. 3 [30] Fucheng Liu, Yu Wen, Dongxue Zhang, Xihe Jiang, Xinyu Xing, and Dan Meng. Log2vec: A heterogeneous graph em- bedding based approach for detecting cyber threats within enterprise. In Proceedings of the 2019 ACM SIGSAC Con- ference on Computer and Communications Security, pages 1777–1794, 2019. 3 [31] Jizhe Wang, Pipei Huang, Huan Zhao, Zhibo Zhang, Bin- qiang Zhao, and Dik Lun Lee. Billion-scale commodity em- bedding for e-commerce recommendation in alibaba. In Pro- ceedings of the 24th ACM SIGKDD International Confer- ence on Knowledge Discovery & Data Mining, pages 839– 848, 2018. 5 [32] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deep- walk: Online learning of social representations. In Pro- ceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 701–710, 2014. 5 [33] Aditya Grover and Jure Leskovec. node2vec: Scalable fea- ture learning for networks. In Proceedings of the 22nd ACM SIGKDD international conference on Knowledge discovery and data mining, pages 855–864, 2016. 5 [34] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei. Line: Large-scale information network embedding. In Proceedings of the 24th international confer- ence on world wide web, pages 1067–1077, 2015. 5 [35] Xiao Wang, Houye Ji, Chuan Shi, Bai Wang, Yanfang Ye, Peng Cui, and Philip S Yu. Heterogeneous graph attention 12 network. In The World Wide Web Conference, pages 2022– 2032, 2019. 5, 10 [36] Daokun Zhang, Jie Yin, Xingquan Zhu, and Chengqi Zhang. Metagraph2vec: Complex semantic path augmented hetero- geneous network embedding. In Paciﬁc-Asia conference on knowledge discovery and data mining, pages 196–208. Springer, 2018. 5 [37] Michael Schlichtkrull, Thomas N Kipf, Peter Bloem, Rianne Van Den Berg, Ivan Titov, and Max Welling. Modeling rela- tional data with graph convolutional networks. In European semantic web conference, pages 593–607. Springer, 2018. 6 [38] Ashish Gehani and Dawood Tariq. Spade: Support for provenance auditing in distributed environments. In ACM/IFIP/USENIX International Conference on Distributed Systems Platforms and Open Distributed Processing, pages 101–120. Springer, 2012. 7 [39] Petar Veliˇckovi´c, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua Bengio. Graph at- tention networks. arXiv preprint arXiv:1710.10903, 2017. 10 [40] Zhu Xiaojin and Ghahramani Zoubin. Learning from labeled and unlabeled data with label propagation. Tech. Rep., Tech- nical Report CMU-CALD-02–107, Carnegie Mellon Univer- sity, 2002. 10 13