An Overview of Cyber Security Funding for Open Source Software Jukka Ruohonena,∗, Gaurav Choudharyb, Adam Alamia aUniversity of Southern Denmark, Sønderborg, Denmark bTechnical University of Denmark, Copenhagen, Denmark Abstract Context: Many open source software (OSS) projects need more human resources for maintenance, improvements, and sometimes even their survival. This need allegedly applies even to vital OSS projects that can be seen as being a part of the world’s critical infrastructures. To address this resourcing problem, new funding instruments for OSS projects have been established in recent years. Objectives: The paper examines two such funding bodies for OSS and the projects they have funded. The focus of both funding bodies is on software security and cyber security in general. Methods: The methodology is based on qualitative thematic analysis. Results: Particularly OSS supply chains, network and cryptography libraries, programming languages, and operating systems and their low-level components have been funded and thus seen as critical in terms of cyber security by the two funding bodies. Conclusions: In addition to the qualitative results presented, the paper makes a contribution by connecting the research branches of critical infrastructure and sustainability of OSS projects. A further contribution is made by connecting the topic examined to recent cyber security regulations. Finally, an important argument is raised that neither cyber security nor sustainability alone can entirely explain the rationales behind the funding decisions made by the two bodies. Keywords: criticality, critical infrastructure, software security, funding, grants, tragedy of the commons, regulations 1. Introduction The paper presents a qualitative analysis of open source software projects funded through the Sovereign Tech Agency (STA) and a fund established by the Open Source Security Foundation (OpenSSF). The latter is tied to the larger Linux Foundation, while the former is operated and financed by the Germany’s central government. For the paper’s purposes, the STA is interesting be- cause it explicitly acknowledges that OSS is an important part of the world’s critical infrastructures. In other words, the Agency “invests in open digital infrastructure”, which refers to “foundational technologies that enable the cre- ation of other software”, and regarding criticality, people often do not “notice how much our lives depend on digital infrastructure until it stops working” (STA, 2024i). The OpenSSF’s funding instrument is based on a similar ra- tionale; it seeks to protect “society by catalyzing sustain- able security improvements to the most critical open source software projects” (OpenSSF, 2024a). Criticality is again one of the main keywords. To the best of the authors’ knowledge, the paper is the first to examine these two funding bodies and the OSS projects they have funded from a cyber security perspec- tive. In addition to the novelty of the paper’s topic, the pa- per contributes to two research branches. The first branch ∗Corresponding author. Email address: juk@mmmi.sdu.dk (Jukka Ruohonen) is the research on critical infrastructure. As will be argued in the opening Section 2, this branch has often overlooked software’s role in critical infrastructures. In particular, there appears to be very limited existing work on the re- lationship between OSS and critical infrastructures. The second research branch is about the survivability or sustainability of OSS projects (Alami et al., 2024; Avelino et al., 2019; Chengalur-Smith et al., 2010; Decan et al., 2020; Tulili et al., 2025). This branch has focused on a question of what makes open source software projects sur- vive over time. An example of a typical explanatory factor considered in the literature is a project’s ability to attract new developers. However, regarding software quality, in- cluding software security with it, human resources are not necessarily what matter the most; software’s growing size, complexity, and technical debt may matter more (Alami et al., 2024). Also financial resources may well matter for the security of open source software. To this and other ends, recent research has also started to examine funding of OSS projects. The paper con- tributes to this recent OSS funding research and its calls for further research and better engagement (Osborne, 2024; Kula and Treude, 2025; Sharma, 2023; Tsakpinis and Pretschner, 2025). In this regard, it should be em- phasized that the STA and OpenSSF are by no means the only funding bodies available for OSS projects today. In addition to so-called micro-donations and crowd-sourcing endeavors (Osborne et al., 2024; Tsakpinis and Pretschner, 2025), there are new funding initiatives for companies to Preprint submitted to Elsevier April 30, 2025 arXiv:2412.05887v2 [cs.CR] 29 Apr 2025 support open source software projects (FCF, 2025; OSTIF, 2025), philanthropic programs (CZI, 2025; NLnet Founda- tion, 2025), and funding bodies that align with civil lib- erties (OTF, 2025). Given the overall funding landscape, including with respect to scientific research (Braun, 1998; Cocos, 2020), these and other funding schemes for OSS projects are strategic in their nature; they focus on some particular problem areas. With respect to the STA and OpenSSF, the strategic problem area is cyber security in general and software security in particular. By implica- tion, the paper’s particular focus on the STA and OpenSSF also connects the survivability research branch with the critical infrastructure branch. Money and cyber security have an intrinsic relationship. In fact, an argument has often been raised that among the foremost reasons for the world’s cyber insecurity is a lack of incentives for companies, societies, and even individ- uals, including software engineers (Anderson and Moore, 2006; Halderman, 2010). This lack of incentives mani- fests itself in observations that security is not prioritized in the software industry because it is seen as a cost and not a feature (Ryan et al., 2023). Although techniques have been proposed to incentivize and prioritize software security (Weir et al., 2023), economic factors, such as cost- effectiveness and return-on-investment, have continued to hamper the adoption of new security solutions for soft- ware engineering (Ramaj et al., 2024). These obstacles are pronounced in the OSS domain already due to the so- called tragedy of the (digital) commons (Greco and Floridi, 2004; OpenSSF, 2024e). Although this classical tragedy is a contested concept (Frischmann et al., 2019), it serves to illustrate a common reasoning; because OSS is openly and publicly available, there is even a less incentive to financially invest in OSS and its security. This tragedy has been seen as a primary reason behind the new fund- ing initiatives (Sharma, 2023). The tragedy of the (digi- tal) commons further demonstrates that the fundamental issue is not only about the lack of incentives but actu- ally about misplaced incentives. Because some OSS com- ponents are nowadays used in practically all commercial software projects, including those addressing the world’s critical infrastructures, the misplaced incentive to not in- vest in the security of OSS manifests itself in the world’s overall cyber insecurity, including with respect to digital infrastructures that are vital to the functioning of societies. The paper’s remainder is structured into five sections. The opening Section 2 motivates the background in more detail with respect to the concept of critical infrastruc- ture and its relation to software. Given this elaboration, the subsequent Section 3 presents and motivates the re- search questions. Then, Section 4 elaborates the empirical material and the qualitative analysis techniques used to examine the material. Results are presented in Section 5. A concluding discussion is presented in the final Section 6. With these remaining five sections, the paper paves the way for further research on an emerging, relevant new re- search area, providing also a few insights relevant to prac- titioners, including OSS projects seeking funding, the two funding bodies’ staff, and policy-makers more generally. 2. Motivation There is a long-standing debate regarding the concept of infrastructure and what is recognized as critical (Eckhardt and Kotovskaia, 2023; Katina and Hester, 2013; Zebrowski and Sage, 2017). The jurisprudence of the European Union (EU) provides a good way to briefly illustrate typical def- initions and some associated problems. Thus, the EU’s now deprecated Directive 2008/114/EC defined critical in- frastructure as “an asset, system or part thereof ” that is located in any given member state and “which is essen- tial for the maintenance of vital societal functions, health, safety, security, economic or social well-being of people, and the disruption or destruction of which would have a significant impact”. Although this definition aligns with the classical concept of an asset, which is essential in tradi- tional information security, the societal focus enlarges the scope from mere information to broader assets with vital society-wide functions. In this regard, the definition aligns with theoretical con- ceptualizations to distinguish cyber security from infor- mation security (von Solms and van Niekerk, 2013). The definition is also essentially sectoral (Lehto, 2022). How- ever, the deprecated directive only considered the energy and transport sectors as critical infrastructure. To address this limitation and other problems, the new Directive (EU) 2022/2557 uses a similar definition but enumerates eleven sectors as potentially critical. Although a selection of criti- cal sectors is left to the member states, the eleven potential sectors highlight further conceptual expansion; among the potentially critical sectors are energy, transport, banking and finance, healthcare, water and food supplies, space technologies, and publication administration. In terms of information technology, many of the Internet’s core tech- nologies are also listed as potentially critical, including domain name system (DNS) providers, top-level domain name registries, cloud computing services and data cen- ters, and content delivery networks. The eleven critical sectors are identical to those specified in Directive (EU) 2022/2555, which is known as the NIS2 directive. These EU laws have received some criticism in that too many sectors might be covered, expertise might be lack- ing in some sectors, interoperability and compliance bur- den may become issues, fragmentation might occur be- cause of sectoral differences and the national adoptions by the member states, and sectors defined as non-critical might receive less resources and effort (Besiekierska, 2023; Ruohonen, 2024; Vandezande, 2024; Veigurs et al., 2024). A related critical point is that software has received only a limited explicit attention in the laws. Although the EU’s jurisprudence recognizes information technology as a dis- tinct critical infrastructure of its own, it is important to emphasize that also all of the other critical infrastructures noted are dependent on software. Neither banking nor a 2 central government can nowadays function without soft- ware. Nor are there space technologies without software. In fact, it can be argued that a new “software-defined” paradigm is emerging—or has already emerged, and this paradigm also amplifies security risks due to software’s insecurity and other problems (Wu, 2024). This point jus- tifies also the STA’s and OpenSSF’s overall rationales. The literature on critical infrastructure has tradition- ally touched software through its focus on industrial con- trol systems, supervisory control and data acquisition (SCADA) systems, and related technical solutions (Lehto, 2022). However, this framing is arguably too narrow be- cause also numerous non-specialized software components are underneath the world’s critical infrastructures. Software is also a good example on how different critical infrastructures are often interlinked to each other through dependencies (Katina and Hester, 2013; Rinaldi et al., 2001). In other words, two or more critical infrastruc- tures may be dependent on each other through a shared software component used in each infrastructure. Then, a single vulnerability in the shared software component may impact several critical infrastructures. Such vulnerabilities have supposedly started to increasingly affect also indus- trial control and SCADA systems because vendors of such systems have moved toward using commercial off-the-shelf (COTS) operating systems, software architectures, and network protocols (Alanazi et al., 2023; Igure et al., 2006). Although definite answers are difficult to give, many such COTS solutions are supposedly using also OSS compo- nents. The same point applies to the Internet’s critical in- frastructures; whether is operating systems, DNS, border gateway protocol (BGP), firewalls, email, or web servers and web browsers, open source software is either fully or partially used to power the infrastructures. 3. Research Questions The discussion in the previous section motivates the first research question (RQ): • RQ.1: What kind of OSS have the STA and OpenSSF funded and thus considered as critical? An answer to RQ.1 sheds important light on what kind of OSS is seen as critical by a government-backed agency and a not-for-profit OSS foundation in terms of cyber and software security. Indirectly, the question also aligns with existing work on how to identify critical infrastructures (Di Mauro et al., 2010; Katina and Hester, 2013). In this re- gard, it can be also remarked that the OpenSSF (2024e) has a specific working group trying to solve the issue of how to identify critical open source software projects. For the present purposes, an answer to RQ.1 can be reflected also from a broader perspective; if some particular type of OSS stands out, it may be that the EU’s existing legal frameworks have overlooked some important aspects when operating with the criticality concept. In this regard, a further EU law can be noted: Reg- ulation (EU) 2024/2847, which is commonly known as the Cyber Resilience Act (CRA). Unlike in the NIS2 di- rective, criticality in this regulation is not approached through sectors but through products (Eckhardt and Ko- tovskaia, 2023). It also specifies some new cyber security requirements for commercially supported OSS projects, in- cluding with respect to vulnerability disclosure and as- sociated coordination (Ruohonen and Timmers, 2024). Open source foundations, which often fund open source projects, are also mandated to develop policies for han- dling vulnerabilities and fostering secure software devel- opment. In addition, commercial vendors who integrate OSS into their products are mandated to notify the asso- ciated OSS projects about vulnerabilities they have dis- covered or been made aware of. Meeting the CRA’s essen- tial cyber security requirements, which have been recently analyzed (Ruohonen et al., 2025), in the commercial soft- ware industry necessitates dealing also with OSS because many—if not most—commercial software projects use at least some OSS components. For instance, among the es- sential requirements is an obligation to ship products with- out known vulnerabilities. This legal requirement applies also to all OSS components embedded to a product. While keeping in mind potential unintended conse- quences (Ruohonen, 2024; Ryan et al., 2023), these legal mandates can be seen to implicitly address the noted inter- linking aspect of critical infrastructures. The EU has also established new funding schemes to support the implemen- tation and adoption of the new cyber security laws in the public and private sectors (Ruohonen and Timmers, 2025; Veigurs et al., 2024). However, these funding instruments seem to exclude OSS projects; hence, an answer to RQ.1 can also help to understand the point about regulators and political decision-makers perhaps having overlooked important aspects related to critical infrastructures and their development, maintenance, and operation. Regarding grants and funding in general, the following research question is worth asking: • RQ.2: What have been the monetary amounts granted and the durations of the projects funded by the STA and OpenSSF? The money involved sheds light on the overall impor- tance of the two funding bodies for the OSS world in gen- eral. Regarding the funding durations, it has been sug- gested to separate short term (less than a year), medium term (from a year to three years), and long term (more than three years) funding from each other (Osborne et al., 2024). Against this backdrop, an answer to RQ.2 can po- tentially reveal insights on the cyber security issues in- volved in the OSS domain. If there have been a lot of short term funding but also some particular long term projects in this domain, it might be tentatively concluded that also the security challenges vary according to a context. The types of OSS projects funded and the money in- volved can reveal a lot but obviously not everything. 3 Particularly the wording in RQ.1 about criticality needs sharpening. By following existing guidelines regarding funding objectives (Osborne et al., 2024), the point about criticality motivates the subsequent research question: • RQ.3: What have been the rationales of the STA and OpenSSF for granting funding to OSS projects? The question can be motivated by the extensive re- search on choosing OSS components for a software project, whether commercial or open source. This research area is closely related to the survivability and sustainability as- pects noted in the introduction. The list of factors to consider is extensive already in terms of security alone. The examples include reported vulnerability counts for a component (Cox, 2019), the centrality of a component in a dependency network and the trust placed upon its main- tainers (Zimmermann et al., 2019), and even recommender systems using these and other factors for recommenda- tions (Nguyen et al., 2018). By and large, however, the existing research has operated with quantified metrics that can be easily extracted from OSS projects. To this end, an answer to RQ.3 addresses a notable limitation in ex- isting research because it may well be that a rationale for funding has only a little to do with the conventional, me- chanical metrics. This point entwines with previous obser- vations according to which developers mostly concentrate on functionality and not security when choosing OSS com- ponents and dependencies (Pashchenko et al., 2020). Here too the incentives noted in the introduction are visible. In any case, an answer to RQ.3 can also be beneficial to OSS projects and their developers in formulating competi- tive funding proposals. In this regard, RQ.3 further aligns with existing research on guidelines for writing grant appli- cations in the domain of software projects (Strasser et al., 2022). In addition to the types of software and the ra- tionales for funding decisions, it is relevant to know what kind of cyber security the funded projects have addressed: • RQ.4: What kind of cyber security the OSS projects funded by the STA and OpenSSF have addressed? An answer to RQ.4 sheds further light on how the fund- ing bodies have perceived criticality in terms of cyber se- curity. In addition, the answer helps to better understand what kind of cyber security bottlenecks there are in the OSS domain according to the two funding bodies. How- ever, it may well be that the real or perceived bottlenecks differ between the funding bodies. This point can be ex- tended and presented as the final research question: • RQ.5: Do the answers to RQ.1, RQ.2, RQ.3, and RQ.4 differ between the STA and OpenSSF? An answer to the final RQ.5 serves two functions. Al- though the paper follows a qualitative methodology, the first function is an overall validity check. The second func- tion is related to the strategic nature of the two funding bodies. If there are notable differences, it would seem rea- sonable to conclude that also the strategies of the fund- ing bodies may differ. In fact, it could be even argued that the strategies should differ because overlapping fund- ing could be interpreted to waste resources and highlight poor strategic foresight. On these notes, the materials and methods can be subsequently elaborated. 4. Materials and Methods The data is based on all funding cases that were available from the OpenSSF’s (2024a) and STA’s (2024i) websites during the start of the data collection on 27 November, 2024. The data includes all funding cases listed on the websites, including those without longer funding descrip- tions. In total, n = 24 and n = 44 funding cases are covered from the OpenSSF and STA, respectively. The paper’s qualitative methodology is based on the- matic analysis. Somewhat like topic modeling in quanti- tative research, this classical qualitative method seeks to find latent themes present in a corpus. An inductive logic was used for the identification of themes and their refine- ment. By following guidelines (Terry et al., 2017; Vais- moradi et al., 2013), the thematic analysis was carried out in five steps. The first step was about familiarizing with the qualitative data, meaning that the funding cases were read and reread, and initial notes were taken. Based on this familiarizing, the second step involved a generation of initial codes for the potential themes. Then, the third and fourth steps were about searching and identifying themes based on the codes generated, and then collating overlap- ping themes due to a goal of parsimonious answers to the five research questions specified. The fifth and final step involved defining and naming the final themes. Although the result are summarized with concise, code-like themes together with their occurring frequencies, the common pit- falls of mere categorization and plain quantification (Saun- ders et al., 2023) are addressed by illustrating the themes with further elaborations and contemplations relevant to further research. Regarding RQ.3 and RQ.4, three most important overall themes were identified for both research questions, pro- vided that sufficient information was available. While these are the three most important themes in general, there is no order of importance among the three themes themselves. This choice can be argued to be necessary be- cause many of the funding cases have addressed multiple distinct topical areas akin to work packages in scientific grant applications. It can be noted that thematic analysis is sometimes tri- angulated with other qualitative methodologies, including what is known as grounded theory. However, a step to- ward deductive reasoning with prior theoretical premises was omitted on the grounds that the existing OSS fund- ing research is too scant for developing sound theoret- ical building blocks. Though, regarding grounded the- ory, which essentially assumes that a theory can be found 4 from data—it is grounded there, the final Section 6 dis- cusses also theoretical implications of the qualitative re- sults reached. Grounded theory provides also means to further elaborate the coding process behind the thematic analysis: the initial identification of themes involved open coding, which resulted in many themes, which were then refined and reduced by the means of axial coding, and selective coding was finally used for collating and sharp- ening the themes from the axial coding (Stol et al., 2016; Williams and Moser, 2019). What separates the coding done from grounded theory is that no explicit theorization was done alongside the analysis and the themes were not taken as latent (cf. Terry et al., 2017). In addition to the procedural coding logic, it is important to emphasize that all the paper’s authors were involved in the analysis. It is also worth emphasizing that the coding was rather straightforward due to the relatively short descriptions provided for the funding decisions. In general, the STA tends to provide a little more information than the OpenSSF, but even that information typically only amounts to a few short paragraphs. Both funding bod- ies describe their decisions in unstructured formats. In addition to the slight variance between the funding bod- ies, there is a variance between individual funding deci- sions; some are described shortly, while others are elab- orated in detail. This variance justifies also the quali- tative approach because a quantitative approach might be biased due to the variance. The simplicity of the fi- nal, collated themes eased the coding and its robustness. For instance, it is rather trivial to determine whether a funded project is about operating systems (e.g., OpenSSF, 2024b), logging libraries (STA, 2024d), desktop environ- ments (STA, 2024c), or programming language ecosystems (e.g., OpenSSF, 2024c; STA, 2024b). As can be deduced from Fig. 1, most of the funding decisions and the themes for these do not require complicated reasoning. Figure 1: An Example of a Funding Decision (STA, 2024d) Thus, to further elaborate the collaborative side of the thematic analysis, the initial analysis was carried out by the paper’s first author. Then, the paper’s other col- laborating authors independently reviewed, case by case, the results from the initial analysis. They were given a chance to disagree and propose corrections, including the introduction of new themes. With respect to disagree- ments and diverging themes, the first author made the final decision about a theme by evaluating the reviews of the collaborating authors. Although inter-rater reliability measures were omitted, this collaborative process follows the recent suggestion to work sequentially in qualitative coding (D´ıaz et al., 2023). The collaborative approach is also known as researcher triangulation in qualitative re- search (Farquhar et al., 2020). Regarding inter-rater re- liability measures, the omission of these can be justified on the grounds that only the final themes are relevant and thus reported, the prior knowledge of the authors varied re- garding the subject matter, and the funding decisions were rather straightforward to interpret and categorize (cf. Mc- Donald et al. 2019; and more generally Terry et al. 2017 who argue against the measures altogether in qualitative research). Even though independent and blinded coding was not done, the collaborative approach can be argued to still improve the rigor and trustworthiness of the qualita- tive results. Though, with the earlier Fig. 1 in mind, only a few decisions prompted some initial disagreements. 5. Results The dissemination of the qualitative results can be started by noting that ten out of the 68 funding cases did not address cyber security. A good example of non- security funding would be a grant for the GNOME desktop environment (STA, 2024c). These cases are thus excluded from the answers given to RQ.4. Then, regarding RQ.1, a concise thematic summary is presented in Table 1 about the types of OSS funded by the two funding bodies. As can be seen, open source software supply chains, including package managers for installing, updating, and maintaining dependencies, have been the most frequently funded target. The result is not surprising because the security issues with OSS supply chains are well- recognized (Hamer et al., 2025; Ohm et al., 2020; Ruoho- nen and Saddiqa, 2025; Zimmermann et al., 2019). These issues affect large user and deployment bases, including in the commercial software industry due to the widespread use of OSS components and dependencies. Supply chain security and management are also more generally seen as being among the foremost difficult global issues in the increasingly globalized and digitalized world (Wu, 2024). Thus, it is no wonder that the STA and OpenSSF too have recognized their criticality. The security of OSS supply chains also aligns with the funding granted to programming language projects be- cause practically all major programming languages nowa- days have their own ecosystems for distributing packages. 5 Table 1: Types of OSS Funded Theme Frequency Supply chains and package managers 25 Network libraries 12 Programming languages 8 Operating systems and their components 6 Cryptographic libraries (PGP)1 4 Scientific computing 3 Multimedia libraries 3 Software testing frameworks 2 Logging libraries 2 Web servers 1 Web frameworks 1 Desktop environments 1 P 68 1 Pretty good privacy (PGPs). A further point is that the funding for improving OSS sup- ply chain security aligns with the noted CRA regulation. The reason is that particularly the OpenSSF has funded other open source software foundations that typically gov- ern the ecosystems and their supply chains. In the CRA these are known as “stewards”. Although only a lighter compliance burden is imposed upon them by the CRA, they are still mandated to improve particularly vulnera- bility disclosure and associated vulnerability coordination through establishing policies, promoting sharing of vulner- ability information, and collaborating with European mar- ket surveillance authorities. Thus, it can be argued that the funding from the STA and OpenSSF have patched a limitation in a sense that the EU’s own funding instru- ments have largely excluded the so-called stewards. Fur- ther research would be needed to deduce whether the CRA was strategically framed during the political negotiations with respect to this funding issue. In the meanwhile, it can be concluded that the cyber security funding for OSS projects aligns also with new regulatory demands. Network libraries and protocol implementations have also been frequently funded particularly by the STA. As could be expected, DNS and BGP implementations and their projects are among the funding recipients. Also other networking libraries and implementations crucial for the whole Internet are among the recipients, includ- ing those implementing the transport layer security (TLS) and secure shell (SSH) cryptographic protocols (OpenSSF, 2024d; STA, 2024f). It is worth mentioning also funding for a project implementing end-to-end encryption proto- cols as well as four separate funding decisions for projects implementing the pretty good privacy (PGP) cryptogra- phy protocol. Of the newer networking protocols related to security, WireGuard has also received funding. Finally, regarding the concept of criticality, it is under- standable that also operating systems and their low-level software components have received funding. An example would be FreeBSD (OpenSSF, 2024b), but the OpenSSF has also granted funding to the Linux kernel, which is closely associated with the OpenSSF’s parent organiza- tion, the Linux Foundation. Although the data is too limited for answering to the associated why-question, this observation is enough to remark that the OSS funding bodies—like many but not necessarily all funding bodies and financing instruments in general, may not be entirely immune to potential biases and conflicts of interests. A further point is that criticality as a concept seems to align with the STA’s (2024i) notion of foundational technolo- gies without which the Internet may function poorly and the creation of new software may become difficult. The fre- quent funding of OSS supply chains further aligns with the OpenSSF’s (2024e) emphasis of dependencies for defining criticality. However, there is also some room for criticism regarding the concept of criticality and its relation to the funding decisions. For instance, STA (2024g) has granted 450 thousand euros for a project seeking to improve doc- umentation about a JavaScript library. While documen- tation is important, it remains debatable how critical the library is with respect to the foundational technologies em- phasized by the STA. Turning to RQ.2, the monetary amounts granted are vi- sualized in Fig. 2. (It can be noted that at the time of writing the exchange rate between the EU’s euro and the United States dollar was almost even, and thus no con- version was needed.) The average is a little below four thousand euros, but there are a few outlying projects that have received over a million euros. Without prior work, it is rather difficult to contemplate how large or small these amounts are. Nevertheless, consider an imaginary example of a professional software engineer earning roughly around five thousand euros a month; then, the average funding amount would already account for about six full-time soft- ware engineers working with a project for a year. This ex- ample allows to argue that the funding amounts are decent enough in the OSS domain. Although the OpenSSF does not provide data on the funding durations, most (84%) of the STA’s funding decisions have been for two years. This observation further reinforces the point about the inter- pretation of the money involved. Euros Frequency 0 500000 1000000 1500000 0 5 10 15 Mean = 384690 euros Figure 2: Funding Amounts The types of cyber security funded (RQ.4) summarized in Table 2 expectedly align closely with the earlier the- matic summary in Table 1. In other words, supply chain security has been the most typical thematic cyber security area funded. In this regard, it is important to further note 6 Table 2: Types of Cyber Security Funded Theme Frequency STA OpenSSF Both Supply chain security1 16 17 33 Cryptography 9 0 9 Network security 8 0 8 Security testing 4 0 4 Memory safety 4 2 6 SBOMs 3 1 4 Maintenance 3 2 5 Audits and auditing 3 11 14 Security education 1 2 3 APIs2 1 0 1 P 52 35 87 1 Excluding software bills of materials (SBOMs). 2 Application programming interfaces (APIs). that some of the OSS projects funded have also addressed the design and implementation of so-called software bills of materials (SBOMs). These materials for keeping track of dependencies and other components are noteworthy for two reasons, the first being that SBOMs are also under ac- tive research in software engineering (Bi et al., 2024; Xia et al., 2023, among others). The second reason is that SBOMs too are present in the EU’s CRA, which man- dates commercial software vendors to implement SBOMs for their products and deliver these to market surveillance authorities upon request (Ruohonen and Timmers, 2024). Although OSS projects and their so-called stewards are ex- cluded from this regulatory requirement, the integration of OSS components into commercial software products might partially explain also the funding decisions for SBOMs by the STA and OpenSSF. Another partial explanation might be that also the funding bodies perceive SBOMs as im- portant for improving supply chain security and software security of OSS in general. Then, regarding RQ.5, already the summary in Table 2 is enough to conclude that there is a divergence between the funding bodies also with respect to the types of cy- ber security funded. In particular, the STA has funded also many projects addressing encryption and cryptogra- phy, network security, and security testing, whereas the OpenSSF has been particularly active in funding of se- curity audits, including those done by third parties. Au- dits and auditing are important to underline because these have involved also commercial cyber security companies doing the auditing. Thus, the money involved may some- times go to the private sector even though the goal of fund- ing remains the same. Furthermore, audits and auditing align with the goals of the CRA regulation. There are also some projects that have received fund- ing from both OSS funding bodies. The examples include FreeBSD and the Python Software Foundation, which is maintaining the popular and large repository for distribut- ing software packages written in Python. The data is again too limited for far-reaching speculations, but, nev- ertheless, an argument can be raised that the two fund- ing bodies might benefit from joint coordination. This point can be strengthened by noting that the data con- tains also some cases indicating joint ventures between different funds (OpenSSF, 2024d). Against this backdrop, it might be even reasonable to argue that the whole OSS funding landscape might benefit from a high-level coordi- nation body through which all funds could collaborate. Table 3: Funding Rationales Theme Frequency STA OpenSSF Both Cyber security 19 23 42 Sustainability 18 1 19 New features 14 3 17 Testing and bug fixing 13 11 24 Documentation and education 9 2 11 Performance 7 0 7 Interoperability 7 0 7 Rewrites 4 2 6 Infrastructure 4 0 4 Usability 3 0 3 Reliability 3 0 3 Auxiliary tools 3 0 3 Software engineering processes 1 13 14 Compliance and assurance 1 0 1 Accessibility 1 0 1 P 52 35 87 With respect to RQ.3, the funding rationale themes are summarized in Table 3. To put aside cyber secu- rity itself, which has sometimes been justified with ex- plicit mentions of critical infrastructure (STA, 2024b), also the sustainability theme is strongly present as a ra- tionale. Sustainability as a theme also aligns with the rather frequent rationales of software testing and plain old bug fixing. However, it is worthwhile to mention that some projects have approached the sustainability conun- drum through identifying and then deprecating compo- nents and dependencies that have reached their end-of- life software life cycle stages or became technologically risky (STA, 2024e,f). In a similar vein, the earlier point about technological debt is visible in the few projects that have approached sustainability problems through whole- sale rewrites and re-implementations. Such solutions are often interpreted as a sign of technical debt of the most se- vere kind (Verdecchia et al., 2021). However, the rewrites and re-implementations have not been only about techno- logical debt and sustainability in general. The reason is that some of these have involved also transformations to other programming languages; hence, the rewrites and re-implementations also align with the memory safety theme in the earlier Table 2. The Rust programming language is the prime example in this re- 7 gard. The language and its ecosystem have also received funding from both bodies. From the STA (2024h) the Rust project received funding for implementing SBOMs, while from the OpenSSF (2024c) it received funding for a myriad of security themes, including hiring a dedicated security engineer, audits, documentation, advocacy, and education, as well as new security tools and an establish- ment of a yet another grant program for mentoring and ed- ucation. The Rust project’s own grant program yet again highlights the potential benefits from better coordination. The OpenSSF’s (2024c) funding case also indicates that the funding applications and their evaluations might ben- efit from a more structured approach. For instance, like in large-scale scientific grant applications, it could be con- templated whether structuring the themes and rationales into work packages would bring more structure and co- herence. A further point is that the education, outreach, and documentation involved, and the accompanying over- all theme in Table 3, again frames the OSS funding topic also toward academia. In this regard, it could be argued that the security themes funded by the STA and OpenSSF are also something that should be taught in higher educa- tion. The Rust case also demonstrates that there might be a need in the nearby future to update curricula with respect to programming languages. Finally, it is important to emphasize that the funding ra- tionales have involved also implementing new features ex- plicitly or implicitly related to software security and cyber security in general. In addition, also many other general software engineering themes are present, including per- formance and scalability, interoperability, reliability, us- ability, and software engineering processes and practices. These rationales allow to end the qualitative exposition by arguing that the tragedy of the (digital) commons alone can neither explain nor elaborate the whole topic of OSS funding. Also, many other explanations are presumably present. The PPP aspect noted is among these explana- tions; the private sector also greatly benefits from OSS. Thus, further research is needed to better understand the business aspects behind OSS funding. Concepts such as so-called coopetition (Duc et al., 2017) might provide a theoretical path to follow in this regard. 6. Discussion 6.1. Conclusion and Contributions The paper presented a qualitative overview of cyber se- curity funding granted to various OSS projects through two important funding bodies. Both bodies fund OSS projects that are seen as being closely related to the world’s critical infrastructures. Among these software- defined infrastructures are OSS supply chains, core com- puter networking libraries, servers, operating systems and their low-level software components, and programming languages, among other things. The thematic cyber se- curity areas funded are closely related; supply chain secu- rity, cryptography, network security, memory safety, au- dits, and security education, among other things. Both funding bodies connect improvements at these areas to the sustainability problems faced by many OSS projects. However, cyber security and sustainability alone cannot fully explain the rationales for funding; therefore, neither is the tragedy of the (digital) commons sufficient as an over- all theoretical explanation. In addition to raising this im- portant argument, the paper made a notable contribution by linking together the research branches addressing the sustainability of OSS projects and critical infrastructure. Regarding the latter research branch, software’s role has often been downplayed to some extent, and the role of OSS has been almost nonexistent in existing research. A fur- ther contribution was made by elaborating how the OSS cyber security funding theme examined is related to regu- lations. Particularly the EU’s new CRA regulation is rel- evant also for open source software projects. Against this backdrop, the paper further contributed to recent efforts to better understand the EU’s new funding instruments (Ruohonen and Timmers, 2025). It seems that the two funding bodies examined have patched either intentional or unintentional omissions in more general public sector funding in Europe and likely also elsewhere. In a similar vein, also threat intelligence reports about supply chain security have missed the sustainability of OSS projects as a mitigative factor (Hamer et al., 2025). Finally, the paper contributed to the still nascent theorization and framing of funding for open source software projects. The point about theorization and framing deserves three additional brief remarks. The first remark is that the in- volvement of the private sector aligns the OSS funding topic toward so-called public-private partnerships (PPPs), which have been common in the cyber security domain in general (Ruohonen, 2020). Insofar as OSS is interpreted to be on the public side, which would seem a reason- able interpretation with respect to the concept of pub- lic goods underneath the tragedy of the commons, PPPs are particularly visible in the OpenSSF case because the associated fund was established by donations from large technology companies, among them Amazon, Google, and Microsoft (OpenSSF, 2023). The second remark follows: PPPs are typically also required for funding of large-scale applied scientific projects, including those funded by the EU’s Horizon Europe program. These two remarks logi- cally lead to the final remark: the OSS funding topic is also about the so-called technology transfer model, which has been endorsed and debated in software engineering research for a long time (Mikkonen et al., 2018; Wohlin et al., 2024, among many others). Regarding the trans- fers involved, however, scientific research and academia are missing. Given the Germany’s involvement behind the STA, the transfers are primarily between the public sector, the public (OSS) domain, and the private sector. Therefore, it could be contemplated whether adding aca- demic software engineering research to the mixture would improve the security of OSS even further, perhaps opening 8 also new collaborative avenues and further funding possi- bilities. This contemplation is reinforced by the educa- tional efforts done by some OSS projects with the help of funding from the two bodies. There are also some indica- tions in the data that some projects have already justified their funding applications with references to scientific re- search projects and the EU’s own software development projects (STA, 2024e). Thus, the earlier points about co- ordination can be extended toward a larger governance space, which, in Europe, involves also the cyber security regulations mentioned. 6.2. Further Work The concept of criticality is the keyword behind the funding decisions. However, as was discussed, it is not en- tirely clear how the two funding bodies have used the con- cept in decision-making about funding applications. For instance, the corresponding working group established by OpenSSF (2024e) has emphasized dependencies, popular- ity, and related concepts in determining a project’s crit- icality. However, dependencies and popularity may align poorly with the STA’s notions about open digital infras- tructures and foundational technologies. Consider DNS and BGP implementations as an example; they are clearly critical for the Internet’s functioning, but they may not be as popular as some other OSS projects with large user bases. Nor do they garner a large amount of dependencies. Thus, further research is required about the criticality con- cept and its practical use in funding decisions. In addition, an important point regarding further re- search is the evaluation of not only funding applications but the successes or failures of the projects funded. In this regard, OpenSSF (2023) has noted that their evaluation has been “largely anecdotal” and that further goals include “highlighting the success factors to future grant recipients and using them in our grant review process”. The STA’s (2024a) evaluation criteria for funding applications are a little more systematic; prevalence, relevance, sustainabil- ity, public interests, activities planned and their feasibility, and expertise of the applicants are evaluated. However, the Agency’s online materials do not say anything about whether funded OSS projects are evaluated post hoc af- ter their completions. The evaluation criteria and related points could be investigated in further research by means of interviews, focus groups, or even surveys, given the ap- parent proliferation of different funds for OSS projects. Different evaluation criteria have been considered and compared also in existing research (Osborne et al., 2024), but it remains unclear how applicable they are in practice. Science funding provides a good example. On one hand, learning from the funding of scientific projects might help with the goal of improving evaluations. Provided that the point about potential biases and conflicts of interests is true even to some extent, the learning might offer means to improve objectivity in reviewing because objectivity has traditionally been highly valued in science. For instance, it is unclear whether the STA and OpenSSF have used exter- nal reviewers, and whether such reviewers would be seen as preferable. On the other hand, it could be also argued that science funding might be a poor reference because it is often rather bureaucratic. That is, lengthy and rigorous applications as well as ex- tensive reporting and accounting might well conflict the values and practices endorsed by OSS communities. Anal- ogous conflicts have been reported also in existing research with respect to some OSS communities perceiving spon- sors’ and stakeholders’ interests and demands as being in a conflict with community values, norms, and project goals (Osborne, 2024). The STA and OpenSSF cases are also good examples in a sense that the overall sustain- ability theme aligns only poorly with the novelty theme usually strongly present in science funding. Furthermore, as has been debated for a long time (Herley and Van Oorschot, 2017), the other main theme, cyber and soft- ware security, is difficult to evaluate by empirical means. Regardless whether science funding should or should not be used for learning, it provides many themes for formu- lating relevant research questions. For instance, a classical result has been that winning grants increases the probabil- ity of winning more grants in the future (Bol et al., 2018; Mocanu et al., 2024). It would be interesting to know whether a similar effect applies in the OSS funding con- text. The STA’s (2024a) emphasis on expertise hints that a similar effect might be present at least to some extent. The question also correlates with the evaluation theme; it remains generally unclear what makes a competitive funding application in this context. Due to the varying domains of OSS and the numerous distinct funds, it also remains unclear whether the guidelines presented in exist- ing research (Strasser et al., 2022) generalize. A further question that needs addressing is related to the awareness among OSS communities about the new funding opportu- nities available. It may be that the STA’s and OpenSSF’s funding decisions have been biased not because of evalua- tions but because not all critical OSS projects have been aware of the funds. Finally, as was discussed and argued, it should be evaluated whether and how academic research might join to future funding applications. This final point can be also used to argue that the technology transfer model may need some altering, updating, and theorizing. References Alami, A., Pardo, R., and Lin˚aker, J. (2024). Free Open Source Communities Sustainability: Does It Make a Difference in Soft- ware Quality? Empirical Software Engineering, 29:1–40. Alanazi, M., Mahmood, A., and Chowdhury, M. J. M. (2023). SCADA Vulnerabilities and Attacks: A Review of the State-of- the-Art. Computers & Security, 125:103028. Anderson, R. and Moore, T. (2006). The Economics of Information Security. Science, 314(5799):610–613. Avelino, G., Constantinou, E., Valente, M. T., and Serebrenik, A. (2019). On the Abandonment and Survival of Open Source Projects: An Empirical Investigation. In Proceedings of the 9 ACM/IEEE International Symposium on Empirical Software En- gineering and Measurement (ESEM 2019), pages 1–12, Porto de Galinhas. IEEE. Besiekierska, A. (2023). Legal Assessment of the National Cybersecu- rity System in Poland in the Light of the New Developments in the NIS2 Directive. In Proceedings of the 46th MIPRO ICT and Elec- tronics Convention (MIPRO 2023), pages 1474–1477, Opatija. IEEE. Bi, T., Xia, B., Xing, Z., Lu, Q., and Zhu, L. (2024). On the Way to SBOMs: Investigating Design Issues and Solutions in Prac- tice. ACM Transactions on Software Engineering and Methodol- ogy, 33(6):1–25. Bol, T., de Vaanc, M., and van de Rijt, A. (2018). The Matthew Effect in Science Funding. PNAS, 115(19):4887–4890. Braun, D. (1998). The Role of Funding Agencies in the Cognitive Development of Science. Research Policy, 27:807–821. Chengalur-Smith, I., Sidorova, A., and Daniel, S. (2010). Sustainabil- ity of Free/Libre Open Source Projects: A Longitudinal Study. Journal of the Association for Information Systems, 11:657–683. Cocos, M. (2020). Policy Hybridization: Continuity and Change in Swedish Research Funding. Scandinavian Journal of Public Administration, 24(4):71–95. Cox, R. (2019). Surviving Software Dependencies: Software Reuse is Finally Here but Comes With Risks. ACM Queue, 17(2):24–47. CZI (2025). Essential Open Source Software for Science. The Chan Zuckerberg Initiative (CZI), available online in April 2025: https: //chanzuckerberg.com/eoss/. Decan, A., Constantinou, E., Mens, T., and Rocha, H. (2020). GAP: Forecasting Commit Activity in git Projects. Journal of Systems and Software, 165:110573. Di Mauro, C., Bouchon, S., Logtmeijer, C., Pride, R. D., Hartung, T., and Nordvik, J. P. (2010). A Structured Approach to Identi- fying European Critical Infrastructures. International Journal of Critical Infrastructure, 6(3):277–292. D´ıaz, J., P´erez, J., Gallardo, C., and ´Angel Gonz´lez-Prieto (2023). Applying Inter-Rater Reliability and Agreement in Collaborative Grounded Theory Studies in Software Engineering. Journal of Systems and Software, 195:111520. Duc, A. N., Cruzes, D. S., Hanssen, G. K., Snarby, T., and Abra- hamsson, P. (2017). Coopetition of Software Firms in Open Source Software Ecosystems. In Proceedings of the 8th International Con- ference on Software Business (ICSOB 2017), pages 146–160, Es- sen. Springer. Eckhardt, P. and Kotovskaia, A. (2023). The EUs Cybersecurity Framework: The Interplay Between the Cyber Resilience Act and the NIS 2 Directive. International Cybersecurity Law Review, 4:147–164. Farquhar, J., Michels, N., and Robson, J. (2020). Triangulation in Industrial Qualitative Case Study Research: Widening the Scope. Industrial Marketing Management, 87:160–170. FCF (2025). Overview. FOSS Contributor Fund (FCF). Avail- able online in April 2025: https://github.com/indeedeng/ FOSS-Contributor-Fund. Frischmann, B. M., Marciano, A., and Ramello, G. B. (2019). Ret- rospectives: Tragedy of the Commons After 50 Years. Journal of Economic Perspectives, (4):211–228. Greco, G. M. and Floridi, L. (2004). The Tragedy of the Digital Commons. Ethics and Information Technology, 6:73–81. Halderman, J. A. (2010). To Strengthen Security, Change Develop- ers’ Incentives. IEEE Security & Privacy, 8(2):79–82. Hamer, S., Bowen, J., Haque, M. N., Hines, R., Madden, C., and Williams, L. (2025). Closing the Chain: How to Reduce Your Risk of Being SolarWinds, Log4j, or XZ Utils. Archived manuscript, available online: https://arxiv.org/abs/2503.12192. Herley, C. and Van Oorschot, P. C. (2017). SoK: Science, Security and the Elusive Goal of Security as a Scientific Pursuit. In Proc- ceedings of the IEEE Symposium on Security and Privacy (S&P), pages 99–120, San Jose. IEEE. Igure, V. M., Laughter, S. A., and Williams, R. D. (2006). Security Issues in SCADA Networks. Computers & Security, 25:498–506. Katina, P. F. and Hester, P. T. (2013). Systemic Determination of Infrastructure Criticality. International Journal of Critical In- frastructure, 9(3):211–225. Kula, R. G. and Treude, C. (2025). Open Source at a Cross- roads: The Future of Licensing Driven by Monetization. Archived manuscript, available online in April 2025: https://arxiv.org/ abs/2503.02817. Lehto, M. (2022). Cyber-Attacks Against Critical Infrastructure. In Lehto, M. and Neittaanm¨aki, P., editors, Cyber Security: Critical Infrastructure Protection, pages 3–42. Springer, Cham. McDonald, N., Schoenebeck, S., and Forte, A. (2019). Reliability and Inter-Rater Reliability in Qualitative Research: Norms and Guidelines for CSCW and HCI Practice. Proceedings of the ACM on Human-Computer Interaction, CSCW(72):71:1 – 72:23. Mikkonen, T., M¨annist¨o, C. L. T., Oivo, M., and J¨arvinen, J. (2018). Continuous and Collaborative Technology Transfer: Software En- gineering Research with Real-Time Industry Impact. Information and Software Technology, 95:34–45. Mocanu, M., Rusu, V. D., and Bibiri, A. (2024). Competing for Research Funding: Key Elements Impacting the Evaluation of Grant Proposal. Heliyon, 10:e36015. Nguyen, P. T., Di Rocco, J., and Di Ruscio, D. (2018). Mining Soft- ware Repositories to Support OSS Developers: A Recommender Systems Approach. In Proceedings of the 9th Italian Information Retrieval Workshop (IIR 2018), pages 1–12, Rome. CEUR-WS. NLnet Foundation (2025). Welcome to NLnet Foundation. Available online in April 2025: https://nlnet.nl/. Ohm, M., Plate, H., Sykosch, A., and Meier, M. (2020). Backstab- ber’s Knife Collection: A Review of Open Source Software Sup- ply Chain Attacks. In Maurice, C., Bilge, L., Stringhini, G., and Neves, N., editors, Proceedings of the 17th International Confer- ence on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA 2020), Lecture Notes in Computer Science (Volume 12223), pages 23–43, Lisbon. Springer. OpenSSF (2023). Alpha-Omega 2023 Annual Report. The Open Source Security Foundation (OpenSSF), available online in November 2024: https://alpha-omega.dev/wp-content/ uploads/sites/22/2024/02/Alpha-Omega-Annual-Report-2023. pdf. OpenSSF (2024a). Alpha-Omega. The Open Source Security Foun- dation (OpenSSF), available online in November 2024: https: //alpha-omega.dev/. OpenSSF (2024b). Alpha-Omega Engagement: FreeBSD. The Open Source Security Foundation (OpenSSF), available online in November 2024: https://github.com/ossf/alpha-omega/tree/ main/alpha/engagements/2024/FreeBSD. OpenSSF (2024c). Alpha-Omega Engagement: Rust Foundation. The Open Source Security Foundation (OpenSSF), available on- line in November 2024: https://github.com/ossf/alpha-omega/ tree/main/alpha/engagements/2023/rust. OpenSSF (2024d). README (OpenSSL). The Open Source Security Foundation (OpenSSF), available online in Novem- ber 2024: https://github.com/ossf/alpha-omega/tree/main/ alpha/engagements/2023/OpenSSL. OpenSSF (2024e). WG Securing Critical Projects. The Open Source Security Foundation (OpenSSF), available online in November 2024: https://github.com/ossf/ wg-securing-critical-projects. Osborne, C. (2024). Open Source Software Developers’ Views on Public and Private Funding: A Case Study on scikit-learn. In Companion Publication of the 2024 Conference on Computer- Supported Cooperative Work and Social Computing (CSCW Com- panion 2024), pages 154–161. ACM, San Jose Costa Rica. Osborne, C., Sharratt, P., Foster, D., and Boehm, M. (2024). A Toolkit for Measuring the Impacts of Public Funding on Open Source Software Development. Archived manuscript, available on- line in November 2024: https://arxiv.org/abs/2411.06027. OSTIF (2025). Open Source Technology Improvement Fund: Se- curing Open Source for the World. Open Source Technology Im- provement Fund (OSTIF), available online in April 2025: https: //ostif.org/. OTF (2025). Supporting Internet Freedom Worldwide. Open Tech- nology Fund (OTF), available online in April 2025: https://www. 10 opentech.fund/. Pashchenko, I., Vu, D.-L., and Massacci, F. (2020). A Qualitative Study of Dependency Management and Its Security Implications. In Proceedings of the 2020 ACM SIGSAC Conference on Com- puter and Communications Security (CCS 2020), pages 1513– 1531, Virtual Event. ACM. Ramaj, X., S´anchez-Gord´on, M., Gkioulos, V., and Colomo-Palacios, R. (2024). On DevSecOps and Risk Management in Critical In- frastructures: Practitioners’ Insights on Needs and Goals. In Proceedings of the 2024 ACM/IEEE 4th International Workshop on Engineering and Cybersecurity of Critical Systems and 2024 IEEE/ACM Second International Workshop on Software Vulner- ability (EnCyCriS/SVM 2024), pages 45–52, Lisbon. ACM. Rinaldi, S. M., Peerenboom, J. P., and Kelly, T. K. (2001). Identify- ing, Understanding, and Analyzing Critical Infrastructure Inter- dependencies. IEEE Control Systems Magazine, 21(6):11–25. Ruohonen, J. (2020). An Acid Test for Europeanization: Public Cyber Security Procurement in the European Union. European Journal for Security Research, 5(2):349–377. Ruohonen, J. (2024). The Incoherency Risk in the EU’s New Cyber Security Policies. In van de Wetering, R., Roelens, R. H. B., Bagheri, S., Dwivedi, Y. K., Pappas, I. O., and M¨antym¨aki, M., editors, Proceedings of the 23rd IFIP Conference on e-Business, e-Services, and e-Society (I3E 2024), Lecture Notes in Computer Science (Volume 14907), pages 284–295, Heerlen. Springer. Ruohonen, J., Hjerppe, K., and Kang, E.-Y. (2025). A Mapping Analysis of Requirements Between the CRA and the GDPR. Archived manuscript, available online in April 2025: https: //arxiv.org/abs/2503.01816. Ruohonen, J. and Saddiqa, M. (2025). A Time Series Analy- sis of Malware Uploads to Programming Language Ecosystems. Archived manuscript, available online: https://arxiv.org/abs/ 2504.15695. Ruohonen, J. and Timmers, P. (2024). Vulnerability Coordination Under the Cyber Resilience Act. Archived manuscript, available online: https://arxiv.org/abs/2412.06261. Ruohonen, J. and Timmers, P. (2025). Early Perspectives on the Digital Europe Programme. Archived manuscript, available on- line: https://arxiv.org/abs/2501.03098. Ryan, I., Roedig, U., and Stol, K. (2023). Unhelpful Assumptions in Software Security Research. In Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security (CCS 2023), pages 3460–3474, Copenhagen. ACM. Saunders, C. H., Sierpe, A., von Plessen, C., Kennedy, A. M., Levi- ton, L. C., Bernstein, S. L., Goldwag, J., King, J. R., Marx, C. M., Pogue, J. A., Saunders, R. K., Van Citters, A., Yen, R. W., Elwyn, G., and Leyenaar, J. K. (2023). Practical Thematic Analysis: A Guide for Multidisciplinary Health Services Research Teams En- gaging in Qualitative Analysis. BMJ, 381:e074256. Sharma, C. (2023). Tragedy of the Digital Commons. North Carolina Law Review, 101:1129–1228. STA (2024a). Applying for Investment from the Sovereign Tech Fund. Sovereign Tech Agency (STA), available online in Novem- ber 2024: https://www.sovereign.tech/programs/fund. STA (2024b). Bundler & RubyGems (2022): Package Manage- ment for a Popular Programming Language. Sovereign Tech Agency (STA), available online in November 2024: https://www. sovereign.tech/tech/bundler-rubygems. STA (2024c). GNOME: Improving Accessibility, Tooling, and Security for the Linux Desktop Ecosystem. Sovereign Tech Agency (STA), available online in November 2024: https://www. sovereign.tech/tech/gnome. STA (2024d). Logback: Maintaining, Improving, and Securing a Java Logging Library. Sovereign Tech Agency (STA), available online in November 2024: https://www.sovereign.tech/programs/fund. STA (2024e). OpenJS Foundation: Improving Javascript Ecosystem Infrastructure and Security. Sovereign Tech Agency (STA), avail- able online in November 2024: https://www.sovereign.tech/ tech/openjs. STA (2024f). OpenSSH: Secure Connections for Administrators. Sovereign Tech Agency (STA), available online in November 2024: https://www.sovereign.tech/tech/openssh. STA (2024g). p5.js Documentation Organization & Accessibility. Sovereign Tech Agency (STA), available online in November 2024: https://www.sovereign.tech/tech/p5js. STA (2024h). Rusty SBOMs. Sovereign Tech Agency (STA), avail- able online in November 2024: https://www.sovereign.tech/ tech/rusty-sboms. STA (2024i). Strengthening Digital Infrastructure and Open Source Ecosystems in the Public Interest. Sovereign Tech Agency (STA), available online in November 2024: https://www.sovereign. tech/. Stol, K.-J., Ralph, P., and Fitzgerald, B. (2016). Grounded Theory in Software Engineering Research: A Critical Review and Guidelines. In Proceedings of the 38th International Conference on Software Engineering (ICSE 2016), pages 120–131, Austin. Texas. Strasser, C., Hertweck, K., Greenberg, J., Taraborelli, D., and Vu, E. (2022). Ten Simple Rules for Funding Scientific Open Source Software. PLoS Computational Biology, 18(11):e1010627. Terry, G., Hayfield, N., Clarke, V., and Braun, V. (2017). Thematic Analysis. In Willing, C. and Stainton-Rogers, W., editors, The SAGE Handbook of Qualitative Research in Psychology, pages 17–37. SAGE, London, second edition. Tsakpinis, A. and Pretschner, A. (2025). Analyzing the Usage of Do- nation Platforms for PyPI Libraries. Archived manuscript, avail- able online in April 2025: https://arxiv.org/abs/2503.08263. Tulili, T. R., Rastogi, A., and Capiluppi, A. (2025). Exploring Turnover, Retention and Growth in an OSS Ecosystem. In Pro- ceedings of the International Conference on Evaluation and As- sessment in Software Engineering (EASE 2025), pages 1–10, Is- tanbul. ACM. Vaismoradi, M., Turunen, H., and Bondas, T. (2013). Content Anal- ysis and Thematic Analysis: Implications for Conducting a Qual- itative Descriptive Study. Nursing and Health Sciences, 15:398– 405. Vandezande, N. (2024). Cybersecurity in the EU: How the NIS2- Directive Stacks Up Against Its Predecessor. Computer Law & Security Review, 52:105890. Veigurs, M., Lasmanis, T., and Romanovs, A. (2024). IT Governance in Critical Sectors: Towards the NIS2 Implementation. In Pro- ceedings of the IEEE 65th International Scientific Conference on Information Technology and Management Science of Riga Tech- nical University (ITMS 2024), pages 1–7, Riga. IEEE. Verdecchia, R., Kruchten, P., Lago, P., and Malavolta, I. (2021). Building and Evaluating a Theory of Architectural Technical Debt in Software-Intensive Systems. Journal of Systems and Software, 176:110925. von Solms, R. and van Niekerk, J. (2013). From Information Security to Cyber Security. Computers & Security, 38:97–102. Weir, C., Becker, I., and Blair, L. (2023). Incorporating Software Se- curity: Using Developer Workshops to Engage Product Managers. Empirical Software Engineering, 28:1–33. Williams, M. and Moser, T. (2019). The Art of Coding and Thematic Exploration in Qualitative Research. International Management Review, 15(1):45–55. Wohlin, C., Runeson, P., H¨ost, M., Ohlsson, M. C., Regnell, B., and Wessl´en, A. (2024). Experimentation in Software Engineering. Springer, Heidelberg, second edition. Wu, J. (2024). Cyber Resilience System Engineering Empowered by Endogenous Security and Safety. Science Press & Springer, Singapore. Xia, B., Bi, T., Xing, Z., Lu, Q., and Zhu, L. (2023). An Empirical Study on Software Bill of Materials: Where We Stand and the Road Ahead. In Proceedings of the IEEE/ACM 45th International Conference on Software Engineering (ICSE 2023), pages 2630– 2642, Melbourne. IEEE. Zebrowski, C. and Sage, D. (2017). Resilience and Critical Infras- tructure: Origins, Theories, and Critiques. In Dover, R., Dylan, H., and Goodman, M. S., editors, The Palgrave Handbook of Se- curity, Risk and Intelligence, pages 117–135. Palgrave Macmillan, London. Zimmermann, M., Staicu, C.-A., Tenny, C., and Pradel, M. (2019). Small World with High Risks: A Study of Security Threats in 11 the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995–1010, Santa Clara. USENIX. 12