The Critical Node Game* Gabriele Dragotto ID 1, Amine Boukhtouta ID 2, Andrea Lodi ID 3 and Mehdi Taobane ID 4 1Department of Operations Research and Financial Engineering, Center for Statistics and Machine Learning, Princeton University, U.S.A. 2Ericsson Canada Inc., Canada 3Jacobs Technion-Cornell Institute, Cornell Tech and Technion - IIT, U.S.A. 4CERC, Polytechnique Montr´eal, Canada April 17, 2024 Abstract In this work, we introduce a game-theoretic model that assesses the cyber-security risk of cloud networks and informs security experts on the optimal security strategies. Our approach combines game theory, combinatorial optimization, and cyber-security and aims to minimize the unexpected network disruptions caused by malicious cyber- attacks under uncertainty. Methodologically, we introduce the critical node game, a simultaneous and non-cooperative attacker-defender game where each player solves a combinatorial optimization problem parametrized in the variables of the other player. Each player simultaneously commits to a defensive (or attacking) strategy with limited knowledge about the choices of their adversary. We provide a realistic model for the critical node game and propose an algorithm to compute its stable solutions, i.e., its Nash equilibria. Practically, our approach enables security experts to assess the secu- rity posture of the cloud network and dynamically adapt the level of cyber-protection deployed on the network. We provide a detailed analysis of a real-world cloud network and demonstrate the efficacy of our approach through extensive computational tests. 1 Introduction Cloud networks are the backbone of the modern internet infrastructure, as they provide the resources, applications, and web services we use daily. In a cloud network, network operators provide ready-to-use resources (e.g., servers and virtual machines) to some end- users; for instance, Dropbox provides cloud storage, and Amazon Web Services provides virtual computing infrastructure. The network operators deploy their physical resources *Most of this work has been conducted while the first and third authors were members of the Canada Excellence Research Chair in “Data Science for Real-time Decision-making” at Polytechnique Montr´eal. The CERC support and that of Ericsson Canada Inc. are warmly acknowledged. 1 arXiv:2303.05961v2 [math.OC] 16 Apr 2024 (i.e., servers) in several points of presence (i.e., data centers), and they manage the net- work on behalf of their customers. Cloud networks provide businesses and individuals with flexible and scalable access to computing resources and data storage, making manag- ing and sharing information easier. However, because these networks rely on the Internet, remote servers, and third-party software, they are also vulnerable to cyber-attacks and expose organizations to greater external risks. In this work, we focus on responding to uncertain cyber-attacks, network intrusions performed by a malicious attacker whose strategy is uncertain (i.e., any node in a net- work can be subject to an attack). We introduce the Critical Node Game (CNG), a non- cooperative and simultaneous 2-player game between a defender (e.g., the network oper- ator) and a malicious attacker. The CNG falls into the family of integer programming games, a large class of simultaneous non-cooperative games with complete information where each player solves a parameterized (in their opponents’ variables) integer program [12, 28]. Our game-theoretic framework assesses cloud networks’ security posture (i.e., readiness to handle attacks) and provides network operators with an a priori security rec- ommendations. In the CNG, the decisions of each player are made by solving a Critical Node Problem (CNP) [29], i.e., the problem of deciding which nodes to remove (attack or defend) in a given graph (representing the network topology) under some budget con- straints. Each of the two players simultaneously and non-cooperatively decides their strat- egy by solving an integer program parameterized in the variables of the other player. While the defender decides which nodes to defend (e.g., which nodes to protect with an extra security level), the attacker decides which nodes to attack. Each player’s payoff (i.e., objec- tive function) is parameterized in their opponent’s moves and measures the effectiveness of the associated defensive or attacking strategy. On the one hand, the parameters of the defender’s optimization problems model the cloud network topology and implicitly model the importance of each node in the network. On the other hand, as the attack’s dynamics are uncertain, the parameters of the attacker’s optimization problem model the class of attacks that the defender deems reasonable for a potential attacker. In this sense, the uncertainty derives from the attacker optimization problem representing a range of possible attacks rather than a single attack or a prede- termined class of attacks. This approach is, in its motivation, close to the idea of robust optimization [7]: instead of considering a single attack, we consider the whole set of at- tacks that could happen, given some minimal knowledge about the attacker’s capabilities (e.g., the type of vulnerability exploited). We employ the Nash Equilibrium (NE) [31] as the standard solution concept for the CNG. Nash equilibria are stable solutions because no player can deviate without diminishing their payoff. Specifically, we aim to select the best NE, i.e., the NE that maximizes the defender’s payoff. In other words, we aim to select the strategy that benefits the defender the most while forcing the attacker to behave as the defender expects. Our Motivation. The cyber-security of cloud networks mainly relies on the so-called defense-in-depth approach, i.e., a security paradigm that combines a series of security mech- anisms with security best practices to protect the confidentiality, integrity, and availability of the network resources. The core intuition behind defense-in-depth is that a single secu- 2 rity mechanism is significantly less effective against cyber threats than a stack of multiple, diverse and redundant security mechanisms. This paradigm is implemented throughout cloud networks via several security tools that distribute the security responsibility be- tween the cloud network operators and the end-users. For instance, network operators often maintain network-level security, such as firewalls protecting the whole network and strict user privileges (e.g., the so-called trust policies). In contrast, end-users maintain application-level security, such as custom-tailored software protecting their applications. The ensemble of tools adapted by operators and users often produces a large amount of monitoring data that is generally fed to some intrusion detection system. Once this sys- tem detects a potential intrusion from a malicious attacker, it generally warns the network operators or puts the system under preventive mitigation (e.g., it increases firewall ag- gressiveness). On the one hand, the monitoring data helps the intrusion detection system to identify potential cyber-security threats and security gaps in the cloud infrastructure. On the other hand, however, the detection system is often unable to come up with secu- rity prescriptions that emerge from the monitoring data, and it often requires some input from the network operators [33]. This is precisely the core motivation behind this work: providing a mathematical framework that uses the monitoring data to quantitatively as- sess the potential risks associated with cyber-attacks, and dynamically adapt the level of cyber-protection deployed on the network. We represent this information cycle in Figure 1. Finally, we consider a one-shot game instead of a sequential or repeated game by implic- itly assuming that both defender and attacker are unaware of each others’ strategies. This structural assumption enables the defender to derive prescriptive insights on the defen- sive strategies with minimal temporal information (e.g., previous attacks) and, thus, more unpredictability on the attacker’s strategy (e.g., novel attack techniques). Network Operator Critical Node Game Monitoring Data Defender Problem Decisions Attacker Problem + Uncertainty Figure 1: The network operator collects monitoring data that feed the CNG model. The CNG provides the prescriptive cyber-security recommendations. Our Contribution. We summarize our contributions as follows: (i.) Motivated by the need to assess and react to cyberattacks in highly-complex cloud networks, we propose the CNG, a non-cooperative simultaneous 2-player game be- tween a defender and an attacker. Our model accounts for the uncertainty of the attack by modeling an attacker as an independent decision-maker interacting with the defender. We employ the monitoring data to model the class of attacks that are likely to happen instead of deterministically determining which one is more likely to happen. In this sense, our model requires almost no probabilistic assumption to work. In practice, our model enables the network operators to assess the potential 3 risks associated with cyber-attacks and allows the network operator to dynamically adapt the level of cyber protection deployed in the case of an attack. (ii.) We formulate the CNG as an integer programming game where each player solves a CNP formulated as a parametrized binary knapsack problem. We propose two metrics, the Price of Aggression (PoA) and Price of Security (PoS), to evaluate the effectiveness of the attacker’s and defender’s strategies and measure the efficiency of the resulting cyber-security policies. We then tailor the ZERO Regrets algorithm of Dragotto and Scatamacchia [19] to compute and optimize over the Nash equilibria of the CNG. (iii.) We provide an extensive set of computational tests on synthetic and real-world in- stances to demonstrate the capabilities of the CNG. Finally, we derive some informa- tive insights from the CNG equilibria and demonstrate how they can be practically employed to guide the countermeasures against cyber-attacks. Outline. We present a brief literature review in Section 2, while in Section 3, we intro- duce the mathematical formulation, the CNG, and the metrics to measure the effectiveness of the defending strategies. In Section 4, we introduce the cloud-based formulation for the CNG and briefly describe how to compute its equilibria. In Section 5, we present our experimental setup and the computational tests. Finally, we present our conclusions in Section 6. 2 Literature Review Critical Nodes in Networks. The idea of detecting the most critical nodes in a network dates back several decades. Ball et al. [5] studied the problem of removing the most vital arcs in a network to maximize the shortest path among pairs of nodes. Similarly, Bazgan et al. [6] studied the problem of finding the most vital node in a network to maximize the weight of an independent set. Assimakopoulos [3] applied a similar analysis to model an interdiction problem to control the spread of infectious diseases in hospitals. Similar ideas were pioneered by Cohen et al. [14], Tao et al. [37] in the context of epidemics and computer networks. Commander et al. [15] proposed an optimization problem to determine the optimal location of network jamming devices to maximize the network dis- ruption. Finbow and MacGillivray [21] studied the so-called firefighter problem, i.e., the problem of deciding which node to defend in a graph considering a temporal dynamic that spreads a virus or a fire over the nodes. Several authors investigated the problem of determining the critical node in more classic combinatorial optimization contexts, such as matching graphs, network flows graphs, and in general, in graphs with special struc- tures [1, 2, 8, 17, 25, 32, 34, 39–41]. We refer to Lalou et al. [29], Veremyev et al. [38], Zenklusen [40] (and the references therein) for a complete survey on the CNP. Our approach complements the previous literature by extending the CNP to a multi-agent non- cooperative setting, as opposed to a single-agent model, and by contextualizing the model in cloud networks cyber-security. 4 Interdiction Games. A different yet connected stream of literature considers so-called interdiction games. An interdiction game is a sequential game (e.g., a Stackelberg game) where the first-movers, or the players from the previous rounds, can restrain the next- round players from using some resources. Fischetti et al. [22], Tanınmıs¸ and Sinnl [36] proposed two algorithms to compute the solutions to knapsack interdiction games (i.e., interdiction games where players solve knapsack problems with interdiction constraints) and submodular interdiction games, respectively. Israeli and Wood [26] modeled an in- terdiction shortest path problem, where interdiction occurs on the edges. Recently, Baggio et al. [4] proposed a multi-level interdiction approach to the critical node problem, where a set of players sequentially plan infrastructure design over a graph: the approach involves a mathematical program with nested optimization problems and resembles the work of Brown et al. [10] in the context of critical infrastructures. [30] developed a general greedy heuristic for network defender-attacker-defender problems with knapsack constraints us- ing reinforcement learning and validated the approach on the game of [4]. Shen et al. [35] studied the properties of the optimization formulations associated with interdiction problems over undirected graphs. While the interdiction games literature often assumes players act in rounds, our work approaches the problem from a simultaneous perspective; specifically, we let the attacker and defender play simultaneously without knowing the op- ponents’ strategy. In this sense, our approach is closer to the realm of robust optimization [7] than to those of interdiction games. Furthermore, compared to [4, 10, 30], our CNG does not assume that the game is zero-sum, i.e., that the attacker’s payoff is the negative defender’s payoff. Game Theory and Cyber-security. Roy et al. [33] provided a detailed survey on game- theoretic models for cyber-security. The authors argue that game-theoretical frameworks for network security primarily possess two strengths. First, they can model complex strate- gic decision-making settings and compare several scenarios before deciding. Second, com- pared to most of the state-of-the-art heuristic approaches, game theory models are quan- titative and exact methods. Chen and Leneutre [13], He et al. [24] modeled a similar attacker-defender game to derive insights into the defender’s strategy and the resources needed to defend. However, in contrast with those approaches, (i.) we formulate a prob- lem starting from a graph, thus incorporating the structure of the network inside our model, (ii.) we explicitly represent each player’s problem as an optimization problem, in the spirit of [18], and (iii.) we compute and select a specific NE. Finally, Goyal and Vigier [23] and Dziubi´nski and Goyal [20] develop a sequential (e.g., Stackelberg) model that shares a similar payoff structure with our CNG, and provide several structural results connecting the graph topology and the defensive strategies. In contrast to our model, the previous works assume a sequential structure where the network designer plays first, and the attacker follows, whereas we assume players act simultaneously. In game-theoretic terms, this implies that the defender (and the attacker) is unaware of the realization of their opponent’s strategy, thus inducing a different information set for each player. The models in [20, 23] are also closely related to the multi-level plan-attack-defend frame- work of Baggio et al. [4]. However, the latter considers an interdictive setting. 5 3 Mathematical Formulation Let G = (V, E) be an undirected graph representing the cloud network topology, where the resources V (e.g., routers, servers, cloud instances) are linked through some connections E. Each edge e ∈E is made of a pair of nodes i, j ∈V so that (i, j) is a connection between the two resources i and j. In Definition 3.1, we give an abstract definition of the CNP. Definition 3.1 (Critical Node Problem). Given a graph G = (V, E) and k ∈N, the CNP is the problem of removing a subset of nodes S ⊆V with |S| < k so that G = (V \S, E) minimizes a function of the connectivity of G. In other words, the CNP asks to detect the most critical k nodes of G with respect to a given connectivity function. This function can be, for instance, the number of pairwise connected nodes or the number of connected components in G (see [38] for a detailed re- view of families of functions). Similarly, when G represents a cloud network, the problem equivalently asks to determine the k most critical devices in the network so that removing them, i.e., removing S ⊆V , maximizes the service disruption (i.e., the number of un- available resources) on G. The CNP possesses an intuitive formulation as a combinatorial optimization problem, and it is often solved as an equivalent integer program. We focus on a CNP formulated as a knapsack problem, and we take a dual interpre- tation, where the selection of the critical nodes is a way of protecting the network, i.e., maximizing the network’s available connectivity (in case of an attack). Let xi be a variable associated with each node i ∈V , and let xi = 1 if and only if i is protected. The subset S is then the set {i ∈V : xi = 1}. Assuming that a function f(x) measures the connectivity of S induced by x, the CNP corresponds to the problem max x n f(x) : w⊤x ≤W, x ∈{0, 1}|V |o , (1) where w ∈R|V | + and W ∈R+ are the parameters of the weighted knapsack constraint. Whenever w is a vector of ones, the constraint becomes a knapsack constraint asking to remove at most ⌊W⌋nodes from G. 3.1 The Critical Node Game While the CNP models a wide range of applications from interdiction to network resilience, it only encompasses a single decision-maker. Therefore, we extend the CNP of (1) into the CNG by introducing two different decision-makers: the defender, who controls the variables x, and the attacker, who controls the variables α. Similarly to the CNP, we assume that for any i ∈V , xi = 1 if and only if the defender protects node i, and αi = 1 if and only if the attacker attacks node i. Definition 3.2 (Critical Node Game). Given a graph G, the CNG is a 2-player simultaneous and non-cooperative game with complete information where the first player (the defender) solves max x n f d(x; α) : d⊤x ≤D, x ∈{0, 1}|V |o , (2) 6 and the second player (the attacker) solves max α n f a(α; x) : a⊤α ≤A, α ∈{0, 1}|V |o , (3) where d ∈R|V | + , a ∈R|V | + , D ∈R+, A ∈R+. Remark 3.1. In Definition 3.2, we implicitly assume that the defender maximizes a function f d of x parameterized in α that represents the network’s connectivity (or the operativeness) G. Symmetrically, the attacker maximizes a function f a of α parameterized in x that represents the network disruption on G. Furthermore, the weights a and d represent the resources the player spends for selecting (i.e., defending or attacking) the nodes, while A and D represent the players’ resources budgets. When we say the game is simultaneous, we mean that the players chose their strategy (i.e., solve their optimization problems) simultaneously without knowing the other players’ strategies. When we say the game has complete information, we mean that both players are aware of the optimization problems, i.e., they are both aware1 of f a, f d, G, a, d, A, and D. We define any feasible x (resp. α) as a strategy for the defender (resp. attacker). We call any tuple (x, α) a strategy profile for the game, and f d (resp. f a) evaluated at (x, α) the defender’s (resp. attacker’s) payoff under (x, α). We consider the NE as the standard solution concept. In plain English, a strategy profile (¯x, ¯α) is a NE if no player can unilaterally deviate from their strategy without decreasing their payoff. We formalize this concept in Definition 3.3. Definition 3.3 (Nash Equilibrium). A profile (¯x, ¯α) is a NE if (i.) f d(¯x; ¯α) ≥f d(˜x; ¯α) for any ˜x ∈{x ∈{0, 1}|V | : d⊤x ≤D}, and (ii.) f a(¯α; ¯x) ≥f a(˜α; ¯x) for any ˜α ∈{α ∈{0, 1}|V | : a⊤α ≤A}. We focus on deterministic, or pure, NE; namely, we assume the players select strategies that are feasible for their constraints instead of selecting convex combinations of feasible strategies. Pure NEs may not exist for finite games such as the CNG, namely, for games with a finite number of players and a finite number of strategies; indeed, the problem of determining if an NE exists in integer programming games is Σp 2-complete [11, 19], i.e., as long as NP ̸= Σp 2 the decision problem cannot be represented as an integer program of polynomial size. We refer to Carvalho et al. [12] for a review of the topic. Whenever a NE does not exist, we rely on the relaxed concept of approximate NE that we formalize in Definition 3.4. Definition 3.4 (Approximate NE). Given Φ ∈R+, a strategy profile (¯x, ¯α) is a (pure) ap- proximate Φ−NE if (i.) f d(¯x, ¯α) + Φ ≥f d(˜x, ¯α) for any ˜x ∈{x ∈{0, 1}|V | : d⊤x ≤D}, and (ii.) f a(¯α; ¯x) + Φ ≥f a(˜α; ¯x) for any ˜α ∈{α ∈{0, 1}|V | : a⊤α ≤A}. In a Φ−NE, the constant Φ ∈R+ represents an upper bound on the deviations that the players’ payoff can have. Whenever Φ = 0, the Φ−NE is also an exact NE. 1How realistic is the assumption of awareness is discussed in Section 4. 7 3.2 Prices Whenever multiple equilibria exist, their properties (e.g., the players’ payoffs under the equilibria) may differ; this is precisely why we aim to select the equilibria exhibiting some desired properties. Specifically, we aim to select the NE that maximizes the defender’s payoff and the NE that maximizes the attacker’s payoff. If different, these two NEs will practically provide the best “stable” outcome – in terms of aggressive or defensive strategy – for the attacker or the defender, respectively. This information can guide the design of extra layers of security mechanisms and help provide real-time prescriptive strategies to defend critical infrastructure. In this section, we formalize these intuitions with the concepts of PoS and PoA. Definition 3.5 (Joint Outcomes Space). The joint outcomes space for the CNG is the set J =  (x, α) : d⊤x ≤D, a⊤α ≤A, α ∈{0, 1}|V |, x ∈{0, 1}|V |}. (4) The set J contains all the outcomes of the CNG, namely, all the feasible strategy profiles that players can play. If we optimize a real-valued function g(x, α) : {0, 1}|V |2 →R over J , we obtain the strategy profile (¯x, ¯α) that maximizes g. There is no guarantee that the profile (¯x, ¯α) is a NE. Nevertheless, comparing (¯x, ¯α) with the NEs maximizing g enables us to practically evaluate the loss in performance due to the equilibrium conditions. In other words, it enables us to evaluate how much the stability conditions of equilibria degrade the value of g. This approach, similar to the worst-case analysis for algorithms, was pioneered by Koutsoupias and Papadimitriou [27]. The authors focused on g being the so-called social welfare, namely, the sum of the player’s payoff; they introduced the Price of Stability, i.e., the ratio between the social welfare of the best possible outcome and the social welfare of the best-possible NE. With a similar spirit to [27], we introduce a metric for the CNG called the PoS in Definition 3.6. For a given Φ, let N(Φ) ⊆J be the set of Φ-NE for the CNG. Definition 3.6 (Price of Security). Given a CNG instance and Φ ∈R+, let (ˆx, ˆα) = arg maxx,α{f d(x, α) : (x, α) ∈N(Φ)}, i.e., the NE maximizing f d(x, α); let (¯x, ¯α) = arg maxx,α{f d(x, α) : (x, α) ∈J }, i.e., the strategy profile maximizing f d(x, α). Whenever |N(Φ)| > 0, the PoS is the ratio f d(¯x, ¯α)/f d(ˆx, ˆα). The PoS is lower bounded by 1 and, from a theoretical perspective, has no upper bound. A PoS of 1 suggests that the defender, in the best-possible NE that maximizes their payoff, is not diminishing their payoff by defending their resources; hence, it suggests that the defensive strategy is highly efficient. A PoS strictly greater than 1 suggests a loss in the defender’s payoff caused by the NE conditions. In this sense, a larger PoS indicates that the defender is paying a higher cost for defending their resources. We remark that in this case, f d(x, α) is a real-valued function in x and α and not a function parametrized in α. Symmetrically to the PoS, we introduce the PoA in Definition 3.7. Definition 3.7 (Price of Aggression). Given a CNG instance and Φ ∈ R+, let (ˆx, ˆα) = arg maxx,α{f a(α, x) : (x, α) ∈N(Φ)}, i.e., the NE maximizing f a(α, x); let (¯x, ¯α) = arg maxx,α{f a(α, x) : (x, α) ∈J }, i.e., the strategy profile maximizing f a(α, x). Whenever |N(Φ)| > 0, the PoA is the ratio f a(¯α, ¯x)/f a(ˆα, ˆx). 8 From the attacker’s perspective, the PoA mimics the definition of the PoS. It measures the relative loss in the attacker’s payoff caused by the NE conditions in the NE that maxi- mizes the real-valued function f a(α, x). 4 Cloud Critical Node Game This section contextualizes our mathematical formulation for the CNG in cloud networks. In Section 4.1, we describe the payoff structure for the game. Specifically, we describe f d and f a. In Section 4.2, we recall the ZERO Regrets algorithm [19] and describe how to tailor it for our problem. Contextualization. A malicious attacker gains access to the network G via undisclosed vulnerabilities and aims to perform an attack to maximize the network disruption on G (e.g., maximizing f a). The defender detects the intrusion, yet, they are uncertain about the attacker’s targets and the type of vulnerability the attacker could exploit. Therefore, the defender aims to protect their critical infrastructure. The defender creates a projec- tion of the attacker’s capabilities by defining the attacker’s optimization model, e.g., by choosing f a, A, and a based on the monitoring data that warned about a possible attack and the available information regarding the exploited vulnerabilities. The attacker and the defender have limited resources for their defensive and attacking strategies (namely, a, A, d, D). While the attacker aims to maximize a measure of network disruption, the defender aims to preserve the network operations as much as possible by maximizing f d. The defender may activate an extra layer of security measures (i.e., a firewall or denial-of- service attack mitigation) on a subset of critical nodes by degrading the network operations by a given factor. 4.1 The Payoffs Let pd i be the parameter representing the criticality of node i ∈V for the defender. Sym- metrically, let pa i be the parameter representing the projected criticality of node i according to the attacker, e.g., according to the vulnerabilities the attacker could exploit and the im- portance of i. We will formulate the payoffs for the two players in terms of pd i and pa i according to whether node i is protected (xi = 1) or attacked (αi = 1), respectively. Let δ, η, ϵ and γ be real-valued scalar parameters in [0, 1] so that δ < η < ϵ. The payoff contributions follow the following scheme: (i.) Normal operations. If xi = 0 and αi = 0, the defender gets a full payoff of pd i as no attack is ongoing on i. However, the attacker pays an opportunity cost γpa i for not attacking i. (ii.) Successful attack. If xi = 0 and αi = 1, the attacker gets a full payoff of pa i , as the attacker successfully attacked node i. Therefore, the defender’s operations on node i worsen from pd i to δpd i . 9 (iii.) Mitigated attack. If xi = 1 and αi = 1, the defender’s selection of node i miti- gates the attack. Therefore, the defender’s operations are degraded from pd i to ηpd i . Symmetrically, the attacker receives a payoff of (1 −η)pa i . (iv.) Mitigation without attack. If xi = 1 and αi = 0, the defender protects node i with- out the attacker selecting node i. Therefore, the defender’s operations are degraded from pd i to ϵpd i . Symmetrically, the attacker receives a payoff of 0. We summarize the contribution of each node i to the players’ payoff in Table 1. αi = 0 αi = 1 xi = 0 pd i | −γpa i δpd i | pa i xi = 1 ϵpd i | 0 ηpd i | (1 −η)pa i Table 1: Description of the contributions to the player’s payoff with respect to the strategies associated with each node i. In blue (resp. red), are the defender’s (resp. attacker’s) contributions to their payoff. All considered, the defender’s payoff is f d(x, α) = X i∈V  pd i  (1 −xi)(1 −αi) + ηxiαi + ϵxi(1 −αi) + δ(1 −xi)αi  , (5) while the attacker’s payoff is f a(α, x) = X i∈V  pa i  −γ(1 −xi)(1 −αi) + (1 −xi)αi + (1 −η)xiαi  . (6) Example 4.1. Consider a cloud network given by G = (V, E) with |V | = 6, and |E| = 7 as in Figure 2. The cloud operator manages nodes 1, . . . , 5 while node 6 virtually represents the external network (e.g., the Internet). An attacker penetrates the network G and observes the traffic exchanged among the nodes. Once the attack has been detected, the network operator solves a CNG to determine the best defensive strategy. Based on the information received from the monitoring systems, the network operator formulates a CNG with the parameters of Table 2. The associated CNG admits the two exact (i.e., Φ = 0) NEs of Table 3. Specifically, the defender achieves, in both cases, a payoff f d(¯x, ¯α) of 29.2. However, the attacker has a payoff f a(¯α, ¯x) of 13.74 and 12.18 in equilibrium 1 and 2, respectively. The PoS for the instance is 1.78 for both equilibria (e.g., the ratio between P i pd i = 52 and 29.2), and it intuitively explains that the defender degrades their payoff 1.78 times to defend the network with the Nash equilibria. Symmetrically, the PoA for the instance is 1.86 and 2.09 in equilibrium 1 and 2, respectively; this price indicates that the attacker’s payoff decreases at most 2.09 times in equilibrium 2 compared to the most successful attack (e.g., when the defender does not protect any node). Although the two equilibria are equally advantageous for the defender, the PoA provides an insight into the best equilibrium. Indeed, from a practical perspective, the network operator should select equilibrium 2, as it damages the attacker the most. 10 1 2 4 5 3 1 1 5 1 2 External Networks 1 3 Figure 2: The network of Example 4.1. The weights on the edges represent the amount of traffic exchanged between the nodes. Node 1 Node 2 Node 3 Node 4 Node 5 Traffic 4 7 4 4 5 pd i 9 2 30 3 8 pa i 6 10.5 18 6 7.5 d 3 6 8 7 7 a 6 4 7 9 1 Parameter Value A 25.50 D 40.00 δ 0.06 η 0.40 ϵ 1.00 Table 2: Parameters associated with the instance of Example 4.1. ¯x ¯α PoS PoA Equilibrium 1 [1, 1, 1, 0, 1] [0, 0, 1, 0, 1] 1.78 1.86 Equilibrium 2 [0, 1, 1, 0, 1] [0, 0, 1, 0, 1] 1.78 2.09 Table 3: The NE associated with the instance of Example 4.1. Remark 4.1 (Determining the criticality of the nodes). In general, there are no standard and shared guidelines on choosing the criticality of each node in an “exact” fashion, as this depends on the characteristics of the network and the subjective assessment of the potential threats associated with each node. For instance, nodes that handle sensitive data and authentication mechanisms are more critical due to their impact on data integrity and security. Similarly, a node responsible for authentication is crucial in ensuring the application’s security. If this component is compromised or fails, it can lead to unauthorized access and potential data breaches. The criticality of nodes can vary depending on the specific context and requirements of the cloud-native applications. Factors such as business objectives, customer expectations, and system and network dependencies can all contribute to determining the criticality of each node. 11 4.2 Computing Equilibria This section describes the algorithm we employ to compute the equilibria for the CNG. We tailor the cutting-plane algorithm ZERO Regrets from Dragotto and Scatamacchia [19] to compute NEs and Φ−NE in the CNG. The algorithm receives as an input the CNG instance and a function f(x, α) and returns the NE maximizing f. We remark that ZERO Regrets can compute, thanks to its theoretical guarantees, the equilibrium maximizing f; therefore, our algorithm inherits ZERO Regrets’s properties and can provably return the equilibrium that maximizes f(x, α), or the approximate equilibrium that maximizes f(x, α) for a given approximation constant ΦUB. Our algorithm will return an equilibrium independently of any network parameter or network topology and can even handle arbitrary linear con- straints besides the knapsack constraint. Algorithm 1: ZERO Regrets for the CNG Data: A CNG instance and a function f(x, α) : {0, 1}|V |2 →R. Result: Either: (i.) the NE ¯x, ¯α maximizing f(x, α), or (ii.) a Φ−NE ¯x, ¯α maximizing f(x, α). 1 Ω= {0 ≤1}, ΦUB = 0, and Q = maxx,α,Φ{f(x, α) : (x, α) ∈J , (x, α, Φ) ∈Ω, Φ ≤ΦUB} 2 repeat 3 if Q is infeasible then ΦUB = ΦUB + 1 4 else 5 (¯x, ¯α, ¯Φ) ∈arg max Q; 6 ˜x ∈arg maxx{f d(x, ¯α) : d⊤x ≤D} 7 ˜α ∈arg maxα{f a(α, ¯x) : a⊤α ≤A} 8 if f d(¯x, ¯α) + ΦUB ≤f d(˜x, ¯α) then 9 add f d(˜x, α) ≤f d(x, α) + Φ to Ω 10 else if f a(¯α, ¯x) + ΦUB ≤f a(˜α, ¯x) then 11 add f a(˜α, x) ≤f a(α, x) + Φ to Ω 12 else 13 return the ¯Φ-NE ¯x, ¯α The Algorithm. We formalize the algorithm in Algorithm 1. In Line 1, the algorithm initializes (i.) an empty cutting plane pool Ω, and (ii.) Φ to 0, and (iii.) a program Q that optimizes the input function f(x, α) over the joint outcome space and Ω. Without loss of generality, we assume that Q is feasible and bounded at the first iteration (see [19] for details). Let ¯x, ¯α be the maximizers of Q. The task is to determine whether or not ¯x, ¯α is an NE. This is equivalent to checking whether the defender (resp. the attacker) can unilaterally and profitably deviate to another strategy ˜x (resp. ˜α). The algorithm solves the defender’s (resp. attacker’s) optimization problem in Line 6 (resp. Line 7 for the attacker), by letting x (resp. α) be a variable while fixing α to ¯α (resp. x to ¯x). If the defender payoff f d (resp. attacker payoff f a) under the profile ˜x, ¯α (resp. ¯x, ˜α) is better than the one 12 under ¯x, ¯α, then ˜x (resp. ˜α) is a deviation; by definition, ¯x, ¯α cannot be a NE. Therefore, the algorithm cuts off ¯x, ¯α from Q via the cutting plane in Line 9 (resp. Line 11) with a so-called equilibrium inequality [19], i.e., an inequality that does not cut off any NE. If no deviation exists for the attacker and the defender, then the algorithm returns a NE in Line 13. We generalize the previous reasoning by allowing any profitable deviation to be incremented by at most ¯Φ to enable the computation of Φ−NE. Whenever Q becomes infeasible (Line 3), then no Φ-NE can exist with Φ ≤ΦUB; therefore, we heuristically increment ΦUB by one unit. Remark 4.2. The network operators run Algorithm 1 with a time limit and expect the al- gorithm to produce a feasible solution. In order to guarantee that the algorithm produces a feasible solution, at each iteration, we store the best incumbent Φ-NE found so far, that is, the solution ¯x, ¯α with the smallest ¯Φ. If the algorithm hits a time limit, we return the best incumbent Φ-NE found. 5 Computational Experiments We perform the computational experiments on two instance sets. Specifically, we test our algorithm on synthetic instances and instances derived from a real-world cloud network. We run our experiments on 8 CPUs and 64 GB of RAM, with Gurobi 10 as the optimiza- tion solver. The full tables of results and instances are available at https://github.com/ ds4dm/CNG-Instances. 5.1 Synthetic Instances We generate a series of cloud networks with 10, 25, 50, 75, 100, 150 and 300 nodes. We draw the parameters δ, η, ϵ, γ, A, and D from a series of realistic distributions mimicking the dy- namics of several attack loads. For instance, low-load attacks represent activities related to smaller attacks, while high-load attacks represent attacks of major impact (e.g., dis- tributed attacks, state-sponsored attacks). We summarize the choices for such parameters in Table 4. Parameter Values Notes γ 0.00, 0.10 Attacker’s opportunity cost factor η 0.60, 0.80 Defender’s mitigated-attack factor ϵ 1.25η Defender’s mitigation-without-attack factor δ 0.80η Attacker’s successful-attack factor D 0.30 P i di, 0.75 P i di Defender’s budget A 0.03 P i ai, 0.10 P i ai, 0.30 P i ai Attacker’s budget Table 4: Description of the CNG parameters for the synthetic instances. 13 The motivation behind the values of the parameters is mainly empirical. The attacker’s opportunity cost γ is generally considered to be either 0 or 0.1 as attacking may expose the exact dynamics of the attack (e.g., the type of vulnerabilities exploited by the attacker) while not attacking may give time to the network operator to investigate on the attack. The magnitude of the mitigated attack factor η depends on the type of defensive resources deployed by the network operator; for instance, some firewall filtering rules may signifi- cantly slow down the overall network operations, whereas some may have milder effects on the network performance. Therefore, we select a low (i.e., 0.60) and a high (i.e., 0.80) value of η. Since no attack is ongoing, the mitigation-without-attack factor ϵ is based on a η plus an extra benefit (i.e., ϵ = 1.25η). The successful-attack factor δ is based on η minus an extra cost due to the unmitigated attack (i.e., δ = 0.8η). The budgets A and D are strictly instance-dependent since they model the players’ ability to select nodes in the net- work. In our instances, we consider large-scale attacks where the defender generally has resources to protect either 30% or 75% of the network, as of contractual agreements with the customers regarding the degradation of services (i.e., the so-called service level agree- ments). As of these agreements, the defender may be contractually obliged to guarantee a minimal level of service to its customer. In contrast, the attacker can attack the 3%, 10% or 30% of the nodes according to their weights a. We generate a, d as random integer vectors with entries in the range [1, 25]. We generate pa and pd by starting from the same random integer vector with entries in the range [1, 25] and adding, for pa and pd separately, another random integer vector with the same characteristics. |V | PoS PoS Range PoA PoA Range Φ f d f a Time (s) 10 1.10 [1.00, 1.39] 2.59 [1.38, 5.00] 15.55 1731.45 99.92 27.65 25 1.09 [1.01, 1.34] 2.72 [1.43, 5.00] 4.53 729.41 35.38 12.24 50 1.11 [1.00, 1.35] 2.17 [1.56, 2.98] 19.63 1592.66 90.34 34.08 75 1.11 [1.00, 1.36] 2.40 [1.07, 3.24] 22.57 2211.23 129.07 48.87 100 1.12 [1.00, 1.30] 4.27 [1.60, 7.72] 41.60 3152.46 157.07 65.57 150 1.17 [1.01, 1.39] 5.02 [1.51, 10.16] 75.71 6842.50 272.88 86.69 300 1.10 [1.01, 1.26] 4.09 [1.42, 7.60] 174.82 8592.27 479.91 100.02 Table 5: Average computational results for the synthetic instances. The results are aggregated for each value of cardinality of V . Results. In Table 5, we present the computational results for the synthetic instances. Each row presents some metrics averaged over all instances with the same number of nodes |V |. For each combination of parameters described in Section 5.1, we execute Algorithm 1 twice by setting f(x, α) = f d(x, α) and f(x, α) = f a(α, x), i.e., we execute the algorithm twice to compute the PoA and PoS. In column order, we report (i.) the number of nodes |V |, (ii.) the average PoS (iii.) the range of PoS, i.e., the minimum and maximum PoS achieved in the instances, (iv.) the average PoA, (v.) the range of PoA, (vi.) the average value of Φ for Φ-NE, (vii.) the average defender’s payoff f d, (viii.) the average attacker’s payoff f a, and (ix.) the average time (seconds) required to compute the NE. In all the instance sets but 300, we compute a NE within the time limit of 100 seconds. In the set with |V | = 300, 14 the algorithm cannot compute an equilibrium within the time limit and returns a strategy that, on average, is a Φ-NE with Φ = 174.82, whereas f d and f a average 8592.27 and 479.91, respectively. This indicates that, on average, Φ is 2% of the defender’s payoff, and thus the Φ-NE has a small relative approximation ratio. The equilibria computed in all the instances tend to exhibit similar behavior in terms of PoS, whereas the PoA tends to grow in the sets 100, 150 and 300. This growth in the PoA is also partially reflected in the broader range in the instances 100, 150, and 300. We remark that lower PoS indicate that the defender can commit to equilibria strategies that are close, in terms of efficiency, to the best possible strategy in the joint outcome space. In other words, equilibria with low PoS are practically-efficient defensive strategies. 5.2 Real-world Cloud Network We instantiate the CNG on a real-world anonymized dataset from Ericsson [9] contain- ing traffic snapshots from a cloud-native application network. Specifically, we consider 10 snapshots of the same network collected at different times (i.e., each 1 minute), and we perform our tests on each of the snapshots. The network is a cluster node running a set of cloud services (e.g., containers registry, logging, database mediator, key management, load balancer, DNS, LDAP, SNMP, and SCTP services). In addition, there are 3 manage- ment hosts (e.g., Kubernetes K8S), and 16 servers providing customer resources. This cloud network powers |V | = 656 separate resources (e.g., storage, virtual servers). We refer the reader to [9] for additional information concerning the data source and the underlying cloud network. We assign the parameters pd i and pa i by summing up the total traffic transit- ing through node i. Similarly, we derive the nodes’ weights di and ai as log2(pd i ). We modify the defender’s pd i and di to reflect the node’s nature, i.e., we increase them if they are as- sociated with critical infrastructures, such as management nodes (e.g., K8S master node, DNS service discovery or service mesh routing) and vital nodes for the cloud network. As a result of this latter altering procedure, we remark that the final weights’ magnitude might not be correlated with the total traffic of management nodes. Similarly, we modify the at- tacker’s profits pa i and weights ai to partially reflect the attacker’s knowledge of the nature of the node, i.e., an increased cost on i may signal that the attacker is more confident that the security mechanisms at node i is difficult to penetrate. Results. In Table 6, we report the aggregated computational results conforming to the previous description. We aggregate the instances by their parameters η, ϵ, γ, δ. For each instance, we run Algorithm 1 twice over all the combinations of parameters to determine the PoA and the PoS. We employ the same notation for the columns, except for the columns A% and D%; in these columns, we report the weighted percentage of nodes the attacker or defender can select. For instance, A% = 0.3 indicates the attacker’s budget is 0.3 P i ai. Since the instances are generally larger than the synthetic ones, the algorithm almost always hits the time limit of 180 seconds. However, it also always finds a feasible Φ-NE that ranges from 1% to 9% of the defender’s payoff, i.e., equilibria that are close to being exact. The PoS varies according to the type of attack (i.e., with the parameters), and generally degrades the defender’s performance from 1% for small-scale attacks to 27% in 15 A% D% η ϵ γ δ PoS PoS Range PoA PoA Range Φ f d f a Time (s) 0.03 0.30 0.60 0.75 0.00 0.48 1.07 [1.05, 1.10] 1.04 [1.01, 1.09] 92.10 8366.01 3677.03 72.70 0.10 0.30 0.60 0.75 0.00 0.48 1.12 [1.11, 1.13] 1.01 [1.00, 1.04] 241.33 7948.18 9429.20 180.00 0.03 0.75 0.60 0.75 0.00 0.48 1.07 [1.05, 1.10] 1.04 [1.01, 1.09] 92.10 8365.98 3677.03 74.73 0.10 0.75 0.60 0.75 0.00 0.48 1.12 [1.11, 1.13] 1.01 [1.00, 1.04] 241.33 7948.18 9429.20 180.00 0.30 0.75 0.60 0.75 0.00 0.48 1.24 [1.21, 1.26] 1.13 [1.01, 1.26] 394.74 7117.08 16106.87 180.00 0.03 0.30 0.80 1.00 0.00 0.64 1.01 [1.01, 1.04] 3.39 [2.33, 4.52] 57.34 8767.94 971.60 180.00 0.10 0.30 0.80 1.00 0.00 0.64 1.08 [1.07, 1.09] 1.48 [1.00, 3.41] 284.97 8278.47 8769.75 180.00 0.03 0.75 0.80 1.00 0.00 0.64 1.01 [1.01, 1.03] 3.35 [2.44, 5.00] 51.80 8774.46 996.21 180.03 0.10 0.75 0.80 1.00 0.00 0.64 1.08 [1.07, 1.09] 1.01 [1.00, 1.04] 307.24 8248.47 9429.20 180.00 0.30 0.75 0.80 1.00 0.00 0.64 1.16 [1.14, 1.17] 1.02 [1.01, 1.03] 541.44 7707.95 16893.80 180.00 0.03 0.30 0.60 0.75 0.10 0.48 1.07 [1.05, 1.10] 3.74 [2.72, 6.40] 92.83 8342.57 715.32 89.77 0.10 0.30 0.60 0.75 0.10 0.48 1.20 [1.15, 1.23] 1.74 [1.23, 2.03] 676.05 7612.48 6058.38 180.00 0.03 0.75 0.60 0.75 0.10 0.48 1.07 [1.05, 1.10] 5.51 [3.82, 10.10] 92.87 8347.80 713.36 91.69 0.10 0.75 0.60 0.75 0.10 0.48 1.14 [1.11, 1.15] 1.89 [1.36, 2.19] 730.06 7806.45 4525.63 180.00 0.30 0.75 0.60 0.75 0.10 0.48 1.27 [1.19, 1.41] 1.32 [1.15, 1.42] 662.80 7014.45 12067.67 180.00 0.03 0.30 0.80 1.00 0.10 0.64 1.02 [1.01, 1.05] 3.88 [1.01, 9.48] 85.86 8693.34 910.89 180.00 0.10 0.30 0.80 1.00 0.10 0.64 1.08 [1.07, 1.09] 1.18 [1.00, 2.17] 289.00 8252.51 7955.36 180.00 0.03 0.75 0.80 1.00 0.10 0.64 1.01 [1.01, 1.03] 4.27 [2.40, 5.25] 60.03 8753.73 827.67 180.00 0.10 0.75 0.80 1.00 0.10 0.64 1.08 [1.07, 1.09] 1.91 [1.02, 3.47] 249.37 8308.51 7584.37 180.00 0.30 0.75 0.80 1.00 0.10 0.64 1.16 [1.14, 1.17] 1.02 [1.01, 1.03] 541.43 7705.90 16891.54 180.00 Table 6: Average computational results for the real-world cloud network. large-scale attacks, e.g., when A% = 0.3. 6 Conclusions In this work, we introduced the CNG, a game-theoretic model to assess the cyber-security risk of cloud networks and inform security experts on the optimal security strategies. Our approach combines game theory and combinatorial optimization to provide a prac- tical framework to guide security experts in assessing the security posture of the cloud network and dynamically adapting the level of cyber-protection deployed on the net- work. Methodologically, we formalized the CNG as a simultaneous and non-cooperative attacker-defender game where each player solves a combinatorial optimization problem parametrized in the variables of the other player. Our model embeds the uncertainty of the attack dynamics by modeling the range of possible attacks and requires, in this sense, almost no probabilistic assumption. In practice, we provided a computational analysis of a real-world cloud network and synthetic instances and demonstrated the efficacy of our approach. Importantly, our approach always produces a feasible recommendation for the network operators and scales up to real-sized cloud networks. Although our CNG only includes a knapsack constraint, it could support more sophisticated constraints modeling requirements on the defender’s and attacker’s operations. Finally, our approach does not assume any specific structure on the attacks (if not a resource constraint). To alleviate the conservativism of such a model, our approach can be augmented by specifying the dynamics (or types) of attacks allowed by the attacker. For instance, the MITRE ATT&CK 16 framework [16], a collection of attack tactics and techniques based on real-world obser- vations, can provide useful constraints on the attacker dynamics. For example, we could require that if one given node is attacked, other nodes with the same “properties” (e.g., the same software) are also attacked. As long as we can represent these dynamics with linear constraints, our algorithm can still compute the equilibrium of the resulting game. Acknowledgements We are grateful to Margarida Carvalho for the insightful feedback on this work. We are thankful to the two anonymous referees for their feedback and suggestions. The third author acknowledges the collaboration and contribution of IASI, CNR, Rome. References [1] Bernardetta Addis, Marco Di Summa, and Andrea Grosso. Identifying critical nodes in undirected graphs: Complexity results and polynomial algorithms for the case of bounded treewidth. Discrete Applied Mathematics, 161(16-17):2349–2360, 2013. ISSN 0166218X. [2] Ashwin Arulselvan, Clayton W. Commander, Lily Elefteriadou, and Panos M. Parda- los. Detecting critical nodes in sparse graphs. Computers & Operations Research, 36 (7):2193–2200, 2009. ISSN 03050548. [3] Nikitas Assimakopoulos. A network interdiction model for hospital infection control. Computers in Biology and Medicine, 17(6):413–422, 1987. ISSN 00104825. [4] Andrea Baggio, Margarida Carvalho, Andrea Lodi, and Andrea Tramontani. Multi- level approaches for the critical node problem. Operations Research, 69(2):486–508, 2021. ISSN 0030-364X, 1526-5463. [5] Michael O. Ball, Bruce L. Golden, and Rakesh V. Vohra. Finding the most vital arcs in a network. Operations Research Letters, 8(2):73–76, 1989. ISSN 01676377. [6] Cristina Bazgan, Sonia Toubaline, and Zsolt Tuza. The most vital nodes with respect to independent set and vertex cover. Discrete Applied Mathematics, 159(17):1933– 1946, 2011. ISSN 0166218X. [7] Dimitris Bertsimas and Dick den Hertog. Robust and Adaptive Optimization. Dy- namic Ideas LLC, 1st edition, 2022. [8] S.P. Borgatti. Identifying sets of key players in a network. In IEMC ’03 Proceedings. Managing Technologically Driven Organizations: The Human Side of Innovation and Change (IEEE Cat. No.03CH37502), pages 127–131, Cambridge, MA, USA, 2003. IEEE. ISBN 978-0-7803-7958-9. 17 [9] Amine Boukhtouta, Taous Madi, Makan Pourzandi, and Hyame Alameddine. Cloud native applications profiling using a graph neural networks approach. In 2022 IEEE Future Networks World Forum (FNWF), pages 220–227. IEEE, 2022. [10] Gerald Brown, Matthew Carlyle, Javier Salmer´on, and Kevin Wood. Defending criti- cal infrastructure. Interfaces, 36(6):530–544, 2006. ISSN 0092-2102, 1526-551X. [11] Margarida Carvalho, Andrea Lodi, and Jo˜ao Pedro Pedroso. Existence of nash equi- libria on integer programming games. In A. Ismael F. Vaz, Jo˜ao Paulo Almeida, Jos´e Fernando Oliveira, and Alberto Adrego Pinto, editors, Operational Research, vol- ume 223, pages 11–23. Springer International Publishing, Cham, 2018. ISBN 978-3- 319-71582-7 978-3-319-71583-4. [12] Margarida Carvalho, Gabriele Dragotto, Andrea Lodi, and Sriram Sankaranarayanan. Integer programming games: a gentle computational overview. In Tutorials in Opera- tions Research: Advancing the Frontiers of OR/MS: From Methodologies to Applications, chapter 2, pages 31–51. INFORMS, 2023. [13] Lin Chen and Jean Leneutre. A game theoretical framework on intrusion detection in heterogeneous networks. IEEE Transactions on Information Forensics and Security, 4(2):165–178, 2009. [14] Reuven Cohen, Shlomo Havlin, and Daniel ben Avraham. Efficient immunization strategies for computer networks and populations. Physical Review Letters, 91(24): 247901, 2003. ISSN 0031-9007, 1079-7114. [15] Clayton W. Commander, Panos M. Pardalos, Valeriy Ryabchenko, Stan Uryasev, and Grigoriy Zrazhevsky. The wireless network jamming problem. Journal of Combinato- rial Optimization, 14(4):481–498, 2007. ISSN 1382-6905, 1573-2886. [16] MITRE Corporation. MITRE ATT&CK, 2023. [17] Marco Di Summa, Andrea Grosso, and Marco Locatelli. Complexity of the critical node problem over trees. Computers & Operations Research, 38(12):1766–1774, 2011. ISSN 03050548. [18] Gabriele Dragotto. Mathematical Programming Games. PhD thesis, Polytechnique Montr´eal, 2022. [19] Gabriele Dragotto and Rosario Scatamacchia. The ZERO regrets algorithm: Opti- mizing over pure nash equilibria via integer programming. INFORMS Journal on Computing, 35(5):1143–1160, 2023. [20] Marcin Dziubi´nski and Sanjeev Goyal. Network design and defence. Games and Economic Behavior, 79:30–43, 2013. [21] Stephen Finbow and Gary MacGillivray. The firefighter problem: A survey of results, directions and questions. Australas. J Comb, 43:55–77, 2009. 18 [22] Matteo Fischetti, Ivana Ljubi´c, Michele Monaci, and Markus Sinnl. Interdiction games and monotonicity, with application to knapsack problems. INFORMS Journal on Com- puting, 31(2):390–410, 2019. ISSN 1091-9856, 1526-5528. [23] Sanjeev Goyal and Adrien Vigier. Attack, defence, and contagion in networks. The Review of Economic Studies, 81(4):1518–1542, 2014. [24] Wei He, Chunhe Xia, Haiquan Wang, Cheng Zhang, and Yi Ji. A game theoretical attack-defense model oriented to network security risk assessment. In 2008 Inter- national Conference on Computer Science and Software Engineering, volume 6, pages 498–504. IEEE, 2008. [25] Pierre Hosteins and Rosario Scatamacchia. The stochastic critical node problem over trees. Networks, 76(3):381–401, 2020. ISSN 0028-3045, 1097-0037. [26] Eitan Israeli and R. Kevin Wood. Shortest-path network interdiction. Networks, 40 (2):97–111, 2002. ISSN 0028-3045, 1097-0037. [27] Elias Koutsoupias and Christos Papadimitriou. Worst-case equilibria. In Gerhard Goos, Juris Hartmanis, Jan van Leeuwen, Christoph Meinel, and Sophie Tison, ed- itors, STACS 99, volume 1563, pages 404–413. Springer Berlin Heidelberg, Berlin, Heidelberg, 1999. ISBN 978-3-540-65691-3 978-3-540-49116-3. [28] Matthias K¨oppe, Christopher Thomas Ryan, and Maurice Queyranne. Rational gener- ating functions and integer programming games. Operations Research, 59(6):1445– 1460, 2011. ISSN 0030-364X, 1526-5463. [29] Mohammed Lalou, Mohammed Amin Tahraoui, and Hamamache Kheddouci. The critical node detection problem in networks: A survey. Computer Science Review, 28: 92–117, 2018. ISSN 15740137. [30] Adel Nabli and Margarida Carvalho. Curriculum learning for multilevel budgeted combinatorial problems. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin, editors, Advances in Neural Information Processing Systems, volume 33, pages 7044–7056. Curran Associates, Inc., 2020. [31] John F. Nash. Equilibrium points in n-person games. Proceedings of the National Academy of Sciences of the United States of America, 36(1):48–49, 1950. [32] H. Donald Ratliff, G. Thomas Sicilia, and S. H. Lubore. Finding the n most vital links in flow networks. Management Science, 21(5):531–539, 1975. ISSN 0025-1909, 1526-5501. [33] Sankardas Roy, Charles Ellis, Sajjan Shiva, Dipankar Dasgupta, Vivek Shandilya, and Qishi Wu. A survey of game theory as applied to network security. In 2010 43rd Hawaii International Conference on System Sciences, pages 1–10, Honolulu, Hawaii, USA, 2010. IEEE. ISBN 978-1-4244-5509-6. 19 [34] Siqian Shen and J. Cole Smith. Polynomial-time algorithms for solving a class of critical node problems on trees and series-parallel graphs. Networks, 60(2):103–119, 2012. ISSN 00283045. [35] Siqian Shen, J. Cole Smith, and Roshan Goli. Exact interdiction models and algo- rithms for disconnecting networks via node deletions. Discrete Optimization, 9(3): 172–188, 2012. ISSN 15725286. [36] K¨ubra Tanınmıs¸ and Markus Sinnl. A branch-and-cut algorithm for submodular in- terdiction games. INFORMS Journal on Computing, 34(5):2634–2657, 2022. ISSN 1091-9856, 1526-5528. [37] Zhou Tao, Fu Zhongqian, and Wang Binghong. Epidemic dynamics on complex net- works. Progress in Natural Science, 16(5):452–457, 2006. [38] Alexander Veremyev, Oleg A. Prokopyev, and Eduardo L. Pasiliao. An integer pro- gramming framework for critical elements detection in graphs. Journal of Combina- torial Optimization, 28(1):233–273, 2014. ISSN 1382-6905, 1573-2886. [39] R. Zenklusen. Network flow interdiction on planar graphs. Discrete Applied Mathe- matics, 158(13):1441–1455, 2010. ISSN 0166218X. [40] Rico Zenklusen. Matching interdiction. Discrete Applied Mathematics, 158(15):1676– 1690, 2010. ISSN 0166218X. [41] Rico Zenklusen. Connectivity interdiction. Operations Research Letters, 42(6-7):450– 454, 2014. ISSN 01676377. 20