A Testbed To Study Adversarial Cyber-Attack Strategies in Enterprise Networks Ayush Kumar ayush_kumar@sutd.edu.sg Singapore University of Technology and Design David K. Yau david_yau@sutd.edu.sg Singapore University of Technology and Design ABSTRACT In this work, we propose a testbed environment to capture the attack strategies of an adversary carrying out a cyber-attack on an enterprise network. The testbed contains nodes with known security vulnerabilities which can be exploited by hackers. Partic- ipants can be invited to play the role of a hacker (e.g., black-hat, hacktivist) and attack the testbed. The testbed is designed such that there are multiple attack pathways available to hackers. We describe the working of the testbed components and discuss its implementation on a VMware ESXi server. Finally, we subject our testbed implementation to a few well-known cyber-attack strate- gies, collect data during the process and present our analysis of the data. CCS CONCEPTS • Security and privacy; KEYWORDS Cyber-attack, Adversarial Behavior, Enterprise Networks, Testbed ACM Reference Format: Ayush Kumar and David K. Yau. 2023. A Testbed To Study Adversarial Cyber-Attack Strategies in Enterprise Networks. In Proceedings of ACM Conference (Conference’17). ACM, New York, NY, USA, 5 pages. https://doi. org/10.1145/nnnnnnn.nnnnnnn 1 INTRODUCTION Cyber-attacks are a major factor affecting the operations of enter- prises, government organizations, critical infrastructures, SMEs, etc. Not only do they threaten to disrupt those operations, the attacks are a leading cause of financial losses to the affected organizations[7, 8]. A number of cyber-attacks are targeted at enterprise networks belonging to SME (Small and Medium Enterprises) as well as large enterprises, e.g., to steal valuable business data. When an adver- sary targets such a network, their attack strategy leaves a footprint across the network and the devices connected to it. By attack strat- egy, we refer to actions such as how an adversary gains access to a target network, how it moves across the network, how it looks for vulnerable machines connected to the network and exploits them, etc. If data is collected from the target network when under attack Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. Conference’17, July 2017, Washington, DC, USA © 2023 Association for Computing Machinery. ACM ISBN 978-x-xxxx-xxxx-x/YY/MM...$15.00 https://doi.org/10.1145/nnnnnnn.nnnnnnn by an adversary, it can be analyzed for patterns. Further, those patterns can be used to detect future cyber-attacks. Data collected from our testbed can also be used to validate frameworks mod- elling the motivations, cognitive antecedents and dynamic decision making processes of hackers in the lead up to as well as during cyber-attacks which can be helpful in predicting them. As we can not allow an adversary to attack a real enterprise network, it makes sense to build a testbed environment that emulates an enterprise network and let adversaries attack the testbed instead. Hence, in this work, we present a controlled testbed environ- ment to emulate enterprise networks and capture adversarial attack strategies. The testbed consists of nodes configured to serve func- tions similar to the machines that can be found in a real-world enterprise network. Some of the nodes are configured with known security vulnerabilities. Adversaries can be allowed to attack the testbed network by exploiting the vulnerabilities and the resulting system and network-level data can be collected using an in-built data logging infrastructure. This testbed is targeted at cyber secu- rity researchers who can easily and quickly bootstrap experiments. It also offers flexibility in terms of changing the testbed network topology, modifying existing nodes and their functionalities or increasing the number of nodes when required. 2 RELATED WORK There are only a handful of studies on building enterprise net- work testbeds in existing literature. Few works[1, 5] have pro- posed testbeds using a node virtualization approach to emulate real-world enterprise networks which can be used for analysing worm/malware propagation. These testbeds are supposed to be used to evaluate/validate detection and defense techniques against malware/worm propagation. However, they are more focused on a specific cyber-attack (malware, worms) and emulating the topology and number of nodes in real-world enterprise networks. In com- parison, our focus is on capturing the architecture of real-world enterprise networks. Moreover, our proposed testbed is aimed at studying the attack strategies of cyber adversaries and using the pat- terns extracted from them to design cyber-attack detection methods in enterprise networks. In [2], the authors have presented a testbed to evaluate their proposed fault-localization system, Sherlock, meant to be deployed in large enterprise networks. The testbed consists of two LANs connected by a router, with each LAN containing web servers, SQL backend server, DNS servers, authentication servers and clients. Their testbed is closest to ours in terms of architecture, though its purpose is entirely different. arXiv:2307.02794v1 [cs.CR] 6 Jul 2023 Conference’17, July 2017, Washington, DC, USA Ayush Kumar and David K. Yau 3 TESTBED OVERVIEW In this section, we begin by giving an overview of the architecture and configuration of our proposed testbed followed by listing down the security vulnerabilities used to infect some of the testbed nodes. 3.1 Architecture and Configuration Large enterprises and SMEs (Small and Medium Enterprises) have different network architectures. Therefore, we have proposed two sets of architectures for our testbed representing large enterprises and SMEs’ networks as shown in Fig. 1 and Fig. 2. The testbed machines and their functions are listed below: • Jump point/host: This is the machine through which a hacker gains entry into our testbed network. • Web server: This machine acts as a web server hosting a fictitious company’s web page. • Application server: This machine is configured as a server hosting a web application with a MySQL database at its back- end. Through the web application, employees can login with their credentials to retrieve and update their employment- related details saved with the company. The database also stores the VPN (Virtual Private Network) credentials of the employees which are used to connect to hosts connected to a remote company site. • VPN client: This machine acts as a VPN client which is used to connect to company’s VPN network. • VPN server: This machine runs a VPN server, waiting for connection requests from VPN clients. The TLS/SSL VPN supports packet encryption, certificate-based server valida- tion, client authentication and multiple clients. • VPN host: This machine acts as a host accessible from the VPN network only. It stores classified files and documents on the company’s products. • DNS server: This machine runs a local DNS server, which maps internal company domains to IP addresses as well as handles external DNS queries. • File server: This machine runs a local file server storing important files which can be accessed by the company’s employees. • Logging server: This machine is the centralized point where system logs and packet traces from all the machines con- nected to the testbed network are collected. It has two mod- ules: – A packet traffic capture utility (e.g., Wireshark, Tcpdump) runs on the logging server in promiscuous mode so that it listens to all the packet traffic on the testbed network being sent or received by the other machines. – The system log (syslog) files from the all the machines are piped to the logging server using rsyslog utility. • Decoy hosts: These machines are meant to confuse the hackers and delay their attack on target machines. 3.2 Security Vulnerabilities We have included several real-world security vulnerabilities in the testbed nodes which can be exploited by hackers to accomplish their attacks on our testbed. The security vulnerabilities are listed below: Figure 1: Testbed Architecture (Small and Medium Enter- prise) Figure 2: Testbed Architecture (Large Enterprise) • The web server is configured with a weak login password which hackers should be able to obtain using password brute forcing. • The MySQL database at the backend of the application server is vulnerable to SQL injection. This means that using spe- cially crafted inputs to the web application, hackers can retrieve all or some of the employees’ sensitive information stored in the database. • The VPN server uses only password-based authentication to authenticate clients which can result in hackers obtain- ing access to the VPN network using stolen employee VPN credentials. • The DNS server is vulnerable to cache poisoning in which a hacker can spoof responses from other DNS servers to redirect employees to malicious domains. • The file server is vulnerable to remote command execution, i.e., a hacker can obtain a reverse-shell to the file server. A Testbed To Study Adversarial Cyber-Attack Strategies in Enterprise Networks Conference’17, July 2017, Washington, DC, USA 4 HACKING THE TESTBED In this section, we present some of the possible pathways which can be taken by hackers in our testbed. 4.1 Attack pathways In our testbed, hackers have been provided choices in terms of nodes with different functionalities and their associated security vulnerabilities. It is up to the hacker to figure how to reach the nodes, decide whether to attack them and the kind of attack to carry out. We now outline some of the possible attack pathways that can be followed in our testbed by three types of hackers: hacktivists[3], petty thieves[6] and black-hats[4]. 4.1.1 Hacktivist pathways. Hacktivists are highly skilled and gen- erally tend to disrupt/damage systems or leak confidential infor- mation. Therefore, they can target both SME and large enterprise networks, though in the latter case they may have to use malware to spread and infect machines, use privilege escalation techniques and move across the company network (LAN2 →LAN1). Hack- tivists may attempt to deface the website hosted on web server by changing its contents, or leak private employee details online, or change the contents of the database at the back-end of the applica- tion server, or disable the web server itself, or deny DNS service, or disable the file server. The pathways corresponding to hacktivist are shown in Fig. 3. Figure 3: Possible testbed pathways for a Hacktivist 4.1.2 Petty Thief pathways. Since petty thieves are mostly finan- cially motivated and low to medium-skilled, they would target an SME network rather than a large enterprise network. They may attempt to obtain e-mail and phone records of the employees from the database at the back-end of application server. The pathways corresponding to petty thief are shown in Fig. 4. It is to be noted here that some of the actions mentioned in the figure can not be captured by our testbed itself and have to be enabled separately. 4.1.3 Black-hat pathways. Black-hats are highly skilled and are typically after or hired to steal high-worth information. Targeting large enterprise networks, similar to hacktivists, they may have to use malware to spread and infect machines, use privilege escalation techniques and move across the company network (LAN2 →LAN1). Once they have established access to both the LANs, they may at- tempt to steal confidential high-value product files (e.g., source code) stored on hosts connected to the company’s remote-site VPN network, or send phishing emails with ransomware/malware at- tachments from legitimate employee e-mail accounts to the e-mail (a) (b) Figure 4: Possible testbed pathways for a Petty Thief address of a high-value target such as the company CEO/CTO (to make them look convincing) and extract valuable information once they get access to the target’s computer. The pathways correspond- ing to black-hat are shown in Fig. 5. Figure 5: Possible testbed pathways for a Black-hat 5 PRELIMINARY DATA COLLECTION AND ANALYSIS We implemented our proposed testbed on a VMware ESXi server. The same testbed can also be configured on a cyber security exper- imentation platform such as DETERlab. The testbed machines are Virtual Machines (VMs) configured on the ESXi server and running Conference’17, July 2017, Washington, DC, USA Ayush Kumar and David K. Yau either Ubuntu 16.04, Ubuntu 20.04 or Windows 10 OS. Most VMs are configured with ~8GB of RAM, 4 virtual CPUs and few hun- dreds of GBs of hard disk. The web servers are built using Apache2, database using MySQL, DNS server using BIND9 and file server using Samba. All the VMs except the VPN host have their system times synchronized to a local NTP (Network Time Protocol) server. The VPN server broadcasts the time on the VPN network which is received by VPN host. All the VMs have an administrator account (representing the company’s IT admin account) and few VMs have a local user account (representing the employee’s account). A vir- tual NAT router provides access to the Internet for all the testbed VMs. One of the VMs is also configured with an OPNsense firewall to manage Internet access for the other VMs. By default, external Internet access is blocked for all the VMs except the jump host. One of the first actions by any hacker who targets a network, enterprise or not, is to find other hosts connected to the same subnet. We therefore run an open-source network scanning tool, nmap on the jump host using the subnet (10.0.2.0/24). It is reflected in the packet capture collected on logging server as shown in Fig. 6. The jump host makes TCP connection requests to all the connected hosts in the subnet, followed by a three-way handshake ([SYN], [SYN,ACK], [ACK]) for each established connection. It also makes DNS queries to the Google DNS server (IP address: 8.8.8.8) to obtain domain name mappings for the connected hosts if any. Thus, if in an enterprise network, there is an abnormal increase in number of TCP connection requests to hosts or number of DNS queries, it is likely due to someone trying to scan the network. Figure 6: Packet capture at logging server during nmap scan If a hacker find the web server, he/she may attempt to brute-force its credentials to login to the server via SSH using tools such as metasploit/hydra/nmap-scripting engine. Login credential brute- forcing is a common tactic employed by hackers when they suspect a vulnerable web server. As seen from the packet capture at logging server displayed in Fig. 7, such as action would result in multiple TCP connection requests from the jump host to the target web server, followed by a three-way handshake ([SYN], [SYN,ACK], [ACK] packets) for each established connection. It also leads to client-server Diffie-Hellman key exchanges followed by forwarding of encrypted packets containing username and password from client to server. As most of the password brute-force attempts are unsuc- cessful and SSH allows a maximum of 6 authentication attempts per connection, it leads to several connection resets ([RST] packets). This means that if there is an abnormal increase in number of TCP connection requests to a host (particularly a web server), DH key exchanges and TCP connection resets, it is likely due to someone brute-forcing SSH login credentials for the host. Figure 7: Packet capture at logging server during during cre- dential brute forcing on web server A hacker may also find the web application server with data- base at its back-end by probing the testbed network. Since SQL injection is one of the most common attacks carried out by hack- ers against databases, we run an open-source penetration testing tool for automated SQL injection vulnerability detection and ex- ploitation, sqlmap on the jump host to find if the web application database is vulnerable to SQL injection and subsequently, dump the complete database. A packet capture during the attack (Fig. 8) shows multiple TCP connection requests followed by HTTP GET requests sent from the jump host to the web application server. It can thus be inferred that an anomalous increase in the number of TCP connection requests and HTTP GET requests to a host (par- ticularly a web application) is indicative of someone dumping the back-end database. Figure 8: Packet capture at logging server during SQL injec- tion attack on web application database 6 CONCLUSION We have proposed a testbed to analyse the attack strategies of cyber adversaries in enterprise networks and use them for attack detec- tion. The testbed network consists of several nodes with different functionalities, with some of the nodes infected with security vul- nerabilities. The testbed presents multiple pathways to a hacker invited to attack the testbed. We discuss an implementation of our proposed testbed, subject it to few well-known cyber-attack strategies and analyse the data collected. Our preliminary analysis strengthens the initial argument presented earlier that data col- lected from the testbed can be used to capture patterns in attack strategies deployed by adversaries in enterprise networks. A Testbed To Study Adversarial Cyber-Attack Strategies in Enterprise Networks Conference’17, July 2017, Washington, DC, USA REFERENCES [1] M. A. Ahmad, S. Woodhead, and D. Gan. 2016. The V-network testbed for malware analysis. In 2016 International Conference on Advanced Communication Control and Computing Technologies (ICACCCT). 629–635. https://doi.org/10.1109/ICACCCT. 2016.7831716 [2] Paramvir Bahl, Ranveer Chandra, Albert Greenberg, Srikanth Kandula, David A. Maltz, and Ming Zhang. 2007. Towards Highly Reliable Enterprise Network Services via Inference of Multi-Level Dependencies. In Proceedings of the 2007 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (SIGCOMM ’07). Association for Computing Machinery, New York, NY, USA, 13–24. https://doi.org/10.1145/1282380.1282383 [3] Tracey Caldwell. 2015. Hacktivism goes hardcore. Network Security 2015, 5 (2015), 12–17. https://doi.org/10.1016/S1353-4858(15)30039-8 [4] Kaspersky. [n.d.]. What is a Black-Hat hacker? https://www.kaspersky.com/ resource-center/threats/black-hat-hacker. [5] Lunquan Li, Soranun Jiwasurat, Peng Liu, and George Kesidis. 2005. Emulation of single packet UDP scanning worms in large enterprises. In Proc. 19 International Teletraffic Congress (ITC19), Beijing, China. [6] Sara Peters. [n.d.]. Profile Of A Cybercrime Petty Thief. https: //www.darkreading.com/analytics/threat-intelligence/profile-of-a-cybercrime- petty-thief/d/d-id/1320559. [7] Purplesec. [n.d.]. 2021 Cyber Security Statistics: The Ultimate List Of Stats, Data & Trends. https://purplesec.us/resources/cyber-security-statistics/. [8] Rob Sobers. [n.d.]. 134 Cybersecurity Statistics and Trends for 2021. https: //www.varonis.com/blog/cybersecurity-statistics/.