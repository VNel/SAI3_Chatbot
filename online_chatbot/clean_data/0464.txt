JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 1 Vulnerabilities Analysis and Secure Controlling for Unmanned Aerial System Based on Reactive Synthesis Dong Yang, Wei Dong, Wei Lu, Yanqi Dong, and Sirui Liu Abstract—Complex Cyber-Physical System (CPS) such as Unmanned Aerial System (UAS) got rapid development these years, but also became vulnerable to GPS spoofing, packets injection, buffer-overflow and other malicious attacks. Ensuring the behaviors of UAS always keeping secure no matter how the environment changes, would be a prospective direction for UAS security. This paper aims at introducing a patterns-based framework to describe the security properties of UAS, and presenting a reactive synthesis-based approach to implement the automatic generation of secure UAS controller. First, we study the operating mechanism of UAS and construct a high-level model consisting of actuator and monitor. Besides, we analyze the security threats of UAS from the perspective of hardware, software and cyber physics, and then summarize the corresponding specification patterns of security properties with LTL formulas. With the UAS model and security specification patterns, automatons for controller can be constructed by General Reactivity of Rank 1 (GR(1)) synthesis algorithm, which is a two-player game process between Unmanned Aerial Vehicle (UAV) and its environment. Finally, we experimented under the Ardupilot simulation platform to test the effectiveness of our method. Index Terms—UAS vulnerability, Reactive synthesis, Secure controller, Linear temporal logic. ✦ 1 INTRODUCTION With the rapid development of technologies, people will focus more on the CPS area in the future. Unmanned Aerial System, an Artificial Intelligence based complex CPS, which deeply integrates the technologies of environmental awareness, data analysis, authentication and heterogeneous networks, has already been widely used in different fields. According to the application scenario, UAS can usually be divided into three main categories: military drones, indus- trial drones, and commercial drones. Today, UAS plays an important role in the deployment of cooperative engage- ment, reconnaissance, remote sensing, aerial photography, agroforestry and Smart City service, because of the advan- tages of small-size, low-cost, high-speed, convenience and good flexibility, etc. Along with the increasing development, the security threats of UAS are also increasing. Even with the integra- tion of advanced technologies, these CPSs are still prone to faults due to unpredicted state transitions and external interference. Attackers can implement the attacks through the hardware, software, or network of system, to compro- mise the confidentiality, integrity and availability, such as malicious injection, authentication bypass, GPS spoofing and DDoS attack, etc. For example, the unencrypted real- time video signal transmission of MQ-1 Predator resulted in a video feed interception by Iranian militants in 2009. A GPS spoofing attack was performed by Iranian forces on RQ-170, resulting in a successful capture on American • D. Yang, W. Dong, W. Lu, S. Liu and Y. Dong was with the with School of Computer, National University of Defense Technology, Hunan, China, 410074. E-mail: {yangdong15, wdong, luwei09, d16945, liusirui}@nudt.edu.cn Manuscript received April 19, 2005; revised August 26, 2015. UAV in 2011. The Ground Control Station (GCS) of Creech Air Force Base in Nevada has been infected by a computer virus named “keylogger” in 2011[1]. In recent years, major security conferences and competitions are devoted to the researches regarding attack-defense on products from com- mercial drone manufacturers such as Parrot and DJI, and various vulnerabilities are exposed. Yet, CPS security, especially UAS security is more severe than conventional security. Complex network architectures, flexible physical environment, and excessive access inter- faces, may lead to more vulnerabilities and attack interfaces when manufacturers try to improve the quality of drones. Attackers can exploit the vulnerabilities to cause the sensi- tive data leaked, the system hijacked and even the drones crashed instantly. Reactive synthesis is a methodology about synthesiz- ing a correct-by-construc-tion reactive system automatically, from given formal specifications. The obtained system is usually represented in the form of automaton satisfying the specifications. The input of the automaton can be viewed as the environmental virables from sensors of robots, and the output is the actions performed by the actuators. The synthesis algorithm introduced in this paper is based on the GR(1) game[2]. In this paper, we design a patterns-based framework to describe the security properties of UAS, expand the work in[3] and introduce a novel approach implementing the automatic generation of the secure controller for UAS with GR(1) reactive synthesis. The contributions can be summa- rized as follows: 1) we study the operating mechanism of UAS and abstract a high-level model of UAS with two com- ponents actuator and monitor; 2) we study the vulnerabilities and security properties of UAS, so as to extract the security specification patterns according to our requirements. The arXiv:2411.07741v2 [cs.FL] 1 Jan 2025 JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 2 model and specifications are described in Linear Temporal Logic (LTL)[4]; 3) we implement the automatic generation of the secure controller for UAS with the GR(1) game-based reactive synthesis algorithm applied in multi-UAV systems; 2 PRELIMINARIES LTL [4] is widely used to describe specifications in formal method field. Syntactically, LTL extend propositional logic with the following temporal operators: (next), U(until), (eventually), (globally). Semantically, given an infinite sequence π composed by subsets of atom positions AP and a position i ∈N, π, i |= φ denotes that the LTL formula φ holds at the i-th position of π. To solve general LTL synthesis problems, a necessary two-phase translation will result in a double-exponential state blow-up. To alleviate computational complexity into an acceptable range, a special restriction of LTL called GR(1) specification is taken into consideration [5]. For a system, its GR(1) specification consists of the following elements: • φe i and φs i are propositional logic formulas without temporal operators, which are defined on X and Y respectively. They describe initial conditions of the behaviors of environment and system respectively. • φe t is a conjunction of several subformulas in the form of Ai, where Ai is a boolean formula defined on X ∪Y ∪ X, where X = { x | x ∈X}. φe t limits the relation between the next behaviors of environment and current state. • φs t is a conjunction of several subformulas in the form of Aj, where Aj is a boolean formula defined on X ∪Y ∪ X∪ Y , and Y = { y | y ∈Y }. φs t limits the relation between the next behaviors of the system and current state, as well as the next behaviors of environment. • φe g and φs g are the conjunctions of several subfor- mulas in the form of Bi, where Bi is boolean formula defined on X ∪Y . They describe final goals of environment and system respectively. The formula ϕ = φe g ⇒φs g is called a GR(1) formula [5]. Intuitively speaking, assumptions including φe i , φe t and φe g constrain the possible environments and guarantees in- cluding φs i , φs t and φs g limit the system’s behaviors, so the specification specifies the rules of ri’s behaviors under given environments. The expression ability of GR(1) specification is strictly weaker than LTL (for example, p U q cannot be expressed by the fragment). However, most properties in practical, especially in reactive systems, can be expressed by the restriction [5]. Given a GR(1) specification, the synthesis algorithm to construct an automaton to satisfy the specification can be done in O(n3) time, where n is the scale of the state space [5]. The synthesis algorithm of GR(1) specifications is mainly a process of solving the game between the environment and system[5]. The controller synthesized by the algorithm is represented in the form of an automaton. According to the synthesized controller, when an admissible input sequence that satisfies environment assumptions is given, the discrete path of the system can be acquired, which can guide the system to choose a position to go and activate/deactivate the corresponding actions. 3 THREAT ANALYSIS OF UNMANNED AERIAL SYS- TEM 3.1 System Structure of UAS UAS can be generally divided into two parts of UAV and GCS. GCS can ba a remote controller(RC), smart mobile device, computer or even a military base, which establishes a bidirectional communication with UAV to implement the remote state monitoring and motion controlling. UAV has various types such as fixed wing craft, rotor craft and so on. In addition to being operated remotely by humans, UAV can be autonomous or semi-autonomous too. Autonomous UAV can sence from the environment with active or passive perception system, make a decision based on the real-time mission planning algorithm and command the actuators to execute some specific behaviors to achieve disired goals. According to the function, most UAS consists of 4 layers shown in Fig. 1: • Perception layer. UAV is equipped with a variety of sensors: positioning and navigation is usually implemented by Global Navigation Satellite Sys- tem(GNSS) and Inertial Measurement Unit(IMU), the former for precise positioning and the latter for rel- ative positioning and self-attitude perception; radar and camera are responsible for perceiving the sur- rounding environment and objects; Automatic De- pendent Surveillance-Broadcast(ADS-B) system can broadcast UAV’s flight state and receive from other crafts. Multi-sensor fusion can effectively model its environment and detect sensor faults by checking the characteristics of the state estimates’ statistical properties[6]. • Execution layer. It consists of application sublayer and action sublayer. The onboard control system receives incoming data from perception layer and control layer, and generates appropriate commands to the action sublayer. Action sublayer is actually a low-level and continuous controller for actuators of UAV. It gets the commands and drives the physical actuators to execute the dynamic motions. The cur- rent main control systems are APM and PIXHawk, and the current main control algorithms are Strap- down Inertial Navigation, Kalman filter algorithm and PID algorithm. • Control layer. GCS is the control center of UAS. It focuses on monitoring the flight state, load status and video data of the UAV and displays to the operators. Further more, it can make short term decisions and long term planning based on the control algorithms and send the commands to the execution layer to achieve the flight planning, task scheduling and data management. GCS consists usually of 4 modules of communication, information display, data storage and video playback. • Transmission layer. UAV can construct various net- works with different devices and nodes to accom- JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 3 Transmission layer IMU GPS Magnetometer Radar Camera ADS-B Application sublayer Action sublayer Control layer Groud Control Station …… Internal transmission External transmission Data-flow Control-flow External environment Execution layer Perception layer Fig. 1. System Structure of UAS plish the function of remote controlling, data trans- mission and real-time communication such as air- to-ground(ATG), air-to-air(ATA) and satellite-data links, etc. 3.2 Specification Patterns for UAS UAS vulnerabilities involve extensive fields, such as sense, execution, control and data transmission. We design a pattern-based framework to describe their safety/security properties. With the framework we can synthesize the corresponding secure controller against certain threats. A specification pattern consists of 5 sections [7]: • Input is the userdefined proposition that provide the information of the environment and the UAS, namely, the interface between real world and the abstract model of UAS. In a real control software of UAS (e.g., Ardupilot), the input can be the events from the flight logfiles. • Property is the requirements of UAS that restrain the behaviors of system, usually expressed in shall/shall not statements. • Specification is the formal description of the proper- ties in LTL/MTL formulas. • Output is the output of monitor generated by the property specification, can be used as the input of environment constraint (φe) of the GR(1) systhesizer. • Countermeasure is the set of actions UAS should take when the properties are violated, can be used as the output of system constraint (φs) of the GR(1) systhesizer. Therefore, we analyze the threats and summarize the specification patterns for their corresponding properties: we introduce one possible countermeasure and introduce its property specification based on the protective mechanism. The definitions and descriptions of input and output inter- faces of UAS are shown in Tab. 1. 3.3 Security Properties of UAS According to the attack vector in Fig. 2, we classify the UAS security threats to 3 categories, 13 threats: UAS Security Vulnerabilities Hardware threats Software Threats Cyber-physical Threats Component replacement/extension Firmware files modification Sensor destruction Buffer overflow Malicious injection Authentication bypass Sensor jamming Control-flow Data-flow Access point attack Signal traffic blocking Control commands spoofing Swarm communication attack Sensor spoofing Replay attack Fig. 2. UAS Security Vulnerabilities JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 4 TABLE 1 Definition and description of input , output and countermeasure interface of UAS Interface Type Name Description Input ComponentFingerprint Device fingerprint identification of internal physical components in the system UserID The state of a user’s identity to access the system, e.g.,account password, dongle, etc. FusionEstimation System state estimation based on data fusion mechanism CmdGet The system receives a control instruction ParmLength The state of the length of each field in the instruction CPUuse The state of CPU usage in the system MEMuse The state of memory usage in the system BatLevel The state of battery consumption in the system Mode The system is in a specific mode state AbnormalCmd The system has received an abnormal control instruction TakeOff UAS receives the take-off command TAKEOFF UAS is in TAKEOFF MODE landon UAS receives the land-on command LandOn UAV has completed landing LANDON UAS is in LANDON MODE DeauthCmd The system receives the massive disconnecting requests repeatly Timer System timer that can be used to mark states such as reception frequency and occupancy time NonNaviProcess The state of non-navigational processes running on the CPU in the system AbnormalBehavior The state of abnormal behaviors in the system NodeID Identification of a node in multi-UAV systems Authentication User permission state of a node in multi-UAV systems V ideoGet The new video data which system receives MetaData Matching state of attribute information such as metadata in video data CrossData Matching state of multi-data cross validation in video data RiskyCmd The system has received an risky control coommand RiskyBehavior UAV exhibits risky behavior GPSRecv GPS sensor receives correct data from the satellites Direction The direction of electronic compass should comply with the GPS data Doppler The doppler shift of inertial navigation sensor should comply with the GPS data Output UnauthorizedComponent Unauthorized component has been detected UnauthorizedID Unauthorized ID has been detected SensorFault Sensor fault has been detected BUFOverFlow Buffer overflow has been detected MalInject Malicous injectection attack has been detected AuthBypass Authorization bypass has been detected SensorJam Sensor jamming has been detected APAttack Access point attack has been detected SigTraBlk Signal traffic blocking has been detected CtrlCmdSpoofing Control commands spoofing has been detected SwarmComAttack Swarm communication attack has been detected SensorSpoofing Sensor spoofing has been detected ReplayAttack Replay attack has been detected DangerousClimbRate Dangerous climb rate has been detected DosAttack Dos attack has been detected CtrlCmdSpoof Control commands spoofing has been detected GpsSpoofing Sensor spoofing has been detected LowBattery The battery voltage is low OverHeight The flight altitude of the UAV is too high Countermeasure RecognizeDeny The system refuses to recognize the physical component ModifyDeny The system rejects this modification CmdDeny The system refuses to execute the control command ProcessInterrupt The system interrupts the running process RTL The system executes the RTL command and return to launch position MessageDeny The system denies to receive the message Hover The system executes the HOVER command and hover in the air V ideoDeny The system ground station denies to receive the video data Landing The UAV lands on the landing field EmergLanding The UAV encounters emergency and lands on the landing field DesendAndDrop UAV descends and airdrops the supplies JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 5 3.3.1 Hardware Threats Attackers can access to the physical components or local system of UAS, through direct/indirect contact, so as to im- plement the attacks of component replacement/extension, system code modification/injection or external sensor dam- age, etc. The damage due to hardware threats depends on the type of ports exposed[8]. 1. Component replacement/extension. Attackers can connect to UAS and replace some specific components. Malicious components can damage, interfere or even fabricate the internal data and its transmission in the system, so as to affect the performance of the UAS. The device can also be extended by malicious components. For example, during flight network sniffers can be installed on UAV to eavesdrop on and collect the packets in the system which can result in the information leakage. TABLE 2 Specification Patterns P1: Component replacement/extension Name Fingerprint authorization Input ComponentFingerprint TakeOff LandOn Property The component without correct fingerprint shall not be recognized by the system during flight Specification □(TakeOff ⇒(¬ComponentFingerprint U LandOn)) Output UnauthorizedComponent Countermeasure AuthorizeDeny 2. Firmware files modification. There are configuration files inside intelligent unmanned systems such as UAS to restrain system in case of illegal behaviors. These files are usually stored statically in the System on Chip (SoC) without any encryption. Attackers can easily access and modify these firmware files to crack the functions for security protec- tion and implement some substantive attacks further. For example, most commercial UASs would have built-in con- figuration files about the restrictions of No-fly zone and height limit. But hackers can modify the configuration files and system parameters, or fabricate the GPS coordinates with cracking module to eliminate the restrictions. Drones without restrictions can fly to anywhere and it is very dangerous. TABLE 3 Specification Patterns P2: Firmware fles modifcation Name Identity authorization Input UserID TakeOff LandOn Property The firmware files and code shall not be modified by unauthorized user during flight. Specification □(TakeOff ⇒(¬UserID U LandOn)) Output UnauthorizedID Countermeasure AuthorizeDeny 3. Sensor destruction. Light Detection And Ranging (Li- DAR) and camera are optical-based external sensors of UAS. They are usually used for the traffic target recognition and distance measurement based on the optical imaging princi- ple. System can accomplish the 3D modeling and display for its surrounding environment based on the data from these sensors, and then make decisions and planning. Jonathan Petit et al.[9] present a physical attack on the camera MobilEye C2-270 deployed on an automated vehicle(AV). They emit light of different types into the camera to fully or partially blind it, so as to trigger the system failure of recognizing objects behind the light. He et al.[10] introduce a physical attack on the Inertial Measurement Unit (IMU) of UAS by ultrasonic waves, which is a typical side-channel attack. TABLE 4 Specification Patterns P3 :Sensor destruction Name Sensor faults detection Input FusionEstimation TakeOff LandOn Property The state estimation from the sensor fusion algorithm shall not be wrong during flight[6]. Specification □(TakeOff ⇒(¬FusionEstimation U LandOn)) Output SensorFault Countermeasure RTL 3.3.2 Software Threats Flight control softwares such as Ardupilot and APM, usu- ally have vulnerabilities about not only general software applications but also specific aerial systems. Attackers can exploit these vulnerabilities to implement the attacks of buffer overflow, malware injection, authorization bypass or sensor-data jamming. 4. Buffer overflow. Buffer overflow is a very common and dangerous vulnerability for programs. Because there is the existing flaw of no limitation or inspection for the inputs in the target program, attackers can construct some malformed inputs to trigger an anomaly in program. When being written to the buffer, the data will past the boundary of buffer and overwrite adjacent memory locations, this may cause the crash or erratic behaviors of program. Michael Hooper et al.[11] implemented a buffer overflow attack on the Parrot Bebop 2. This system utilizes the ARDiscovery protocol to establish a open WI-FI connection between drone and controller(smartphone), and send messages with the JSON records. The Parrot developers seems to have never consider the inspection for the length of each field in the JSON records. So the authors killed the navigational appli- cation of the UAV by increasing the character length of the first field in the command sent to the drone, and the UAV crashed down to the ground immediately. 5. Malicious injection. Such attack can aim at UAV and GCS, respectively: Injection to GCS can be the programs such as virus, trojan and malware, etc., injected into the computer or other control devices. When running in the system, it will the trigger the anomaly, data leakage or lossing control. Injection to UAV can be mainly the control commands. Due to the logic vulnerabilities, some control softwares fail to verify the validation of the commands and get hijacked. JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 6 TABLE 5 Specification Patterns P4 :Buffer overflow Name Parameters checking Input CmdGet ParmLength TakeOff LandOn Property The length of each characters in the command shall not be over the limit λmax during flight. Specification □(TakeOff ⇒(CmdGet < λmax U LandOn)) Output BUFOverFlow Countermeasure CmdDeny TABLE 6 Specification Patterns P5 :Malicious injection Name System performance monitoring Input CPUuse MEMuse Ibatt TakeOff LandOn Property The utilization of CPU and memory shall not more than α%, and battery current shall not be more than n A for 10 time steps during flight. Specification □(TakeOff ⇒((CPUuse < a% ∧MEMuse < a% ∧¬□[0,10]Ibatt > nA) U LandOn)) Output MalInject Countermeasure ProcessInterrupt 6. Authorization bypass. As one of the Internet of Things(IoT), UAS support numbers of different interfaces and services for users. The authorization of the identity becomes particularly important for the system. Authoriza- tion can prevent the invalid access, because only the au- thorized users are allowed to access to the system with the appropriate permissions. But lots of UASs do not perform well in the protection of access permission. None or weak protection will help attackers to bypass the authorization and control the system directly. Rahul Sasi[12] showed his drone backdoor for the Parrot AR Drone 2 in 2015. It can disconnect the GCS from UAV and establish a reverse TCP connection between the UAV and fake GCS(attacker), to actually control and hijack the UAV. TABLE 7 Specification Patterns P6 : Authorization bypass Name Command verification Input Mode AbnormalCmd TakeOff LandOn Property UAV shall not execute any abnormal commands in a specific mode during flight. Specification □(TakeOff ⇒(¬AbnormalCmd U LandOn)) Output AuthBypass Countermeasure CmdDeny 7. Sensor jamming. Data from the sensors is always correct by default, but it is not true in fact. Although manufacturers can verify the robustness and resilience of the environment modeling with the mechanisms of sensors fusion and redun- dancy, there is still a attack surface exposed to the hackers. Alan Kim et al.[13] introduce a potential attack: attackers can interfere the analog signals or change the sampling rate of the digital signals that can generate "dirty data" to influence the system performance. TABLE 8 Specification Patterns P7 :Sensor jamming Name Sensor jamming detection Input FusionEstimation TakeOff LandOn Property The sensor error shall not last more than n time steps during flight. Specification □(TakeOff ⇒((SensorError U[0,n] SensorData)) U LandOn)) Output SensorJam Countermeasure RTL 3.3.3 Cyber-Physical Threats UAS communication can be radio communication, wire- less network communication and satellite communication according to the bandwith. The radio communication and wireless network communication are within the visual range(WVR), and satellite communication is beyond the visual range(BVR). Information transmission of UAS can be control-flow and data-flow. For control-flow, attackers can implement the attack of access-point(AP) intrusion, signal traffic-block, control-signal spoofing. For data-flow, attackers can implement the sensor-data spoofing attack and replay attack. • Control-flow 8. Access point attack. Typical access point attacks include man-in-the-middle(MITM) attack and Deauthentication(De- Auth) attack. Most communication protocols for UAS(MAVLink, for instance) are designed without sufficient security protection. MITM attack connects to the network and intercepts the packets between GCS and UAV via the ARP poisoning or DNS spoofing, and then resend the tampered packets to the APs. Attacked system has no awareness of the attacker at all in the meantime. De-Auth attack is one of DoS attacks and aims at sending the massive disconnecting requests repeatly. If it works, attackers can connect to the AP and control the system. Samy Kamkar[14] successfully implemented a De-Auth attack on the AR.Drone 2 with his drone-hijacking software called SkyJack in 2013. TABLE 9 Specification Patterns P8 :Access point attack Name Command checking Input TakeOff DeauthCmd TakeOff LandOn Property UAV shall not receive the De-auth command for at most 5 time steps during flight. Specification □(TakeOff ⇒(¬□[0,5]DeauthCmd U LandOn)) Output APAttack Countermeasure CmdDeny 9. Signal Traffc Blocking. Signal analysis and processing is restricted to the limited resources in the embedded systems JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 7 such as UAS. Massive and incessant data sent to the UAS will easily overwhelm and exhaust the resources. DoS or DDoS attack for UAS is fatal and hard to defend against. Because the packets sent to the UAS are valid and can consume too much resources, system will get occupied and fail to respond to the normal requests. Gabriel Vasconcelos et al.[15] perform an experiment to evaluate the impact of DoS attacks on the AR.Drone 2.0 with three attack tools: LOIC, Netwox, and Hping3. Directional radio frequency interference is a simple way to jamming the target UAS by sending some signals with specific direction, power, and frequency. TABLE 10 Specification pattern P9 :Signal traffc blocking Name Process monitoring Input Guided AbnormalCmd CPUuse Property UAV shall not receive abnormal commands for at most 10 time steps and the CPU usage of this kind of command shall not always be over α% for at most 5 time steps in GUIDED mode. Specification □(Guided ⇒(¬□[0,5]AbnormalCmd)∧ (AbnormalCmd ⇒♢[0,5]CPUuse < α%))) Output DosAttack Countermeasure CmdDeny 10. Control Commands Spoofing. As shown in Fig. 11, this attack often occurs due to existing logic flaws or weak authorization. For example, the DJI Phantom III has been totally hijacked by hackers in the GeekPwn 2015. Hackers cracked the signals of the chip BK5811 boarded on the RC controller of Phantom 3, and then exploited the chip’s design vulnerabilities to generate spurious commands. TABLE 11 Specification pattern P10 :Control commands spoofing Name Risky behaviors detection Input Guided RiskyCmd RiskyBehavior Property Risky behavior shall not occur in 5 time steps after UAV receive a risky command in Guided mode. Specification □(Guided ∧(RiskyCmd ⇒♢[0,5] ¬RiskyBehavior)) Output CtrlCmdSpoofing Countermeasure RTL 11. Swarm communication attack. The most security issue for the multi-UAV systems such as formation and swarm is the security of Flying Ad-hoc Networks(FANETs). Com- munication link in the FANETs is essential and complicated, and the heterogeneous networks between different subsys- tems may also bring more security vulnerabilities. Ilker Bekmezci et al.[16] made a comprehensive study on security of FANETs in 2016, and Nicolas Lechevin et al.[17] introduce the security threats from the physical layer, data-link layer and network layer of multi-UAV systems. • Data-flow TABLE 12 Specification Patterns P11 :Swarm communication attack Name Mutual authentication Input TakeOff MalMessage LandOn Property The message from the node marked as malicious node shall not be accepted[18] during flight. Specification □(TakeOff ⇒(¬MalMessage U LandOn)) Output SwarmComAttack Countermeasure MessageDeny 12. Sensor Spoofing Data from sensors is the most impor- tant input for the UAS. Besides the control-flow, attackers can also interfere with or spoof sensors data to affect the system performance. For example, GPS spoofing is the most common attack and can be autonomous spoofing and forwarding spoofing. Many cases are studied in [1]. Countermeasures could be the mechanism of verifying the difference between multiple sensors about (1) motion-speed (e.g., the coordinates of UAV cannot change from Beijing to NewYork in a few seconds), and (2)time of GPS-time and NTP-time [14] (3)directions of GPS and electronic compass, etc. TABLE 13 Specification pattern P12 :Sensor spoofing Name Sensor faults detection Input TakeOff GPSRecv SubFrame Direction Doppler LandOn Property During flight, a GPS signal received shall keep consistent with the results of arrival direction and doppler shift of inertial navigation sensor Specification □(TakeOff ⇒(GPSRecv ∧Direction ∧Doppler) U LandOn)) Output GPSSpoofing Countermeasure Hover 13. Replay attack. Video feedback from UAV to GCS can be transmitted in several ways. Attackers usually intercept, modify and forward the video data to confuse the GCS. A presentation by Aaron Luo at DEFCON 2016 portrayed a video replay attack to DJI Phantom III, that the video displayed on the screen of mobile controller was replaced by a picture. TABLE 14 Specification Patterns P13 :Replay attack Name Information validation Input V ideoGet MetaData CrossData Property GCS shall not accept the wrong video data. Specification □(V ideoGet ∧(¬MetaData ∨¬CrossData)) Output ReplayAttack Countermeasure V ideoDeny JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 8 3.3.4 Safety properties of UAS Unlike security threats that mainly caused by attackers, safety threats are mainly from the environment and UAV itself, such as battery consumption, maximum flight speed, system memory, CPU occupancy and obstacle avoiding etc. For example, to prevent UAV from being unable to return due to low battery, we can set the minimum battery level of the UAV to 50 % during flight. TABLE 15 Specification pattern P14 :Safety constraint Name Low Battery Input Takeoff Battery Property During flight, the minimum battery level shall not be less than 50 % . Specification □(Takeoff ⇒(Battery > 50%)) Output LowBattery Countermeasure RTL 3.3.5 Task properties of UAS We can also use our UAV monitor property pattern to design some simple tasks in the form of Condition →Action (i.e., some action should be taken under certain condition). For example, UAV airdrops to the injured at high altitude may cause supplies to deviate from the target point, thus UAV height shall not be over 30 m when finding the injured. TABLE 16 Specification pattern P15 :Task constraint Name Minimum altitude for UAV airdrop Input Injured Flying Height Property The UAV height shall not be over 30 m when finding the injured in the air. Specification □(Flying ∧Injured ⇒(Height < 30m)) Output OverHeight Countermeasure DesendAndDrop 4 SECURE CONTROLLER FOR UAS UAS consists of UAV and GCS, so we consider UAV as robot and GCS as environment in this paper. The communication between UAV and GCS can be abstracted into the process of robot sensing data from its environment. For Positions modeling, in this paper we specify the workspace in Fig.3. It is shown that there are 6 zones partitioned in the workspace: StartZone, p1, p2, p3, p4 and p5. For Actions modeling, in order to increase the reusability of modules, we propose to separate the functionality and se- curity of UAV and divide UAV actions into two components: actuator and monitor, which are loosely coupled. Actuator focuses on satisfying the functional requirements of UAS, by executing the dynamic actions. We assume that UAV has 5 action modes mapping to the corresponding real flight operations of UAV. Monitor mainly verifies the real-time execution of UAV satisfying the given security properties or not, by analyzing the specific data. So we assume that UAV has a action mode MONITOR. The function of these action modes are shown in TABLE 17. For Sensors modeling, the sensors of monitor and actuator would be discussed respectively. Here We take the control commands spoofing attack as an example: StartZone P1 P4 P3 P2 StartZone P1 P4 P3 P2 No-fly Zone P5 Fig. 3. The workspace of UAS model Example 1:UAV takes off from StartZone and patrols from R1 to R5 in sequence as shown in Fig.3. We extend the specification pattern 10 as shown in R. When abnormal instructions such as modifying parameters or clearing way- points are sent in specific flight modes and cause the abnor- mal behavior of the system, this scenario can be regarded as an control commands spoofing attack. In order to detect this attack, we monitor the flight coordinate range and other data of the UAS in AUTO mode as inputs. If the UAV receives the waypoints-clearing command and replan the waypoints, resulting in the flight trajectory deviating from the specified area into the no-fly zone, it can be considered that the UAV are under the control commands spoofing attack. Countermeasures could be flight mode changing to RTL mode. We can describe the security property R and LTL specification like this: R: During flight, if UAV is in AUTO mode, receives waypoints-clearing commands, replans new way- points and flys into the no-fly zone, it encounters control commands spoofing attack. □((WPclearcmd ∧armed ∧mode_auto ∧NewWP ∧NoflyZone) ⇒⃝WPclearAttack) TABLE 17 Action Modes of UAV Modes Function Description TAKEOFF UAV must take off from the zone StartZone LAND UAV must land at the zone StartZone AUTO UAV must cruise around the workspace in order from p1 to p5 RTL UAV must return to the launch site(StartZone) MONITOR When detecting a property violation, monitor must force actuator to defend against the attack For Example 1,we should first define propositions sets are shown in TABLE 18, then we can we describe the motion planning and security specification R of actuator and monitor as follows, detailed specifications are given in Fig. 19. Each JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 9 Fig. 4. No-fly zone and simulation of UAS Fig. 5. The simulation of secured UAS model component of UAV can be seen as part of the other one’s environment, and obtain the dynamic information from its sensors to achieve the purpose of communication. TABLE 18 Propositions Set for UAS Model Set Propositions Xa TAKEOFF, AUTO, Mnt_WPclearAttack Xm Act_armed, Act_mode_auto, WPclearcmd, NewWP, NoflyZone Ya StartZone, p1, . . . , p5, armed, mode_auto, mode_RTL Ym WPclearAttack 1) Actuator cannot be in auto and RTL mode simultane- ously. 2) Actuator must arm throttle when it receives the TAKEOFF command and is not armed. 3) Actuator must change to auto mode when it receives the AUTO command and is not armed in fly zone. 4) When sensing the alarm WPclearAttack from monitor, actuator must turn to mode RTL. 5) Monitor always monitors the system. If a flying UAV in auto mode receives waypoints-clearing command, changes waypoints and enters no-fly zone, monitor must send WPclearAttack alarm and force actuator to defend against the attack. Given the motion planning and security specification mentioned above, automatons for the controller of actuator and monitor will be generated respectively. These compo- nents implement the game process with environment co- ordinately to find paths satisfying the goal ϕ no matter how the environment changes within the φe t. We finally implement the translation from high-level requirements to the practical automatons with specific φi, φt and φg. Details will be discussed in Section 5. 5 IMPLEMENT AND EXPERIMENT We implement the tasks translation and automatons genera- tion for the given motion planning and security requirement in Example 1 with GR(1) synthesis algorithm. Here we denote actuator by φa and monitor by φm. As shown in Tab. 19, first of all, we should specify the initial states of UAS (φs,a i and φs,m i ) and its environment (φe i ).Then the planning are translated into φt Finally, the goal of UAV is flying according to the action mode, and always satisfy the security properties. This requirement is translated into φs g. We test the effectiveness of generated automatons in Example 1 on Ardupilot platform and evaluate the result as follows: Fig.4 shows the no-fly zone on the map and console screen of simulation recording the status of UAV during JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 10 TABLE 19 Specifications for UAV. Categories Specifications φe i ¬TAKEOFF, ¬armed, ¬AUTO, ¬WPclearcmd, ¬NewWP, ¬NoflyZone, ¬Mnt_WPclearAttack φs,a i StartZone, ¬armed, ¬mode_auto, ¬mode_RTL φs,m i ¬WPclearAttack φs,a t □¬(mode_auto ∧mode_RTL), □((TAKEOFF ∧¬armed) ⇒⃝armed), □((AUTO ∧armed ∧¬NoflyZone) ⇒⃝mode_auto), □(Mnt_WPclearAttack ⇒⃝mode_RTL) φs,m t □((WPclearcmd ∧Act_armed ∧Act_mode_auto∧ NewWP ∧NoflyZone) ⇒⃝WPclearAttack) φg □♢(P1), □♢(P2), □♢(P3), □♢(P4), □♢(P5) the experiment, the UAV is taking off from StartZone and patrolling from P1 toP5. In Fig.5, we simulate the waypoints clearing attack and lead the UAV to enter the no-fly zone. Our secure controller detects this attack and forces the UAV to return to the launch position. In this experiment, we automatically generate a robot controller in the form of automaton with LTLMoP platform. Of course it works well in other modes and attack scenarios, too. This mechanism undoubtedly ensures UAV running in a given environment and protect it from malicious attacks. 6 RELATED WORK In recent years, commercial drones and smart cars suffered from many malicious attacks and resulted in several traffic accidents. So the core issue in this paper is the automatic generation of UAS security behaviors, and study on UAS vulnerabilities and corresponding attack chains become essential and fundamental. Most UASs consist of several components: control unit, dynamics module, navigation module, sensor module, communication module and so on. The work in [19] introduced Confidentiality, Integrity and Availability from the perspective of information security. Confidentiality means that the system forbids illegal access- ing or interception of data; Integrity is the property that protects the system from jamming by malicious data; Avail- ability refers to a timely response for legitimate requests. Vrizlynn[8] and Leela[1] divided attack vector into physical- attack and remote-attack. Regarding this, UAS architecture can be divided into 4 layers based on CPS architecture: sensing layer, execution layer, control layer and data trans- mission layer. So we combine the security issues with UAS architecture, and classify UAS security vulnerabilities to the categories of hardware, software and Cyber-physical layer. Runtime verification is a technology that checks if an execution of system satisfying the given properties[20]. The process logging and analyzing the finite trajectory of the program and verifies whether it satisfies the properties, with a monitor of properties. The monitor can be online or offline, and constructed by the conversion algorithm which converts a specification describing properties into an equivalent automaton. In [21], the authors implement the RV monitor on UAS using LTL formulas to describe the security requirements, with Bayesian Networks and FPGA hardware platform. Reactive Synthesis for logical specifications is considered a challenging problem[2] and got effective progress with the development of Temporal Logic and especially LTL, trans- lating the specifications to automaton. Due to the double- exponential time complexity, Roderick Bloem[2] proposed a game-based synthesis algorithm with GR(1) formulas, which address the problem of exponential explosion by segmenting LTL specifications into the sets of assumptions and guarantees. Based on GR(1) games, the algorithm can extract a winning strategy for the system. After the synthesis of GR(1) formula is proposed, it is applied in many fields, such as synthesis for specification patterns [22], executable PLC code synthesis, controller synthesis for robotics [23], [24], etc. Our work in this paper draws on the theory about RV, and constructs a model of UAS with actuator and runtime monitor by the reactive synthesis algorithm. 7 CONCLUSION In this paper, we have surveyed security vulnerabilities of UAS associated with the hardware, software and cyber- physical layer, and introduce a specification patterns-based framework to extract the security properties for the threats with LTL formulas. Then we propose an approach based on reactive synthesis to construct a secure UAS controller automatically. GPS attack is one of the most severe threats in UAS applications, unencrypted data and unsecured trans- mission incurring lots of troubles. By abstracting a model of UAS, we constructing a controller executing specific motions and a runtime monitor detecting the property vi- olations. The model described by LTL specifications can be translated to a strategy automaton by synthesis algorithm. The automatic generation is intuitively a two-player game between UAV and environment, and proved to be an ef- fective method to protect UAS from attacks such as GPS spoofing. In the future, we are planning to use the state-of-the-art Spectra tools [25] to design more complex UAV tasks and analyze more security requirements, and make an imple- mentation on the real UAS platform such as Ardupilot. REFERENCES [1] C. G. L. Krishna and R. R. Murphy, “A review on cybersecurity vulnerabilities for unmanned aerial vehicles,” in 2017 IEEE Inter- national Symposium on Safety, Security and Rescue Robotics (SSRR), Oct 2017, pp. 194–199. [2] R. Bloem, B. Jobstmann, N. Piterman, A. Pnueli, and Y. Sa’ar, “Synthesis of reactive(1) designs,” J. Comput. Syst. Sci., vol. 78, no. 3, pp. 911–938, 2012. [3] H. Kress-Gazit, G. E. Fainekos, and G. J. Pappas, “Temporal-logic- based reactive mission and motion planning,” IEEE Transactions on Robotics, vol. 25, no. 6, pp. 1370–1381, Dec 2009. [4] E. A. EMERSON, “Chapter 16 - temporal and modal logic,” in For- mal Models and Semantics, ser. Handbook of Theoretical Computer Science, J. V. LEEUWEN, Ed. Amsterdam: Elsevier, 1990, pp. 995 – 1072. [5] N. Piterman, A. Pnueli, and Y. Sa’ar, “Synthesis of reactive(1) designs,” in Verification, Model Checking, and Abstract Interpretation, E. A. Emerson and K. S. Namjoshi, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2006, pp. 364–380. JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015 11 [6] W. Liu, J. Wei, M. Liang, Y. Cao, and I. Hwang, “Multi-sensor fusion and fault detection using hybrid estimation for air traffic surveillance,” IEEE Transactions on Aerospace and Electronic Systems, vol. 49, no. 4, pp. 2323–2339, 2013. [7] W. Lu, S. Shu, R. Shi, R. Li, and W. Dong, “Synthesizing secure reactive controller for unmanned aerial system,” in 2019 6th In- ternational Conference on Dependable Systems and Their Applications (DSA), 2020. [8] V. L. L. Thing and J. Wu, “Autonomous vehicle security: A taxonomy of attacks and defences,” in 2016 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData), Dec 2016, pp. 164–170. [9] J. Petit, B. Stottelaar, M. Feiri, and F. Kargl, “Remote attacks on automated vehicles sensors: Experiments on camera and lidar,” Black Hat Europe, vol. 11, p. 2015, 2015. [10] H. daojing, D. Xiao, Q. Yinrong, Z. Yaokang, F. Qiang, and L. Wang, “A survey on cyber security of unmanned aerial vehi- cles,” Chinese Journal of Computers, vol. 42, no. 05, pp. 1076–1094, 2019. [11] M. Hooper, Y. Tian, R. Zhou, B. Cao, A. P. Lauf, L. Watkins, W. H. Robinson, and W. Alexis, “Securing commercial wifi-based uavs from common security attacks,” in MILCOM 2016 - 2016 IEEE Military Communications Conference, Nov 2016, pp. 1213–1218. [12] R. Sasi, “Maldrone the first backdoor for drones,” Fb1h2s aka Rahul Sasi’s Blog, 2015. [13] A. Kim, B. Wampler, J. Goppert, I. Hwang, and H. Aldridge, “Cy- ber attack vulnerabilities analysis for unmanned aerial vehicles,” in Infotech@ Aerospace 2012, 2012, p. 2438. [14] V. Dey, V. Pudi, A. Chattopadhyay, and Y. Elovici, “Security vulnerabilities of unmanned aerial vehicles and countermeasures: An experimental study,” in 2018 31st International Conference on VLSI Design and 2018 17th International Conference on Embedded Systems (VLSID). IEEE, 2018, pp. 398–403. [15] G. Vasconcelos, G. Carrijo, R. Miani, J. Souza, and V. Guizilini, “The impact of dos attacks on the ar. drone 2.0,” in 2016 XIII Latin American Robotics Symposium and IV Brazilian Robotics Symposium (LARS/SBR). IEEE, 2016, pp. 127–132. [16] ˙I. Bekmezci, E. ¸Sentürk, and T. Türker, “Security issues in flying ad-hoc networks (fanets),” Journal of Aeronautics and Space Tech- nologies, vol. 9, no. 2, pp. 13–21, 2016. [17] N. Léchevin, C. A. Rabbath, and P. Maupin, “Health monitoring of a drone formation affected by a corrupted control system,” Handbook of Unmanned Aerial Vehicles, pp. 1703–1719, 2015. [18] E. Walia, V. Bhatia, and G. Kaur, “Detection of malicious nodes in flying ad-hoc networks (fanet),” International Journal of Electronics and Communication Engineering, vol. 5, pp. 6–12, 09 2018. [19] A. Y. Javaid, W. Sun, V. K. Devabhaktuni, and M. Alam, “Cyber security threat analysis and modeling of an unmanned aerial ve- hicle system,” in 2012 IEEE Conference on Technologies for Homeland Security (HST), Nov 2012, pp. 585–590. [20] M. Leucker and C. Schallhart, “A brief account of runtime veri- fication,” Journal of Logic and Algebraic Programming, vol. 78, pp. 293–303, 05 2009. [21] P. Moosbrugger, K. Y. Rozier, and J. Schumann, “R2u2: monitoring and diagnosis of security threats for unmanned aerial systems,” Formal Methods in System Design, vol. 51, no. 1, pp. 31–61, Aug 2017. [Online]. Available: https: //doi.org/10.1007/s10703-017-0275-x [22] S. Maoz and J. O. Ringert, “Gr (1) synthesis for ltl specification pat- terns,” in Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. ACM, 2015, pp. 96–106. [23] H. Shi, R. Li, W. Liu, W. Dong, and G. Zhou, “Iterative controller synthesis for multirobot system,” IEEE Transactions on Reliability, vol. PP, no. 99, pp. 1–12, 2020. [24] H. Shi, W. Dong, R. Li, and W. Liu, “Controller resynthesis for multirobot system when changes happen,” Computer, vol. 53, no. 12, pp. 69–79, 2020. [25] S. Maoz and J. O. Ringert, “Spectra: A specification language for reactive systems,” 2019.