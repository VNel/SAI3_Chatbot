Ensemble Defense System: A Hybrid IDS Approach for Effective Cyber Threat Detection Sarah Alharbi Department of Electrical and Computer Engineering University of Delaware Newark, DE sarahalh@udel.edu Arshiya Khan Department of Electrical and Computer Engineering University of Delaware Newark, DE arshiyak@udel.edu Abstract—Sophisticated cyber attacks present significant chal- lenges for organizations in detecting and preventing such threats. To address this critical need for advanced defense mechanisms, we propose an Ensemble Defense System (EDS). An EDS is a cybersecurity framework aggregating multiple security tools designed to monitor and alert an organization during cyber attacks. The proposed EDS leverages a comprehensive range of Intrusion Detection System (IDS) capabilities by introducing a hybrid of signature-based IDS and anomaly-based IDS tools. It also incorporates Elasticsearch, an open-source Security Infor- mation and Event Management (SIEM) tool, to facilitate data analysis and interactive visualization of alerts generated from IDSs. The effectiveness of the EDS is evaluated through a payload from a bash script that executes various attacks, including port scanning, privilege escalation, and Denial-of-Service (DoS). The evaluation demonstrates the EDS’s ability to detect diverse cyber attacks. Index Terms—Ensemble Defense Systems, network security, hybrid IDS, Security Information and Event Management (SIEM) I. INTRODUCTION Organizations today are encountered with threats from cybercriminals who continuously develop sophisticated attack techniques, targeting vulnerabilities within network systems and compromising sensitive data. Consequently, robust and thorough defense mechanisms have become imperative to ensure organizations’ security in the face of these threats. The Ensemble Defense System (EDS) is at the forefront of cybersecurity strategies. EDS is a security implementation strategy that uses multiple layers of defense mechanisms and security tools to protect a network of machines from multifarious threats and attacks [1]. An integral component of this EDS is the Intrusion De- tection System (IDS). IDS analyzes network traffic to detect potential security breaches and produces logs corresponding to those activities [2]. An analyst can examine these logs and determine the next course of action. The analyst performs a variety of analytical and statistical operations to examine these logs. These may include charts and graphs. To enable these analyses, EDS provides the ability to compile and visualize these logs with the help of a Security Information and Event Management (SIEM) tool. This makes SIEM another very crucial component of the EDS. IDS can be categorized into two primary types: signature- based and anomaly-based. Signature-based IDS relies on identifying known attack patterns and malicious signatures to generate alerts or take preventive actions [3]. However, this approach often struggles to keep up with the rapid evolution of threats as it relies on predefined signatures. Another approach employed by organizations to bolster their security is anomaly-based IDS. This approach analyzes network traffic to establish a baseline of normal behavior and then detects any deviations from the baseline as an indication of potential security risk [4]. Anomaly-based IDS offers the capability to detect previously unknown threats. Nevertheless, the anomaly-based detection approach is highly susceptible to generating many false positives and can lead to computational burden [5]. Due to the aforementioned limitations of these approaches, a hybrid-based IDS approach has gained prominence. This approach combines the strengths of both signature-based and anomaly-based IDS techniques [6]. The combination of both these approaches provides a more comprehensive and robust defensive framework. Multiple research studies [6]–[8] have suggested that a hybrid-based IDS can achieve high detection rates while keeping false positives at a low level. Therefore, our research focuses on implementing a hybrid IDS framework within the EDS. II. RELATED WORK In recent years, several studies have explored the integration of IDS and SIEM. Negoita and Carabas [9] focused on enhancing security by integrating IDS with Machine Learning (ML) techniques using Elasticsearch. They used Snort [10] as IDS and leveraged Elasticsearch’s built-in machine-learning framework for attack detection [11]. Their study highlighted limitations in Elasticsearch’s built-in ML jobs, such as manual configuration and difficulty detecting sophisticated attacks. Priambodo et al. [12] introduced an integration approach to enhance work-from-home network security. This approach combines Wireguard [13], Suricata [14] (an open-source ID- S/IPS), and ELK (Elasticsearch [15], Logstash [16], and Kibana [17]). To evaluate the system’s effectiveness, they gen- erated port scanning attacks using Nmap [18]. The detection of port scans and exploits was achieved through Suricata. The arXiv:2401.03491v1 [cs.CR] 7 Jan 2024 Kibana tool in the ELK server provided data log visualization for security hardening. Esseghira et al. [19] introduced the Aker security platform, which integrated IDS and SIEM functionalities and focused on analyzing encrypted network traffic. They used Suricata and Zeek [20] as IDS, while Elasticsearch served as the SIEM sys- tem. They studied the growing prevalence of encrypted traffic and employed a decision-tree-based approach within Aker’s threat investigation module. They assessed the effectiveness of Aker using User Acceptance Tests (UAT). Muhammad et al. [21] proposed using the ELK stack as an SIEM, Zeek as an IDS, and Slips [22] as a machine-learning analysis tool to build an integrated system. Their approach involved utilizing Slips for machine learning analysis of Zeek logs and forwarding the generated alerts to the ELK stack. They conducted simulations of DoS attacks to evaluate system performance by focusing on resource consumption metrics, such as CPU and RAM usage. The existing literature primarily focuses on integrating open-source IDS tools with SIEM. Studies such as [19] and [21] utilize Zeek as the IDS, while others like [9], [12], and [19] employ Suricata or Snort. Notably, some prior studies, including [9] and [21], have applied methods or tools for anomaly detection. However, no prior study has proposed the integration of Suricata and Zeek as signature-based IDS, Slips as an anomaly-based IDS, and Elasticsearch as the SIEM platform within a single system. This research gap presents an opportunity to investigate the effectiveness of such a hybrid EDS. III. METHODOLOGY The proposed EDS architecture, as illustrated in Figure 1, leverages three open-source IDSs: Zeek, Suricata, and Slips, and the SIEM solution, Elasticsearch. Zeek performs packet analysis, Suricata generates alert log files based on signature- based detection, and Slips generates alert log files based on anomaly-based detection. Docker Compose Stratosphere IPS __________________ __________________ I DS SI EM Kibana Dashboards Raw Network Traffic JSON Files .JSON Files Visualization JSON Files (to be stored) Network Traffic Suricata & Slips Alerts Dashboard Anomaly Detection Dashboard from IDSs Zeek Logs Dashboard Fig. 1. Proposed EDS Architecture Initially, we capture network traffic and send it to all three IDSs for analysis. Zeek, Suricata, and Slips examine the incoming traffic for malicious activities. We use Docker Compose [23] to deploy these IDS tools. With the help of Docker, we can easily deploy multiple containers of EDS within the network. Docker Compose further enhances the system’s flexibility by enabling environment variables to dy- namically pass crucial information like network interface, log paths, and Elasticsearch credentials across various IDS’s YAML (or config) files during runtime. Figure 2 illustrates an example of environment variables used in a Docker Compose file for the EDS. These variables include: • INTERFACE: Specifies the host’s network interface. • IDS_LOG_DIS: Specifies the directory for log files. • ELASTICSEARCH_USERNAME_PASSWORD: Specifies the Elasticsearch credentials. Fig. 2. EDS Configuration in the Docker .env File Next, we send IDS alert logs to the SIEM solution, Elas- ticsearch. We use a lightweight data shipping utility called Filebeat [24] to perform this operation. It monitors the location of Zeek, Suricata, and Slips logs and sends them to Elastic- search in JSON format. Upon receiving the logs, Elasticsearch indexes and stores them in its database, facilitating easy search and analysis [15]. Finally, we use Kibana to visualize the stored data. Kibana, a browser-based user interface, allows network administrators to filter, search, and display informa- tion in various formats [17]. A. Intrusion Detection Systems (IDSs) The EDS incorporates three IDSs, namely Zeek, Suricata, and Slips, each offering unique features and capabilities. 1) Zeek: It is an intrusion detection tool that extracts files and metadata from network traffic, examines them, and consolidates them into its own alert mechanism [20]. This alert mechanism contains customized logs created by Zeek highlighting insecure practices found in the network. conn.log, produced by Zeek, plays a crucial role in monitoring network activity as it contains a list of insecure connections formed by the network. 2) Suricata: It provides signature-based threat detection methods. Suricata has an event information mechanism. All the events happening in the network are stored in the eve.json file and forwarded to Elasticsearch [25]. 3) Slips: It uses ML-based anomaly detection to identify unknown attacks. Slips [22] analyzes the real-time network traffic and PCAP files and generates alerts in the form of alerts.json, which are then sent to Elasticsearch for a thorough examination. B. SIEM Solution Elasticsearch, an open-source search and analytics engine, is used in the EDS to store IDS log files [15]. Kibana is employed to visualize and interact with the data stored in Elasticsearch. To enhance data analysis in Kibana, we have designed customized dashboards focused on the Suricata and Slips alerts, an anomaly detection dashboard for all IDSs, and a dashboard for Zeek logs. IV. ANALYSIS AND RESULT To evaluate the EDS, we have developed a bash script that enables a user to conduct cyber attacks on the network in a simulated environment. A. Attack Simulation Using Bash Script The primary objective of this script is to evaluate the EDS’s effectiveness in attack identification. The script is available in the GitHub repository [26]. The script initiates by prompting the user to choose from a selection of attack tools: a) Nmap, b) Nikto [27], c) Ping [28], d) Hping [29], and e) SQLMap [30]. While these attacks are executed, the IDSs continuously run in the background to detect intrusive behavior. The IDS logs generated during these scenarios are sent to Elasticsearch for analysis. To filter malicious logs on Kibana, Kibana Query Language (KQL) [17] has been used for customized visualization. B. Detection of Attacks Utilizing Elasticsearch This section will explore how the bash script works for each attack. We will also discuss how Elasticsearch and Kibana can be customized for each attack scenario. 1) Port Scanning: We utilized the following tools to scan the network. Nmap: nmap -sS <ip> -p 1-1000, Ping: ping -c 10 <ip>, and Nikto: nikto -h <ip>. To visualize these attacks on Kibana, we used the following KQL query: not (network.direction: "outbound") and ((not (network.transport: "icmp") and not(zeek.connection.history:/Sh*|F*|D*/)) or (network.transport: "icmp" and zeek.connection.icmp.type: "8")) This KQL query identifies port scanning attempts by Nmap and Nikto by filtering network traffic. First, it excludes out- bound traffic and then applies two alternative conditions. The first condition is that the query filters network traffic that does not use the ICMP transport protocol and does not match the specified patterns in the Zeek connection history. This can help identify TCP/UDP port scanning attempts. The second condition filters out traffic using the ICMP transport protocol and containing an ICMP type of ”8” (echo request). This can help identify ICMP-based port scan attempts (ping scan). In Figure 3, the graph illustrates port scanning attempts, represented by the shaded light red region beneath the straight line graph. These attempts were predominantly caused by running Nmap on the network. The red bars in the graph indicate the number of port-scanning attack alerts generated by Suricata and Slips. These alerts are filtered using KQL to identify alerts related to attempted information leaks from Suricata and reconnaissance scanning from Slips. Fig. 3. Port Scanning Attack Detection Using KQL 2) Denial-of-Service (DoS): To simulate DoS attacks, we utilized the Hping tool with the command: hping3 -c 100 -p 21 -w 64 -d 120 --flood --rand-source <ip>. This command floods the target with a high volume of packets. Attacks were launched on ports 21 and port 80. The KQL query used for detecting DoS attacks is: not (network.direction: "outbound") This query excludes outbound traffic, focusing on inbound or internal traffic to narrow down the visualization in the graph and detect potential DoS attacks. Fig. 4. DoS Attack Detection Using KQL In Figure 4, the graph on top illustrates the targeted port numbers for the DoS attacks. The shaded green region represents the DoS attack on port 21, while the blue shade represents the same attack on port 80. In the graph on the bottom, the red bars depict the total number of alerts generated by Suricata and Slips. During the DoS attack simulations, 270,717 packets were transmitted through port 80, resulting in 2,398 alerts generated by Suricata and Slips. For port 21, 214,224 packets were transmitted, and both Suricata and Slips generated a total of 670 alerts. These statistics provide valuable insights into the volume of network traffic observed during a DoS attack and demonstrate the EDS’s capability to detect and visualize these alerts. 3) Privilege Escalation: To evaluate the EDS’s capabil- ity in detecting privilege escalation attacks, we utilized the SQLMap tool, commonly utilized for SQL injection (SQLi) attacks. To visualize the attack, we implemented the following KQL query: user_agent.original: sqlmap* It filters network logs to specifically search for user agent strings containing the term ”sqlmap.” This query allows us to capture and analyze the network traffic associated with sqlmap requests. Fig. 5. SQLi Attack Detection Using KQL Figure 5 shows the domain name and complete URL of the attack, providing valuable insights into the attacker’s methodology. Furthermore, the graph indicates the EDS’s ability to detect potential SQLi attacks. The shaded light blue region beneath the straight line graph represents the total number of SQLi attacks, the red bar represents the number of successful SQLi attacks, and the yellow bar represents the number of alerts generated by Suricata and Zeek. V. CONCLUSION EDS can enhance network security by integrating IDSs with SIEM to provide a comprehensive defense solution. The study evaluates the efficacy of integrating signature-based and anomaly-based IDSs. Additionally, the leverage of SIEM enhances the EDS with user-friendly interfaces, facilitating efficient threat detection. The research evaluates the EDS’s robustness in detecting various threats like port scanning, DoS, and privilege escalation. The outcomes of this research hold implications for the field of network security and contribute to strengthening cyber defense strategies. REFERENCES [1] J. Wang, J. Pan, I. AlQerm, and Y. Liu, “Def-ids: An ensemble defense mechanism against adversarial attacks for deep learning-based network intrusion detection,” in 2021 International Conference on Computer Communications and Networks (ICCCN), 2021, pp. 1–9. [2] G. Vigna and R. A. Kemmerer, “Netstat: A network-based intrusion detection system,” J. Comput. Secur., vol. 7, no. 1, p. 3771, jan 1999. [3] M. Ozkan-Okay, R. Samet, . Aslan, and D. Gupta, “A comprehensive systematic literature review on intrusion detection systems,” IEEE Access, vol. 9, pp. 157 727–157 760, 2021. [4] Y. Otoum and A. Nayak, “As-ids: Anomaly and signature based ids for the internet of things,” J. Netw. Syst. Manage., vol. 29, no. 3, jul 2021. [Online]. Available: https://doi.org/10.1007/s10922-021-09589-6 [5] P. Garca-Teodoro, J. Daz-Verdejo, G. Maci-Fernndez, and E. Vzquez, “Anomaly-based network intrusion detection: Techniques, systems and challenges,” Computers & Security, vol. 28, no. 1, pp. 18–28, 2009. [Online]. Available: https://www.sciencedirect.com/science/article/pii/ S0167404808000692 [6] O. Depren, M. Topallar, E. Anarim, and M. K. Ciliz, “An intelligent intrusion detection system (ids) for anomaly and misuse detection in computer networks,” Expert Systems with Applications, vol. 29, no. 4, pp. 713–722, 2005. [Online]. Available: https: //www.sciencedirect.com/science/article/pii/S0957417405000989 [7] K. Q. Yan, S.-C. Wang, and C. W. Liu, “A hybrid intrusion detection system of cluster-based wireless sensor networks,” 2009. [8] A. Abduvaliyev, S. Lee, and Y.-K. Lee, “Energy efficient hybrid intrusion detection system for wireless sensor networks,” in 2010 International Conference on Electronics and Information Engineering, vol. 2, 2010, pp. V2–25–V2–29. [9] O. Negoita and M. Carabas, “Enhanced security using elasticsearch and machine learning,” pp. 244–254, 07 2020. [10] Snort Project, “Snort,” https://www.snort.org/. [11] Elastic, “What is elasticsearch machine learning?” https://www.elastic. co/what-is/elasticsearch-machine-learning. [12] D. F. Priambodo, Amiruddin, and N. Trianto, “Hardening a work from home network with wireguard and suricata,” in 2021 International Conference on Computer Science and Engineering (IC2SE), vol. 1, 2021, pp. 1–4. [13] WireGuard, “WireGuard,” https://www.wireguard.com/. [14] Open Information Security Foundation, “Suricata,” https://suricata.io/. [15] Elastic, “elk,” https://www.elastic.co/elasticsearch/. [16] ——, “Logstash,” https://www.elastic.co/logstash/, 2021. [17] ——, “Kibana,” https://www.elastic.co/kibana/, 2021. [18] “Nmap - the Network Mapper,” https://nmap.org/. [19] A. Esseghir, F. Kamoun, and O. Hraiech, “Aker: An open- source security platform integrating ids and siem functions with encrypted traffic analytic capability,” Journal of Cyber Security Technology, vol. 6, no. 1-2, pp. 27–64, 2022. [Online]. Available: https://doi.org/10.1080/23742917.2022.2058836 [20] The Zeek Development Team, “Zeek network security monitor,” https: //zeek.org/, 2021. [21] A. R. Muhammad, P. Sukarno, and A. A. Wardana, “Integrated security information and event management (siem) with intrusion detection system (ids) for live analysis based on machine learning,” Procedia Computer Science, vol. 217, pp. 1406–1415, 2023, 4th International Conference on Industry 4.0 and Smart Manufacturing. [Online]. Available: https://www.sciencedirect.com/science/article/pii/ S1877050922024243 [22] Stratosphere Project, “Stratospherelinuxips - intrusion detection and prevention system,” https://github.com/stratosphereips/ StratosphereLinuxIPS. [23] Docker, “Docker documentation,” https://docs.docker.com/. [24] Elastic, “filebeat,” https://www.elastic.co/beats/filebeat, 2021. [25] The OISF development team, “Suricata: Open source next generation intrusion detection and prevention engine,” https://suricata-ids.org/. [26] Sarah Alh, “EDS,” https://github.com/SarahAlh/EDS. [27] sullo, “nikto,” https://github.com/sullo/nikto. [28] “Ping,” https://ping.com/en-us/. [29] Antirez, “hping,” https://github.com/antirez/hping. [30] sqlmap, “sqlmap,” https://sqlmap.org/.